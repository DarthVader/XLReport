{*******************************************************************}
{                                                                   }
{       AfalinaSoft Visual Component Library                        }
{       XL Report 4.0 with XLOptionPack  Technology                 }
{                                                                   }
{       Copyright (C) 1998, 2002 Afalina Co., Ltd.                  }
{       ALL RIGHTS RESERVED                                         }
{                                                                   }
{   The entire contents of this file is protected by U.S. and       }
{   International Copyright Laws. Unauthorized reproduction,        }
{   reverse-engineering, and distribution of all or any portion of  }
{   the code contained in this file is strictly prohibited and may  }
{   result in severe civil and criminal penalties and will be       }
{   prosecuted to the maximum extent possible under the law.        }
{                                                                   }
{   RESTRICTIONS                                                    }
{                                                                   }
{   THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES           }
{   (DCU, OBJ, DLL, ETC.) ARE CONFIDENTIAL AND PROPRIETARY TRADE    }
{   SECRETS OF AFALINA CO.,LTD. THE REGISTERED DEVELOPER IS         }
{   LICENSED TO DISTRIBUTE THE XL REPORT AND ALL ACCOMPANYING VCL   }
{   COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.               }
{                                                                   }
{   THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED      }
{   FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE        }
{   COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE       }
{   AVAILABLE TO OTHER INDIVIDUALS WITHOUT WRITTEN CONSENT          }
{   AND PERMISSION FROM AFALINA CO., LTD.                           }
{                                                                   }
{   CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON       }
{   ADDITIONAL RESTRICTIONS.                                        }
{                                                                   }
{*******************************************************************}

unit Excel8G2;

// ************************************************************************ //
// WARNING                                                                  //
// -------                                                                  //
// The types declared in this file were generated from data read from a     //
// Type Library. If this type library is explicitly or indirectly (via      //
// another type library referring to this type library) re-imported, or the //
// 'Refresh' command of the Type Library Editor activated while editing the //
// Type Library, the contents of this file will be regenerated and all      //
// manual modifications will be lost.                                       //
// ************************************************************************ //

// PASTLWTR : $Revision:   1.11.1.63  $
// File generated on 8/4/98 10:33:48 PM from Type Library described below.

// ************************************************************************ //
// Type Lib: C:\Program Files\Microsoft Office\Office\Excel8.olb
// IID\LCID: {00020813-0000-0000-C000-000000000046}\0
// Helpfile: C:\Program Files\Microsoft Office\Office\VBAXL8.HLP
// HelpString: Microsoft Excel 8.0 Object Library
// Version:    1.2
// ************************************************************************ //

{$I xlcDefs.inc}

interface

uses Windows, ActiveX, Classes, Graphics, OleCtrls, Office8G2, VBIDE8G2;

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:      //
//   Type Libraries     : LIBID_xxxx                                    //
//   CoClasses          : CLASS_xxxx                                    //
//   DISPInterfaces     : DIID_xxxx                                     //
//   Non-DISP interfaces: IID_xxxx                                      //
// *********************************************************************//
const
  LIBID_Excel: TGUID = '{00020813-0000-0000-C000-000000000046}';
  IID_Adjustments: TGUID = '{000C0310-0000-0000-C000-000000000046}';
  IID_CalloutFormat: TGUID = '{000C0311-0000-0000-C000-000000000046}';
  IID_ColorFormat: TGUID = '{000C0312-0000-0000-C000-000000000046}';
  IID_LineFormat: TGUID = '{000C0317-0000-0000-C000-000000000046}';
  IID_ShapeNode: TGUID = '{000C0318-0000-0000-C000-000000000046}';
  IID_ShapeNodes: TGUID = '{000C0319-0000-0000-C000-000000000046}';
  IID_PictureFormat: TGUID = '{000C031A-0000-0000-C000-000000000046}';
  IID_ShadowFormat: TGUID = '{000C031B-0000-0000-C000-000000000046}';
  IID_TextEffectFormat: TGUID = '{000C031F-0000-0000-C000-000000000046}';
  IID_ThreeDFormat: TGUID = '{000C0321-0000-0000-C000-000000000046}';
  IID_FillFormat: TGUID = '{000C0314-0000-0000-C000-000000000046}';
  IID_IFont: TGUID = '{0002084D-0001-0000-C000-000000000046}';
  IID_IWindow: TGUID = '{00020893-0001-0000-C000-000000000046}';
  IID_IWindows: TGUID = '{00020892-0001-0000-C000-000000000046}';
  IID_IAppEvents: TGUID = '{00024413-0001-0000-C000-000000000046}';
  IID__Application: TGUID = '{000208D5-0000-0000-C000-000000000046}';
  IID_IWorksheetFunction: TGUID = '{00020845-0001-0000-C000-000000000046}';
  IID_IRange: TGUID = '{00020846-0001-0000-C000-000000000046}';
  IID_IChartEvents: TGUID = '{0002440F-0001-0000-C000-000000000046}';
  IID__Chart: TGUID = '{000208D6-0000-0000-C000-000000000046}';
  IID_Sheets: TGUID = '{000208D7-0000-0000-C000-000000000046}';
  IID_IVPageBreak: TGUID = '{00024402-0001-0000-C000-000000000046}';
  IID_IHPageBreak: TGUID = '{00024401-0001-0000-C000-000000000046}';
  IID_IHPageBreaks: TGUID = '{00024404-0001-0000-C000-000000000046}';
  IID_IVPageBreaks: TGUID = '{00024405-0001-0000-C000-000000000046}';
  IID_IRecentFile: TGUID = '{00024407-0001-0000-C000-000000000046}';
  IID_IRecentFiles: TGUID = '{00024406-0001-0000-C000-000000000046}';
  IID_IDocEvents: TGUID = '{00024411-0001-0000-C000-000000000046}';
  IID__Worksheet: TGUID = '{000208D8-0000-0000-C000-000000000046}';
  IID_IStyle: TGUID = '{00020852-0001-0000-C000-000000000046}';
  IID_IStyles: TGUID = '{00020853-0001-0000-C000-000000000046}';
  IID_IBorders: TGUID = '{00020855-0001-0000-C000-000000000046}';
  IID__Global: TGUID = '{000208D9-0000-0000-C000-000000000046}';
  IID_IAddIn: TGUID = '{00020857-0001-0000-C000-000000000046}';
  IID_IAddIns: TGUID = '{00020858-0001-0000-C000-000000000046}';
  IID_IToolbar: TGUID = '{0002085C-0001-0000-C000-000000000046}';
  IID_IToolbars: TGUID = '{0002085D-0001-0000-C000-000000000046}';
  IID_IToolbarButton: TGUID = '{0002085E-0001-0000-C000-000000000046}';
  IID_IToolbarButtons: TGUID = '{0002085F-0001-0000-C000-000000000046}';
  IID_IAreas: TGUID = '{00020860-0001-0000-C000-000000000046}';
  IID_IWorkbookEvents: TGUID = '{00024412-0001-0000-C000-000000000046}';
  IID__Workbook: TGUID = '{000208DA-0000-0000-C000-000000000046}';
  IID_Workbooks: TGUID = '{000208DB-0000-0000-C000-000000000046}';
  IID_IMenuBars: TGUID = '{00020863-0001-0000-C000-000000000046}';
  IID_IMenuBar: TGUID = '{00020864-0001-0000-C000-000000000046}';
  IID_IMenus: TGUID = '{00020865-0001-0000-C000-000000000046}';
  IID_IMenu: TGUID = '{00020866-0001-0000-C000-000000000046}';
  IID_IMenuItems: TGUID = '{00020867-0001-0000-C000-000000000046}';
  IID_IMenuItem: TGUID = '{00020868-0001-0000-C000-000000000046}';
  IID_ICharts: TGUID = '{0002086D-0001-0000-C000-000000000046}';
  IID_IDrawingObjects: TGUID = '{0002086F-0001-0000-C000-000000000046}';
  IID_IPivotCache: TGUID = '{0002441C-0001-0000-C000-000000000046}';
  IID_IPivotCaches: TGUID = '{0002441D-0001-0000-C000-000000000046}';
  IID_IPivotFormula: TGUID = '{0002441E-0001-0000-C000-000000000046}';
  IID_IPivotFormulas: TGUID = '{0002441F-0001-0000-C000-000000000046}';
  IID_IPivotTable: TGUID = '{00020872-0001-0000-C000-000000000046}';
  IID_IPivotTables: TGUID = '{00020873-0001-0000-C000-000000000046}';
  IID_IPivotField: TGUID = '{00020874-0001-0000-C000-000000000046}';
  IID_IPivotFields: TGUID = '{00020875-0001-0000-C000-000000000046}';
  IID_ICalculatedFields: TGUID = '{00024420-0001-0000-C000-000000000046}';
  IID_IPivotItem: TGUID = '{00020876-0001-0000-C000-000000000046}';
  IID_IPivotItems: TGUID = '{00020877-0001-0000-C000-000000000046}';
  IID_ICalculatedItems: TGUID = '{00024421-0001-0000-C000-000000000046}';
  IID_ICharacters: TGUID = '{00020878-0001-0000-C000-000000000046}';
  IID_IDialogs: TGUID = '{00020879-0001-0000-C000-000000000046}';
  IID_IDialog: TGUID = '{0002087A-0001-0000-C000-000000000046}';
  IID_ISoundNote: TGUID = '{0002087B-0001-0000-C000-000000000046}';
  IID_IButton: TGUID = '{0002087D-0001-0000-C000-000000000046}';
  IID_IButtons: TGUID = '{0002087E-0001-0000-C000-000000000046}';
  IID_ICheckBox: TGUID = '{0002087F-0001-0000-C000-000000000046}';
  IID_ICheckBoxes: TGUID = '{00020880-0001-0000-C000-000000000046}';
  IID_IOptionButton: TGUID = '{00020881-0001-0000-C000-000000000046}';
  IID_IOptionButtons: TGUID = '{00020882-0001-0000-C000-000000000046}';
  IID_IEditBox: TGUID = '{00020883-0001-0000-C000-000000000046}';
  IID_IEditBoxes: TGUID = '{00020884-0001-0000-C000-000000000046}';
  IID_IScrollBar: TGUID = '{00020885-0001-0000-C000-000000000046}';
  IID_IScrollBars: TGUID = '{00020886-0001-0000-C000-000000000046}';
  IID_IListBox: TGUID = '{00020887-0001-0000-C000-000000000046}';
  IID_IListBoxes: TGUID = '{00020888-0001-0000-C000-000000000046}';
  IID_IGroupBox: TGUID = '{00020889-0001-0000-C000-000000000046}';
  IID_IGroupBoxes: TGUID = '{0002088A-0001-0000-C000-000000000046}';
  IID_IDropDown: TGUID = '{0002088B-0001-0000-C000-000000000046}';
  IID_IDropDowns: TGUID = '{0002088C-0001-0000-C000-000000000046}';
  IID_ISpinner: TGUID = '{0002088D-0001-0000-C000-000000000046}';
  IID_ISpinners: TGUID = '{0002088E-0001-0000-C000-000000000046}';
  IID_IDialogFrame: TGUID = '{0002088F-0001-0000-C000-000000000046}';
  IID_ILabel: TGUID = '{00020890-0001-0000-C000-000000000046}';
  IID_ILabels: TGUID = '{00020891-0001-0000-C000-000000000046}';
  IID_IPanes: TGUID = '{00020894-0001-0000-C000-000000000046}';
  IID_IPane: TGUID = '{00020895-0001-0000-C000-000000000046}';
  IID_IScenarios: TGUID = '{00020896-0001-0000-C000-000000000046}';
  IID_IScenario: TGUID = '{00020897-0001-0000-C000-000000000046}';
  IID_IGroupObject: TGUID = '{00020898-0001-0000-C000-000000000046}';
  IID_IGroupObjects: TGUID = '{00020899-0001-0000-C000-000000000046}';
  IID_ILine: TGUID = '{0002089A-0001-0000-C000-000000000046}';
  IID_ILines: TGUID = '{0002089B-0001-0000-C000-000000000046}';
  IID_IRectangle: TGUID = '{0002089C-0001-0000-C000-000000000046}';
  IID_IRectangles: TGUID = '{0002089D-0001-0000-C000-000000000046}';
  IID_IOval: TGUID = '{0002089E-0001-0000-C000-000000000046}';
  IID_IOvals: TGUID = '{0002089F-0001-0000-C000-000000000046}';
  IID_IArc: TGUID = '{000208A0-0001-0000-C000-000000000046}';
  IID_IArcs: TGUID = '{000208A1-0001-0000-C000-000000000046}';
  IID_IOLEObjectEvents: TGUID = '{00024410-0001-0000-C000-000000000046}';
  IID__IOLEObject: TGUID = '{000208A2-0001-0000-C000-000000000046}';
  IID_IOLEObjects: TGUID = '{000208A3-0001-0000-C000-000000000046}';
  IID_ITextBox: TGUID = '{000208A4-0001-0000-C000-000000000046}';
  IID_ITextBoxes: TGUID = '{000208A5-0001-0000-C000-000000000046}';
  IID_IPicture: TGUID = '{000208A6-0001-0000-C000-000000000046}';
  IID_IPictures: TGUID = '{000208A7-0001-0000-C000-000000000046}';
  IID_IDrawing: TGUID = '{000208A8-0001-0000-C000-000000000046}';
  IID_IDrawings: TGUID = '{000208A9-0001-0000-C000-000000000046}';
  IID_IRoutingSlip: TGUID = '{000208AA-0001-0000-C000-000000000046}';
  IID_IOutline: TGUID = '{000208AB-0001-0000-C000-000000000046}';
  IID_IModule: TGUID = '{000208AD-0001-0000-C000-000000000046}';
  IID_IModules: TGUID = '{000208AE-0001-0000-C000-000000000046}';
  IID_IDialogSheet: TGUID = '{000208AF-0001-0000-C000-000000000046}';
  IID_IDialogSheets: TGUID = '{000208B0-0001-0000-C000-000000000046}';
  IID_IWorksheets: TGUID = '{000208B1-0001-0000-C000-000000000046}';
  IID_IPageSetup: TGUID = '{000208B4-0001-0000-C000-000000000046}';
  IID_INames: TGUID = '{000208B8-0001-0000-C000-000000000046}';
  IID_IName: TGUID = '{000208B9-0001-0000-C000-000000000046}';
  IID_IChartObject: TGUID = '{000208CF-0001-0000-C000-000000000046}';
  IID_IChartObjects: TGUID = '{000208D0-0001-0000-C000-000000000046}';
  IID_IMailer: TGUID = '{000208D1-0001-0000-C000-000000000046}';
  IID_ICustomViews: TGUID = '{00024422-0001-0000-C000-000000000046}';
  IID_ICustomView: TGUID = '{00024423-0001-0000-C000-000000000046}';
  IID_IFormatConditions: TGUID = '{00024424-0001-0000-C000-000000000046}';
  IID_IFormatCondition: TGUID = '{00024425-0001-0000-C000-000000000046}';
  IID_IComments: TGUID = '{00024426-0001-0000-C000-000000000046}';
  IID_IComment: TGUID = '{00024427-0001-0000-C000-000000000046}';
  IID_IRefreshEvents: TGUID = '{0002441B-0001-0000-C000-000000000046}';
  IID__IQueryTable: TGUID = '{00024428-0001-0000-C000-000000000046}';
  IID_IQueryTables: TGUID = '{00024429-0001-0000-C000-000000000046}';
  IID_IParameter: TGUID = '{0002442A-0001-0000-C000-000000000046}';
  IID_IParameters: TGUID = '{0002442B-0001-0000-C000-000000000046}';
  IID_IODBCError: TGUID = '{0002442C-0001-0000-C000-000000000046}';
  IID_IODBCErrors: TGUID = '{0002442D-0001-0000-C000-000000000046}';
  IID_IValidation: TGUID = '{0002442F-0001-0000-C000-000000000046}';
  IID_IHyperlinks: TGUID = '{00024430-0001-0000-C000-000000000046}';
  IID_IHyperlink: TGUID = '{00024431-0001-0000-C000-000000000046}';
  IID_IAutoFilter: TGUID = '{00024432-0001-0000-C000-000000000046}';
  IID_IFilters: TGUID = '{00024433-0001-0000-C000-000000000046}';
  IID_IFilter: TGUID = '{00024434-0001-0000-C000-000000000046}';
  IID_IAutoCorrect: TGUID = '{000208D4-0001-0000-C000-000000000046}';
  IID_IBorder: TGUID = '{00020854-0001-0000-C000-000000000046}';
  IID_IInterior: TGUID = '{00020870-0001-0000-C000-000000000046}';
  IID_IChartFillFormat: TGUID = '{00024435-0001-0000-C000-000000000046}';
  IID_IChartColorFormat: TGUID = '{00024436-0001-0000-C000-000000000046}';
  IID_IAxis: TGUID = '{00020848-0001-0000-C000-000000000046}';
  IID_IChartTitle: TGUID = '{00020849-0001-0000-C000-000000000046}';
  IID_IAxisTitle: TGUID = '{0002084A-0001-0000-C000-000000000046}';
  IID_IChartGroup: TGUID = '{00020859-0001-0000-C000-000000000046}';
  IID_IChartGroups: TGUID = '{0002085A-0001-0000-C000-000000000046}';
  IID_IAxes: TGUID = '{0002085B-0001-0000-C000-000000000046}';
  IID_IPoints: TGUID = '{00020869-0001-0000-C000-000000000046}';
  IID_IPoint: TGUID = '{0002086A-0001-0000-C000-000000000046}';
  IID_ISeries: TGUID = '{0002086B-0001-0000-C000-000000000046}';
  IID_ISeriesCollection: TGUID = '{0002086C-0001-0000-C000-000000000046}';
  IID_IDataLabel: TGUID = '{000208B2-0001-0000-C000-000000000046}';
  IID_IDataLabels: TGUID = '{000208B3-0001-0000-C000-000000000046}';
  IID_ILegendEntry: TGUID = '{000208BA-0001-0000-C000-000000000046}';
  IID_ILegendEntries: TGUID = '{000208BB-0001-0000-C000-000000000046}';
  IID_ILegendKey: TGUID = '{000208BC-0001-0000-C000-000000000046}';
  IID_ITrendlines: TGUID = '{000208BD-0001-0000-C000-000000000046}';
  IID_ITrendline: TGUID = '{000208BE-0001-0000-C000-000000000046}';
  IID_ICorners: TGUID = '{000208C0-0001-0000-C000-000000000046}';
  IID_ISeriesLines: TGUID = '{000208C1-0001-0000-C000-000000000046}';
  IID_IHiLoLines: TGUID = '{000208C2-0001-0000-C000-000000000046}';
  IID_IGridlines: TGUID = '{000208C3-0001-0000-C000-000000000046}';
  IID_IDropLines: TGUID = '{000208C4-0001-0000-C000-000000000046}';
  IID_ILeaderLines: TGUID = '{00024437-0001-0000-C000-000000000046}';
  IID_IUpBars: TGUID = '{000208C5-0001-0000-C000-000000000046}';
  IID_IDownBars: TGUID = '{000208C6-0001-0000-C000-000000000046}';
  IID_IFloor: TGUID = '{000208C7-0001-0000-C000-000000000046}';
  IID_IWalls: TGUID = '{000208C8-0001-0000-C000-000000000046}';
  IID_ITickLabels: TGUID = '{000208C9-0001-0000-C000-000000000046}';
  IID_IPlotArea: TGUID = '{000208CB-0001-0000-C000-000000000046}';
  IID_IChartArea: TGUID = '{000208CC-0001-0000-C000-000000000046}';
  IID_ILegend: TGUID = '{000208CD-0001-0000-C000-000000000046}';
  IID_IErrorBars: TGUID = '{000208CE-0001-0000-C000-000000000046}';
  IID_IDataTable: TGUID = '{00020843-0001-0000-C000-000000000046}';
  IID_IPhonetic: TGUID = '{00024438-0001-0000-C000-000000000046}';
  IID_IShape: TGUID = '{00024439-0001-0000-C000-000000000046}';
  IID_IShapes: TGUID = '{0002443A-0001-0000-C000-000000000046}';
  IID_IShapeRange: TGUID = '{0002443B-0001-0000-C000-000000000046}';
  IID_IGroupShapes: TGUID = '{0002443C-0001-0000-C000-000000000046}';
  IID_ITextFrame: TGUID = '{0002443D-0001-0000-C000-000000000046}';
  IID_IConnectorFormat: TGUID = '{0002443E-0001-0000-C000-000000000046}';
  IID_IFreeformBuilder: TGUID = '{0002443F-0001-0000-C000-000000000046}';
  IID_IControlFormat: TGUID = '{00024440-0001-0000-C000-000000000046}';
  IID_IOLEFormat: TGUID = '{00024441-0001-0000-C000-000000000046}';
  IID_ILinkFormat: TGUID = '{00024442-0001-0000-C000-000000000046}';
  DIID_Font: TGUID = '{0002084D-0000-0000-C000-000000000046}';
  DIID_Window_: TGUID = '{00020893-0000-0000-C000-000000000046}';
  DIID_Windows: TGUID = '{00020892-0000-0000-C000-000000000046}';
  DIID_AppEvents: TGUID = '{00024413-0000-0000-C000-000000000046}';
  DIID_WorksheetFunction: TGUID = '{00020845-0000-0000-C000-000000000046}';
  DIID_Range: TGUID = '{00020846-0000-0000-C000-000000000046}';
  DIID_ChartEvents: TGUID = '{0002440F-0000-0000-C000-000000000046}';
  DIID_VPageBreak: TGUID = '{00024402-0000-0000-C000-000000000046}';
  DIID_HPageBreak: TGUID = '{00024401-0000-0000-C000-000000000046}';
  DIID_HPageBreaks: TGUID = '{00024404-0000-0000-C000-000000000046}';
  DIID_VPageBreaks: TGUID = '{00024405-0000-0000-C000-000000000046}';
  DIID_RecentFile: TGUID = '{00024407-0000-0000-C000-000000000046}';
  DIID_RecentFiles: TGUID = '{00024406-0000-0000-C000-000000000046}';
  DIID_DocEvents: TGUID = '{00024411-0000-0000-C000-000000000046}';
  DIID_Style: TGUID = '{00020852-0000-0000-C000-000000000046}';
  DIID_Styles: TGUID = '{00020853-0000-0000-C000-000000000046}';
  DIID_Borders: TGUID = '{00020855-0000-0000-C000-000000000046}';
  DIID_AddIn: TGUID = '{00020857-0000-0000-C000-000000000046}';
  DIID_AddIns: TGUID = '{00020858-0000-0000-C000-000000000046}';
  DIID_Toolbar: TGUID = '{0002085C-0000-0000-C000-000000000046}';
  DIID_Toolbars: TGUID = '{0002085D-0000-0000-C000-000000000046}';
  DIID_ToolbarButton: TGUID = '{0002085E-0000-0000-C000-000000000046}';
  DIID_ToolbarButtons: TGUID = '{0002085F-0000-0000-C000-000000000046}';
  DIID_Areas: TGUID = '{00020860-0000-0000-C000-000000000046}';
  DIID_WorkbookEvents: TGUID = '{00024412-0000-0000-C000-000000000046}';
  DIID_MenuBars: TGUID = '{00020863-0000-0000-C000-000000000046}';
  DIID_MenuBar: TGUID = '{00020864-0000-0000-C000-000000000046}';
  DIID_Menus: TGUID = '{00020865-0000-0000-C000-000000000046}';
  DIID_Menu: TGUID = '{00020866-0000-0000-C000-000000000046}';
  DIID_MenuItems: TGUID = '{00020867-0000-0000-C000-000000000046}';
  DIID_MenuItem: TGUID = '{00020868-0000-0000-C000-000000000046}';
  DIID_Charts: TGUID = '{0002086D-0000-0000-C000-000000000046}';
  DIID_DrawingObjects: TGUID = '{0002086F-0000-0000-C000-000000000046}';
  DIID_PivotCache: TGUID = '{0002441C-0000-0000-C000-000000000046}';
  DIID_PivotCaches: TGUID = '{0002441D-0000-0000-C000-000000000046}';
  DIID_PivotFormula: TGUID = '{0002441E-0000-0000-C000-000000000046}';
  DIID_PivotFormulas: TGUID = '{0002441F-0000-0000-C000-000000000046}';
  DIID_PivotTable: TGUID = '{00020872-0000-0000-C000-000000000046}';
  DIID_PivotTables: TGUID = '{00020873-0000-0000-C000-000000000046}';
  DIID_PivotField: TGUID = '{00020874-0000-0000-C000-000000000046}';
  DIID_PivotFields: TGUID = '{00020875-0000-0000-C000-000000000046}';
  DIID_CalculatedFields: TGUID = '{00024420-0000-0000-C000-000000000046}';
  DIID_PivotItem: TGUID = '{00020876-0000-0000-C000-000000000046}';
  DIID_PivotItems: TGUID = '{00020877-0000-0000-C000-000000000046}';
  DIID_CalculatedItems: TGUID = '{00024421-0000-0000-C000-000000000046}';
  DIID_Characters: TGUID = '{00020878-0000-0000-C000-000000000046}';
  DIID_Dialogs: TGUID = '{00020879-0000-0000-C000-000000000046}';
  DIID_Dialog: TGUID = '{0002087A-0000-0000-C000-000000000046}';
  DIID_SoundNote: TGUID = '{0002087B-0000-0000-C000-000000000046}';
  DIID_Button: TGUID = '{0002087D-0000-0000-C000-000000000046}';
  DIID_Buttons: TGUID = '{0002087E-0000-0000-C000-000000000046}';
  DIID_CheckBox: TGUID = '{0002087F-0000-0000-C000-000000000046}';
  DIID_CheckBoxes: TGUID = '{00020880-0000-0000-C000-000000000046}';
  DIID_OptionButton: TGUID = '{00020881-0000-0000-C000-000000000046}';
  DIID_OptionButtons: TGUID = '{00020882-0000-0000-C000-000000000046}';
  DIID_EditBox: TGUID = '{00020883-0000-0000-C000-000000000046}';
  DIID_EditBoxes: TGUID = '{00020884-0000-0000-C000-000000000046}';
  DIID_ScrollBar: TGUID = '{00020885-0000-0000-C000-000000000046}';
  DIID_ScrollBars: TGUID = '{00020886-0000-0000-C000-000000000046}';
  DIID_ListBox: TGUID = '{00020887-0000-0000-C000-000000000046}';
  DIID_ListBoxes: TGUID = '{00020888-0000-0000-C000-000000000046}';
  DIID_GroupBox: TGUID = '{00020889-0000-0000-C000-000000000046}';
  DIID_GroupBoxes: TGUID = '{0002088A-0000-0000-C000-000000000046}';
  DIID_DropDown: TGUID = '{0002088B-0000-0000-C000-000000000046}';
  DIID_DropDowns: TGUID = '{0002088C-0000-0000-C000-000000000046}';
  DIID_Spinner: TGUID = '{0002088D-0000-0000-C000-000000000046}';
  DIID_Spinners: TGUID = '{0002088E-0000-0000-C000-000000000046}';
  DIID_DialogFrame: TGUID = '{0002088F-0000-0000-C000-000000000046}';
  DIID_Label_: TGUID = '{00020890-0000-0000-C000-000000000046}';
  DIID_Labels: TGUID = '{00020891-0000-0000-C000-000000000046}';
  DIID_Panes: TGUID = '{00020894-0000-0000-C000-000000000046}';
  DIID_Pane: TGUID = '{00020895-0000-0000-C000-000000000046}';
  DIID_Scenarios: TGUID = '{00020896-0000-0000-C000-000000000046}';
  DIID_Scenario: TGUID = '{00020897-0000-0000-C000-000000000046}';
  DIID_GroupObject: TGUID = '{00020898-0000-0000-C000-000000000046}';
  DIID_GroupObjects: TGUID = '{00020899-0000-0000-C000-000000000046}';
  DIID_Line: TGUID = '{0002089A-0000-0000-C000-000000000046}';
  DIID_Lines: TGUID = '{0002089B-0000-0000-C000-000000000046}';
  DIID_Rectangle: TGUID = '{0002089C-0000-0000-C000-000000000046}';
  DIID_Rectangles: TGUID = '{0002089D-0000-0000-C000-000000000046}';
  DIID_Oval: TGUID = '{0002089E-0000-0000-C000-000000000046}';
  DIID_Ovals: TGUID = '{0002089F-0000-0000-C000-000000000046}';
  DIID_Arc: TGUID = '{000208A0-0000-0000-C000-000000000046}';
  DIID_Arcs: TGUID = '{000208A1-0000-0000-C000-000000000046}';
  DIID_OLEObjectEvents: TGUID = '{00024410-0000-0000-C000-000000000046}';
  DIID__OLEObject: TGUID = '{000208A2-0000-0000-C000-000000000046}';
  DIID_OLEObjects: TGUID = '{000208A3-0000-0000-C000-000000000046}';
  DIID_TextBox: TGUID = '{000208A4-0000-0000-C000-000000000046}';
  DIID_TextBoxes: TGUID = '{000208A5-0000-0000-C000-000000000046}';
  DIID_Picture: TGUID = '{000208A6-0000-0000-C000-000000000046}';
  DIID_Pictures: TGUID = '{000208A7-0000-0000-C000-000000000046}';
  DIID_Drawing: TGUID = '{000208A8-0000-0000-C000-000000000046}';
  DIID_Drawings: TGUID = '{000208A9-0000-0000-C000-000000000046}';
  DIID_RoutingSlip: TGUID = '{000208AA-0000-0000-C000-000000000046}';
  DIID_Outline: TGUID = '{000208AB-0000-0000-C000-000000000046}';
  DIID_Module: TGUID = '{000208AD-0000-0000-C000-000000000046}';
  DIID_Modules: TGUID = '{000208AE-0000-0000-C000-000000000046}';
  DIID_DialogSheet: TGUID = '{000208AF-0000-0000-C000-000000000046}';
  DIID_DialogSheets: TGUID = '{000208B0-0000-0000-C000-000000000046}';
  DIID_Worksheets: TGUID = '{000208B1-0000-0000-C000-000000000046}';
  DIID_PageSetup: TGUID = '{000208B4-0000-0000-C000-000000000046}';
  DIID_Names: TGUID = '{000208B8-0000-0000-C000-000000000046}';
  DIID_Name: TGUID = '{000208B9-0000-0000-C000-000000000046}';
  DIID_ChartObject: TGUID = '{000208CF-0000-0000-C000-000000000046}';
  DIID_ChartObjects: TGUID = '{000208D0-0000-0000-C000-000000000046}';
  DIID_Mailer: TGUID = '{000208D1-0000-0000-C000-000000000046}';
  DIID_CustomViews: TGUID = '{00024422-0000-0000-C000-000000000046}';
  DIID_CustomView: TGUID = '{00024423-0000-0000-C000-000000000046}';
  DIID_FormatConditions: TGUID = '{00024424-0000-0000-C000-000000000046}';
  DIID_FormatCondition: TGUID = '{00024425-0000-0000-C000-000000000046}';
  DIID_Comments: TGUID = '{00024426-0000-0000-C000-000000000046}';
  DIID_Comment: TGUID = '{00024427-0000-0000-C000-000000000046}';
  DIID_RefreshEvents: TGUID = '{0002441B-0000-0000-C000-000000000046}';
  DIID__QueryTable: TGUID = '{00024428-0000-0000-C000-000000000046}';
  DIID_QueryTables: TGUID = '{00024429-0000-0000-C000-000000000046}';
  DIID_Parameter: TGUID = '{0002442A-0000-0000-C000-000000000046}';
  DIID_Parameters: TGUID = '{0002442B-0000-0000-C000-000000000046}';
  DIID_ODBCError: TGUID = '{0002442C-0000-0000-C000-000000000046}';
  DIID_ODBCErrors: TGUID = '{0002442D-0000-0000-C000-000000000046}';
  DIID_Validation: TGUID = '{0002442F-0000-0000-C000-000000000046}';
  DIID_Hyperlinks: TGUID = '{00024430-0000-0000-C000-000000000046}';
  DIID_Hyperlink: TGUID = '{00024431-0000-0000-C000-000000000046}';
  DIID_AutoFilter: TGUID = '{00024432-0000-0000-C000-000000000046}';
  DIID_Filters: TGUID = '{00024433-0000-0000-C000-000000000046}';
  DIID_Filter: TGUID = '{00024434-0000-0000-C000-000000000046}';
  DIID_AutoCorrect: TGUID = '{000208D4-0000-0000-C000-000000000046}';
  DIID_Border: TGUID = '{00020854-0000-0000-C000-000000000046}';
  DIID_Interior: TGUID = '{00020870-0000-0000-C000-000000000046}';
  DIID_ChartFillFormat: TGUID = '{00024435-0000-0000-C000-000000000046}';
  DIID_ChartColorFormat: TGUID = '{00024436-0000-0000-C000-000000000046}';
  DIID_Axis: TGUID = '{00020848-0000-0000-C000-000000000046}';
  DIID_ChartTitle: TGUID = '{00020849-0000-0000-C000-000000000046}';
  DIID_AxisTitle: TGUID = '{0002084A-0000-0000-C000-000000000046}';
  DIID_ChartGroup: TGUID = '{00020859-0000-0000-C000-000000000046}';
  DIID_ChartGroups: TGUID = '{0002085A-0000-0000-C000-000000000046}';
  DIID_Axes: TGUID = '{0002085B-0000-0000-C000-000000000046}';
  DIID_Points: TGUID = '{00020869-0000-0000-C000-000000000046}';
  DIID_Point: TGUID = '{0002086A-0000-0000-C000-000000000046}';
  DIID_Series: TGUID = '{0002086B-0000-0000-C000-000000000046}';
  DIID_SeriesCollection: TGUID = '{0002086C-0000-0000-C000-000000000046}';
  DIID_DataLabel: TGUID = '{000208B2-0000-0000-C000-000000000046}';
  DIID_DataLabels: TGUID = '{000208B3-0000-0000-C000-000000000046}';
  DIID_LegendEntry: TGUID = '{000208BA-0000-0000-C000-000000000046}';
  DIID_LegendEntries: TGUID = '{000208BB-0000-0000-C000-000000000046}';
  DIID_LegendKey: TGUID = '{000208BC-0000-0000-C000-000000000046}';
  DIID_Trendlines: TGUID = '{000208BD-0000-0000-C000-000000000046}';
  DIID_Trendline: TGUID = '{000208BE-0000-0000-C000-000000000046}';
  DIID_Corners: TGUID = '{000208C0-0000-0000-C000-000000000046}';
  DIID_SeriesLines: TGUID = '{000208C1-0000-0000-C000-000000000046}';
  DIID_HiLoLines: TGUID = '{000208C2-0000-0000-C000-000000000046}';
  DIID_Gridlines: TGUID = '{000208C3-0000-0000-C000-000000000046}';
  DIID_DropLines: TGUID = '{000208C4-0000-0000-C000-000000000046}';
  DIID_LeaderLines: TGUID = '{00024437-0000-0000-C000-000000000046}';
  DIID_UpBars: TGUID = '{000208C5-0000-0000-C000-000000000046}';
  DIID_DownBars: TGUID = '{000208C6-0000-0000-C000-000000000046}';
  DIID_Floor: TGUID = '{000208C7-0000-0000-C000-000000000046}';
  DIID_Walls: TGUID = '{000208C8-0000-0000-C000-000000000046}';
  DIID_TickLabels: TGUID = '{000208C9-0000-0000-C000-000000000046}';
  DIID_PlotArea: TGUID = '{000208CB-0000-0000-C000-000000000046}';
  DIID_ChartArea: TGUID = '{000208CC-0000-0000-C000-000000000046}';
  DIID_Legend: TGUID = '{000208CD-0000-0000-C000-000000000046}';
  DIID_ErrorBars: TGUID = '{000208CE-0000-0000-C000-000000000046}';
  DIID_DataTable: TGUID = '{00020843-0000-0000-C000-000000000046}';
  DIID_Phonetic: TGUID = '{00024438-0000-0000-C000-000000000046}';
  DIID_Shape: TGUID = '{00024439-0000-0000-C000-000000000046}';
  DIID_Shapes: TGUID = '{0002443A-0000-0000-C000-000000000046}';
  DIID_ShapeRange: TGUID = '{0002443B-0000-0000-C000-000000000046}';
  DIID_GroupShapes: TGUID = '{0002443C-0000-0000-C000-000000000046}';
  DIID_TextFrame: TGUID = '{0002443D-0000-0000-C000-000000000046}';
  DIID_ConnectorFormat: TGUID = '{0002443E-0000-0000-C000-000000000046}';
  DIID_FreeformBuilder: TGUID = '{0002443F-0000-0000-C000-000000000046}';
  DIID_ControlFormat: TGUID = '{00024440-0000-0000-C000-000000000046}';
  DIID_OLEFormat: TGUID = '{00024441-0000-0000-C000-000000000046}';
  DIID_LinkFormat: TGUID = '{00024442-0000-0000-C000-000000000046}';
  IID_IDummy: TGUID = '{0002442E-0001-0000-C000-000000000046}';
  CLASS_QueryTable: TGUID = '{59191DA1-EA47-11CE-A51F-00AA0061507F}';
  CLASS_Application_: TGUID = '{00024500-0000-0000-C000-000000000046}';
  CLASS_Chart: TGUID = '{00020821-0000-0000-C000-000000000046}';
  CLASS_Worksheet: TGUID = '{00020820-0000-0000-C000-000000000046}';
  CLASS_Global: TGUID = '{00020812-0000-0000-C000-000000000046}';
  CLASS_Workbook: TGUID = '{00020819-0000-0000-C000-000000000046}';
  CLASS_OLEObject: TGUID = '{00020818-0000-0000-C000-000000000046}';

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                  //
// *********************************************************************//
// Constants constants
type
  Constants = TOleEnum;
const
  xlAll = $FFFFEFF8;
  xlAutomatic = $FFFFEFF7;
  xlBoth = $00000001;
  xlCenter = $FFFFEFF4;
  xlChecker = $00000009;
  xlCircle = $00000008;
  xlCorner = $00000002;
  xlCrissCross = $00000010;
  xlCross = $00000004;
  xlDiamond = $00000002;
  xlDistributed = $FFFFEFEB;
  xlDoubleAccounting = $00000005;
  xlFixedValue = $00000001;
  xlFormats = $FFFFEFE6;
  xlGray16 = $00000011;
  xlGray8 = $00000012;
  xlGrid = $0000000F;
  xlHigh = $FFFFEFE1;
  xlInside = $00000002;
  xlJustify = $FFFFEFDE;
  xlLightDown = $0000000D;
  xlLightHorizontal = $0000000B;
  xlLightUp = $0000000E;
  xlLightVertical = $0000000C;
  xlLow = $FFFFEFDA;
  xlManual = $FFFFEFD9;
  xlMinusValues = $00000003;
  xlModule = $FFFFEFD3;
  xlNextToAxis = $00000004;
  xlNone = $FFFFEFD2;
  xlNotes = $FFFFEFD0;
  xlOff = $FFFFEFCE;
  xlOn = $00000001;
  xlPercent = $00000002;
  xlPlus = $00000009;
  xlPlusValues = $00000002;
  xlSemiGray75 = $0000000A;
  xlShowLabel = $00000004;
  xlShowLabelAndPercent = $00000005;
  xlShowPercent = $00000003;
  xlShowValue = $00000002;
  xlSimple = $FFFFEFC6;
  xlSingle = $00000002;
  xlSingleAccounting = $00000004;
  xlSolid = $00000001;
  xlSquare = $00000001;
  xlStar = $00000005;
  xlStError = $00000004;
  xlToolbarButton = $00000002;
  xlTriangle = $00000003;
  xlGray25 = $FFFFEFE4;
  xlGray50 = $FFFFEFE3;
  xlGray75 = $FFFFEFE2;
  xlBottom = $FFFFEFF5;
  xlLeft = $FFFFEFDD;
  xlRight = $FFFFEFC8;
  xlTop = $FFFFEFC0;
  xl3DBar = $FFFFEFFD;
  xl3DSurface = $FFFFEFF9;
  xlBar = $00000002;
  xlColumn = $00000003;
  xlCombination = $FFFFEFF1;
  xlCustom = $FFFFEFEE;
  xlDefaultAutoFormat = $FFFFFFFF;
  xlMaximum = $00000002;
  xlMinimum = $00000004;
  xlOpaque = $00000003;
  xlTransparent = $00000002;
  xlBidi = $FFFFEC78;
  xlLatin = $FFFFEC77;
  xlContext = $FFFFEC76;
  xlLTR = $FFFFEC75;
  xlRTL = $FFFFEC74;
  xlVisualCursor = $00000002;
  xlLogicalCursor = $00000001;
  xlSystem = $00000001;
  xlPartial = $00000003;
  xlHindiNumerals = $00000003;
  xlBidiCalendar = $00000003;
  xlGregorian = $00000002;
  xlComplete = $00000004;
  xlScale = $00000003;
  xlClosed = $00000003;
  xlColor1 = $00000007;
  xlColor2 = $00000008;
  xlColor3 = $00000009;
  xlConstants = $00000002;
  xlContents = $00000002;
  xlBelow = $00000001;
  xlCascade = $00000007;
  xlCenterAcrossSelection = $00000007;
  xlChart4 = $00000002;
  xlChartSeries = $00000011;
  xlChartShort = $00000006;
  xlChartTitles = $00000012;
  xlClassic1 = $00000001;
  xlClassic2 = $00000002;
  xlClassic3 = $00000003;
  xl3DEffects1 = $0000000D;
  xl3DEffects2 = $0000000E;
  xlAbove = $00000000;
  xlAccounting1 = $00000004;
  xlAccounting2 = $00000005;
  xlAccounting3 = $00000006;
  xlAccounting4 = $00000011;
  xlAdd = $00000002;
  xlDebugCodePane = $0000000D;
  xlDesktop = $00000009;
  xlDirect = $00000001;
  xlDivide = $00000005;
  xlDoubleClosed = $00000005;
  xlDoubleOpen = $00000004;
  xlDoubleQuote = $00000001;
  xlEntireChart = $00000014;
  xlExcelMenus = $00000001;
  xlExtended = $00000003;
  xlFill = $00000005;
  xlFirst = $00000000;
  xlFloating = $00000005;
  xlFormula = $00000005;
  xlGeneral = $00000001;
  xlGridline = $00000016;
  xlIcons = $00000001;
  xlImmediatePane = $0000000C;
  xlInteger = $00000002;
  xlLast = $00000001;
  xlLastCell = $0000000B;
  xlList1 = $0000000A;
  xlList2 = $0000000B;
  xlList3 = $0000000C;
  xlLocalFormat1 = $0000000F;
  xlLocalFormat2 = $00000010;
  xlLong = $00000003;
  xlLotusHelp = $00000002;
  xlMacrosheetCell = $00000007;
  xlMixed = $00000002;
  xlMultiply = $00000004;
  xlNarrow = $00000001;
  xlNoDocuments = $00000003;
  xlOpen = $00000002;
  xlOutside = $00000003;
  xlReference = $00000004;
  xlSemiautomatic = $00000002;
  xlShort = $00000001;
  xlSingleQuote = $00000002;
  xlStrict = $00000002;
  xlSubtract = $00000003;
  xlTextBox = $00000010;
  xlTiled = $00000001;
  xlTitleBar = $00000008;
  xlToolbar = $00000001;
  xlVisible = $0000000C;
  xlWatchPane = $0000000B;
  xlWide = $00000003;
  xlWorkbookTab = $00000006;
  xlWorksheet4 = $00000001;
  xlWorksheetCell = $00000003;
  xlWorksheetShort = $00000005;
  xlAllExceptBorders = $00000006;
  xlLeftToRight = $00000002;
  xlTopToBottom = $00000001;
  xlVeryHidden = $00000002;
  xlDrawingObject = $0000000E;

// XlCreator constants
type
  XlCreator = TOleEnum;
const
  xlCreatorCode = $5843454C;

// XlChartGallery constants
type
  XlChartGallery = TOleEnum;
const
  xlBuiltIn = $00000015;
  xlUserDefined = $00000016;
  xlAnyGallery = $00000017;

// XlColorIndex constants
type
  XlColorIndex = TOleEnum;
const
  xlColorIndexAutomatic = $FFFFEFF7;
  xlColorIndexNone = $FFFFEFD2;

// XlEndStyleCap constants
type
  XlEndStyleCap = TOleEnum;
const
  xlCap = $00000001;
  xlNoCap = $00000002;

// XlRowCol constants
type
  XlRowCol = TOleEnum;
const
  xlColumns = $00000002;
  xlRows = $00000001;

// XlScaleType constants
type
  XlScaleType = TOleEnum;
const
  xlScaleLinear = $FFFFEFDC;
  xlScaleLogarithmic = $FFFFEFDB;

// XlDataSeriesType constants
type
  XlDataSeriesType = TOleEnum;
const
  xlAutoFill = $00000004;
  xlChronological = $00000003;
  xlGrowth = $00000002;
  xlDataSeriesLinear = $FFFFEFDC;

// XlAxisCrosses constants
type
  XlAxisCrosses = TOleEnum;
const
  xlAxisCrossesAutomatic = $FFFFEFF7;
  xlAxisCrossesCustom = $FFFFEFEE;
  xlAxisCrossesMaximum = $00000002;
  xlAxisCrossesMinimum = $00000004;

// XlAxisGroup constants
type
  XlAxisGroup = TOleEnum;
const
  xlPrimary = $00000001;
  xlSecondary = $00000002;

// XlBackground constants
type
  XlBackground = TOleEnum;
const
  xlBackgroundAutomatic = $FFFFEFF7;
  xlBackgroundOpaque = $00000003;
  xlBackgroundTransparent = $00000002;

// XlWindowState constants
type
  XlWindowState = TOleEnum;
const
  xlMaximized = $FFFFEFD7;
  xlMinimized = $FFFFEFD4;
  xlNormal = $FFFFEFD1;

// XlAxisType constants
type
  XlAxisType = TOleEnum;
const
  xlCategory = $00000001;
  xlSeriesAxis = $00000003;
  xlValue = $00000002;

// XlArrowHeadLength constants
type
  XlArrowHeadLength = TOleEnum;
const
  xlArrowHeadLengthLong = $00000003;
  xlArrowHeadLengthMedium = $FFFFEFD6;
  xlArrowHeadLengthShort = $00000001;

// XlVAlign constants
type
  XlVAlign = TOleEnum;
const
  xlVAlignBottom = $FFFFEFF5;
  xlVAlignCenter = $FFFFEFF4;
  xlVAlignDistributed = $FFFFEFEB;
  xlVAlignJustify = $FFFFEFDE;
  xlVAlignTop = $FFFFEFC0;

// XlTickMark constants
type
  XlTickMark = TOleEnum;
const
  xlTickMarkCross = $00000004;
  xlTickMarkInside = $00000002;
  xlTickMarkNone = $FFFFEFD2;
  xlTickMarkOutside = $00000003;

// XlErrorBarDirection constants
type
  XlErrorBarDirection = TOleEnum;
const
  xlX = $FFFFEFB8;
  xlY = $00000001;

// XlErrorBarInclude constants
type
  XlErrorBarInclude = TOleEnum;
const
  xlErrorBarIncludeBoth = $00000001;
  xlErrorBarIncludeMinusValues = $00000003;
  xlErrorBarIncludeNone = $FFFFEFD2;
  xlErrorBarIncludePlusValues = $00000002;

// XlDisplayBlanksAs constants
type
  XlDisplayBlanksAs = TOleEnum;
const
  xlInterpolated = $00000003;
  xlNotPlotted = $00000001;
  xlZero = $00000002;

// XlArrowHeadStyle constants
type
  XlArrowHeadStyle = TOleEnum;
const
  xlArrowHeadStyleClosed = $00000003;
  xlArrowHeadStyleDoubleClosed = $00000005;
  xlArrowHeadStyleDoubleOpen = $00000004;
  xlArrowHeadStyleNone = $FFFFEFD2;
  xlArrowHeadStyleOpen = $00000002;

// XlArrowHeadWidth constants
type
  XlArrowHeadWidth = TOleEnum;
const
  xlArrowHeadWidthMedium = $FFFFEFD6;
  xlArrowHeadWidthNarrow = $00000001;
  xlArrowHeadWidthWide = $00000003;

// XlHAlign constants
type
  XlHAlign = TOleEnum;
const
  xlHAlignCenter = $FFFFEFF4;
  xlHAlignCenterAcrossSelection = $00000007;
  xlHAlignDistributed = $FFFFEFEB;
  xlHAlignFill = $00000005;
  xlHAlignGeneral = $00000001;
  xlHAlignJustify = $FFFFEFDE;
  xlHAlignLeft = $FFFFEFDD;
  xlHAlignRight = $FFFFEFC8;

// XlTickLabelPosition constants
type
  XlTickLabelPosition = TOleEnum;
const
  xlTickLabelPositionHigh = $FFFFEFE1;
  xlTickLabelPositionLow = $FFFFEFDA;
  xlTickLabelPositionNextToAxis = $00000004;
  xlTickLabelPositionNone = $FFFFEFD2;

// XlLegendPosition constants
type
  XlLegendPosition = TOleEnum;
const
  xlLegendPositionBottom = $FFFFEFF5;
  xlLegendPositionCorner = $00000002;
  xlLegendPositionLeft = $FFFFEFDD;
  xlLegendPositionRight = $FFFFEFC8;
  xlLegendPositionTop = $FFFFEFC0;

// XlChartPictureType constants
type
  XlChartPictureType = TOleEnum;
const
  xlStackScale = $00000003;
  xlStack = $00000002;
  xlStretch = $00000001;

// XlChartPicturePlacement constants
type
  XlChartPicturePlacement = TOleEnum;
const
  xlSides = $00000001;
  xlEnd = $00000002;
  xlEndSides = $00000003;
  xlFront = $00000004;
  xlFrontSides = $00000005;
  xlFrontEnd = $00000006;
  xlAllFaces = $00000007;

// XlOrientation constants
type
  XlOrientation = TOleEnum;
const
  xlDownward = $FFFFEFB6;
  xlHorizontal = $FFFFEFE0;
  xlUpward = $FFFFEFB5;
  xlVertical = $FFFFEFBA;

// XlTickLabelOrientation constants
type
  XlTickLabelOrientation = TOleEnum;
const
  xlTickLabelOrientationAutomatic = $FFFFEFF7;
  xlTickLabelOrientationDownward = $FFFFEFB6;
  xlTickLabelOrientationHorizontal = $FFFFEFE0;
  xlTickLabelOrientationUpward = $FFFFEFB5;
  xlTickLabelOrientationVertical = $FFFFEFBA;

// XlBorderWeight constants
type
  XlBorderWeight = TOleEnum;
const
  xlHairline = $00000001;
  xlMedium = $FFFFEFD6;
  xlThick = $00000004;
  xlThin = $00000002;

// XlDataSeriesDate constants
type
  XlDataSeriesDate = TOleEnum;
const
  xlDay = $00000001;
  xlMonth = $00000003;
  xlWeekday = $00000002;
  xlYear = $00000004;

// XlUnderlineStyle constants
type
  XlUnderlineStyle = TOleEnum;
const
  xlUnderlineStyleDouble = $FFFFEFE9;
  xlUnderlineStyleDoubleAccounting = $00000005;
  xlUnderlineStyleNone = $FFFFEFD2;
  xlUnderlineStyleSingle = $00000002;
  xlUnderlineStyleSingleAccounting = $00000004;

// XlErrorBarType constants
type
  XlErrorBarType = TOleEnum;
const
  xlErrorBarTypeCustom = $FFFFEFEE;
  xlErrorBarTypeFixedValue = $00000001;
  xlErrorBarTypePercent = $00000002;
  xlErrorBarTypeStDev = $FFFFEFC5;
  xlErrorBarTypeStError = $00000004;

// XlTrendlineType constants
type
  XlTrendlineType = TOleEnum;
const
  xlExponential = $00000005;
  xlLinear = $FFFFEFDC;
  xlLogarithmic = $FFFFEFDB;
  xlMovingAvg = $00000006;
  xlPolynomial = $00000003;
  xlPower = $00000004;

// XlLineStyle constants
type
  XlLineStyle = TOleEnum;
const
  xlContinuous = $00000001;
  xlDash = $FFFFEFED;
  xlDashDot = $00000004;
  xlDashDotDot = $00000005;
  xlDot = $FFFFEFEA;
  xlDouble = $FFFFEFE9;
  xlSlantDashDot = $0000000D;
  xlLineStyleNone = $FFFFEFD2;

// XlDataLabelsType constants
type
  XlDataLabelsType = TOleEnum;
const
  xlDataLabelsShowNone = $FFFFEFD2;
  xlDataLabelsShowValue = $00000002;
  xlDataLabelsShowPercent = $00000003;
  xlDataLabelsShowLabel = $00000004;
  xlDataLabelsShowLabelAndPercent = $00000005;
  xlDataLabelsShowBubbleSizes = $00000006;

// XlMarkerStyle constants
type
  XlMarkerStyle = TOleEnum;
const
  xlMarkerStyleAutomatic = $FFFFEFF7;
  xlMarkerStyleCircle = $00000008;
  xlMarkerStyleDash = $FFFFEFED;
  xlMarkerStyleDiamond = $00000002;
  xlMarkerStyleDot = $FFFFEFEA;
  xlMarkerStyleNone = $FFFFEFD2;
  xlMarkerStylePicture = $FFFFEFCD;
  xlMarkerStylePlus = $00000009;
  xlMarkerStyleSquare = $00000001;
  xlMarkerStyleStar = $00000005;
  xlMarkerStyleTriangle = $00000003;
  xlMarkerStyleX = $FFFFEFB8;

// XlPictureConvertorType constants
type
  XlPictureConvertorType = TOleEnum;
const
  xlBMP = $00000001;
  xlCGM = $00000007;
  xlDRW = $00000004;
  xlDXF = $00000005;
  xlEPS = $00000008;
  xlHGL = $00000006;
  xlPCT = $0000000D;
  xlPCX = $0000000A;
  xlPIC = $0000000B;
  xlPLT = $0000000C;
  xlTIF = $00000009;
  xlWMF = $00000002;
  xlWPG = $00000003;

// XlPattern constants
type
  XlPattern = TOleEnum;
const
  xlPatternAutomatic = $FFFFEFF7;
  xlPatternChecker = $00000009;
  xlPatternCrissCross = $00000010;
  xlPatternDown = $FFFFEFE7;
  xlPatternGray16 = $00000011;
  xlPatternGray25 = $FFFFEFE4;
  xlPatternGray50 = $FFFFEFE3;
  xlPatternGray75 = $FFFFEFE2;
  xlPatternGray8 = $00000012;
  xlPatternGrid = $0000000F;
  xlPatternHorizontal = $FFFFEFE0;
  xlPatternLightDown = $0000000D;
  xlPatternLightHorizontal = $0000000B;
  xlPatternLightUp = $0000000E;
  xlPatternLightVertical = $0000000C;
  xlPatternNone = $FFFFEFD2;
  xlPatternSemiGray75 = $0000000A;
  xlPatternSolid = $00000001;
  xlPatternUp = $FFFFEFBE;
  xlPatternVertical = $FFFFEFBA;

// XlChartSplitType constants
type
  XlChartSplitType = TOleEnum;
const
  xlSplitByPosition = $00000001;
  xlSplitByPercentValue = $00000003;
  xlSplitByCustomSplit = $00000004;
  xlSplitByValue = $00000002;

// XlDataLabelPosition constants
type
  XlDataLabelPosition = TOleEnum;
const
  xlLabelPositionCenter = $FFFFEFF4;
  xlLabelPositionAbove = $00000000;
  xlLabelPositionBelow = $00000001;
  xlLabelPositionLeft = $FFFFEFDD;
  xlLabelPositionRight = $FFFFEFC8;
  xlLabelPositionOutsideEnd = $00000002;
  xlLabelPositionInsideEnd = $00000003;
  xlLabelPositionInsideBase = $00000004;
  xlLabelPositionBestFit = $00000005;
  xlLabelPositionMixed = $00000006;
  xlLabelPositionCustom = $00000007;

// XlTimeUnit constants
type
  XlTimeUnit = TOleEnum;
const
  xlDays = $00000000;
  xlMonths = $00000001;
  xlYears = $00000002;

// XlCategoryType constants
type
  XlCategoryType = TOleEnum;
const
  xlCategoryScale = $00000002;
  xlTimeScale = $00000003;
  xlAutomaticScale = $FFFFEFF7;

// XlBarShape constants
type
  XlBarShape = TOleEnum;
const
  xlBox = $00000000;
  xlPyramidToPoint = $00000001;
  xlPyramidToMax = $00000002;
  xlCylinder = $00000003;
  xlConeToPoint = $00000004;
  xlConeToMax = $00000005;

// XlChartType constants
type
  XlChartType = TOleEnum;
const
  xlColumnClustered = $00000033;
  xlColumnStacked = $00000034;
  xlColumnStacked100 = $00000035;
  xl3DColumnClustered = $00000036;
  xl3DColumnStacked = $00000037;
  xl3DColumnStacked100 = $00000038;
  xlBarClustered = $00000039;
  xlBarStacked = $0000003A;
  xlBarStacked100 = $0000003B;
  xl3DBarClustered = $0000003C;
  xl3DBarStacked = $0000003D;
  xl3DBarStacked100 = $0000003E;
  xlLineStacked = $0000003F;
  xlLineStacked100 = $00000040;
  xlLineMarkers = $00000041;
  xlLineMarkersStacked = $00000042;
  xlLineMarkersStacked100 = $00000043;
  xlPieOfPie = $00000044;
  xlPieExploded = $00000045;
  xl3DPieExploded = $00000046;
  xlBarOfPie = $00000047;
  xlXYScatterSmooth = $00000048;
  xlXYScatterSmoothNoMarkers = $00000049;
  xlXYScatterLines = $0000004A;
  xlXYScatterLinesNoMarkers = $0000004B;
  xlAreaStacked = $0000004C;
  xlAreaStacked100 = $0000004D;
  xl3DAreaStacked = $0000004E;
  xl3DAreaStacked100 = $0000004F;
  xlDoughnutExploded = $00000050;
  xlRadarMarkers = $00000051;
  xlRadarFilled = $00000052;
  xlSurface = $00000053;
  xlSurfaceWireframe = $00000054;
  xlSurfaceTopView = $00000055;
  xlSurfaceTopViewWireframe = $00000056;
  xlBubble = $0000000F;
  xlBubble3DEffect = $00000057;
  xlStockHLC = $00000058;
  xlStockOHLC = $00000059;
  xlStockVHLC = $0000005A;
  xlStockVOHLC = $0000005B;
  xlCylinderColClustered = $0000005C;
  xlCylinderColStacked = $0000005D;
  xlCylinderColStacked100 = $0000005E;
  xlCylinderBarClustered = $0000005F;
  xlCylinderBarStacked = $00000060;
  xlCylinderBarStacked100 = $00000061;
  xlCylinderCol = $00000062;
  xlConeColClustered = $00000063;
  xlConeColStacked = $00000064;
  xlConeColStacked100 = $00000065;
  xlConeBarClustered = $00000066;
  xlConeBarStacked = $00000067;
  xlConeBarStacked100 = $00000068;
  xlConeCol = $00000069;
  xlPyramidColClustered = $0000006A;
  xlPyramidColStacked = $0000006B;
  xlPyramidColStacked100 = $0000006C;
  xlPyramidBarClustered = $0000006D;
  xlPyramidBarStacked = $0000006E;
  xlPyramidBarStacked100 = $0000006F;
  xlPyramidCol = $00000070;
  xl3DColumn = $FFFFEFFC;
  xlLine = $00000004;
  xl3DLine = $FFFFEFFB;
  xl3DPie = $FFFFEFFA;
  xlPie = $00000005;
  xlXYScatter = $FFFFEFB7;
  xl3DArea = $FFFFEFFE;
  xlArea = $00000001;
  xlDoughnut = $FFFFEFE8;
  xlRadar = $FFFFEFC9;

// XlChartItem constants
type
  XlChartItem = TOleEnum;
const
  xlDataLabel = $00000000;
  xlChartArea = $00000002;
  xlSeries = $00000003;
  xlChartTitle = $00000004;
  xlWalls = $00000005;
  xlCorners = $00000006;
  xlDataTable = $00000007;
  xlTrendline = $00000008;
  xlErrorBars = $00000009;
  xlXErrorBars = $0000000A;
  xlYErrorBars = $0000000B;
  xlLegendEntry = $0000000C;
  xlLegendKey = $0000000D;
  xlShape = $0000000E;
  xlMajorGridlines = $0000000F;
  xlMinorGridlines = $00000010;
  xlAxisTitle = $00000011;
  xlUpBars = $00000012;
  xlPlotArea = $00000013;
  xlDownBars = $00000014;
  xlAxis = $00000015;
  xlSeriesLines = $00000016;
  xlFloor = $00000017;
  xlLegend = $00000018;
  xlHiLoLines = $00000019;
  xlDropLines = $0000001A;
  xlRadarAxisLabels = $0000001B;
  xlNothing = $0000001C;
  xlLeaderLines = $0000001D;

// XlSizeRepresents constants
type
  XlSizeRepresents = TOleEnum;
const
  xlSizeIsWidth = $00000002;
  xlSizeIsArea = $00000001;

// XlInsertShiftDirection constants
type
  XlInsertShiftDirection = TOleEnum;
const
  xlShiftDown = $FFFFEFE7;
  xlShiftToRight = $FFFFEFBF;

// XlDeleteShiftDirection constants
type
  XlDeleteShiftDirection = TOleEnum;
const
  xlShiftToLeft = $FFFFEFC1;
  xlShiftUp = $FFFFEFBE;

// XlDirection constants
type
  XlDirection = TOleEnum;
const
  xlDown = $FFFFEFE7;
  xlToLeft = $FFFFEFC1;
  xlToRight = $FFFFEFBF;
  xlUp = $FFFFEFBE;

// XlConsolidationFunction constants
type
  XlConsolidationFunction = TOleEnum;
const
  xlAverage = $FFFFEFF6;
  xlCount = $FFFFEFF0;
  xlCountNums = $FFFFEFEF;
  xlMax = $FFFFEFD8;
  xlMin = $FFFFEFD5;
  xlProduct = $FFFFEFCB;
  xlStDev = $FFFFEFC5;
  xlStDevP = $FFFFEFC4;
  xlSum = $FFFFEFC3;
  xlVar = $FFFFEFBC;
  xlVarP = $FFFFEFBB;

// XlSheetType constants
type
  XlSheetType = TOleEnum;
const
  xlChart = $FFFFEFF3;
  xlDialogSheet = $FFFFEFEC;
  xlExcel4IntlMacroSheet = $00000004;
  xlExcel4MacroSheet = $00000003;
  xlWorksheet = $FFFFEFB9;

// XlLocationInTable constants
type
  XlLocationInTable = TOleEnum;
const
  xlColumnHeader = $FFFFEFF2;
  xlColumnItem = $00000005;
  xlDataHeader = $00000003;
  xlDataItem = $00000007;
  xlPageHeader = $00000002;
  xlPageItem = $00000006;
  xlRowHeader = $FFFFEFC7;
  xlRowItem = $00000004;
  xlTableBody = $00000008;

// XlFindLookIn constants
type
  XlFindLookIn = TOleEnum;
const
  xlFormulas = $FFFFEFE5;
  xlComments = $FFFFEFD0;
  xlValues = $FFFFEFBD;

// XlWindowType constants
type
  XlWindowType = TOleEnum;
const
  xlChartAsWindow = $00000005;
  xlChartInPlace = $00000004;
  xlClipboard = $00000003;
  xlInfo = $FFFFEFDF;
  xlWorkbook = $00000001;

// XlPivotFieldDataType constants
type
  XlPivotFieldDataType = TOleEnum;
const
  xlDate = $00000002;
  xlNumber = $FFFFEFCF;
  xlText = $FFFFEFC2;

// XlCopyPictureFormat constants
type
  XlCopyPictureFormat = TOleEnum;
const
  xlBitmap = $00000002;
  xlPicture = $FFFFEFCD;

// XlPivotTableSourceType constants
type
  XlPivotTableSourceType = TOleEnum;
const
  xlConsolidation = $00000003;
  xlDatabase = $00000001;
  xlExternal = $00000002;
  xlPivotTable = $FFFFEFCC;

// XlReferenceStyle constants
type
  XlReferenceStyle = TOleEnum;
const
  xlA1 = $00000001;
  xlR1C1 = $FFFFEFCA;

// XlMSApplication constants
type
  XlMSApplication = TOleEnum;
const
  xlMicrosoftAccess = $00000004;
  xlMicrosoftFoxPro = $00000005;
  xlMicrosoftMail = $00000003;
  xlMicrosoftPowerPoint = $00000002;
  xlMicrosoftProject = $00000006;
  xlMicrosoftSchedulePlus = $00000007;
  xlMicrosoftWord = $00000001;

// XlMouseButton constants
type
  XlMouseButton = TOleEnum;
const
  xlNoButton = $00000000;
  xlPrimaryButton = $00000001;
  xlSecondaryButton = $00000002;

// XlCutCopyMode constants
type
  XlCutCopyMode = TOleEnum;
const
  xlCopy = $00000001;
  xlCut = $00000002;

// XlFillWith constants
type
  XlFillWith = TOleEnum;
const
  xlFillWithAll = $FFFFEFF8;
  xlFillWithContents = $00000002;
  xlFillWithFormats = $FFFFEFE6;

// XlFilterAction constants
type
  XlFilterAction = TOleEnum;
const
  xlFilterCopy = $00000002;
  xlFilterInPlace = $00000001;

// XlOrder constants
type
  XlOrder = TOleEnum;
const
  xlDownThenOver = $00000001;
  xlOverThenDown = $00000002;

// XlLinkType constants
type
  XlLinkType = TOleEnum;
const
  xlLinkTypeExcelLinks = $00000001;
  xlLinkTypeOLELinks = $00000002;

// XlApplyNamesOrder constants
type
  XlApplyNamesOrder = TOleEnum;
const
  xlColumnThenRow = $00000002;
  xlRowThenColumn = $00000001;

// XlEnableCancelKey constants
type
  XlEnableCancelKey = TOleEnum;
const
  xlDisabled = $00000000;
  xlErrorHandler = $00000002;
  xlInterrupt = $00000001;

// XlPageBreak constants
type
  XlPageBreak = TOleEnum;
const
  xlPageBreakAutomatic = $FFFFEFF7;
  xlPageBreakManual = $FFFFEFD9;

// XlOLEType constants
type
  XlOLEType = TOleEnum;
const
  xlOLEControl = $00000002;
  xlOLEEmbed = $00000001;
  xlOLELink = $00000000;

// XlPageOrientation constants
type
  XlPageOrientation = TOleEnum;
const
  xlLandscape = $00000002;
  xlPortrait = $00000001;

// XlLinkInfo constants
type
  XlLinkInfo = TOleEnum;
const
  xlEditionDate = $00000002;
  xlUpdateState = $00000001;

// XlCommandUnderlines constants
type
  XlCommandUnderlines = TOleEnum;
const
  xlCommandUnderlinesAutomatic = $FFFFEFF7;
  xlCommandUnderlinesOff = $FFFFEFCE;
  xlCommandUnderlinesOn = $00000001;

// XlOLEVerb constants
type
  XlOLEVerb = TOleEnum;
const
  xlVerbOpen = $00000002;
  xlVerbPrimary = $00000001;

// XlCalculation constants
type
  XlCalculation = TOleEnum;
const
  xlCalculationAutomatic = $FFFFEFF7;
  xlCalculationManual = $FFFFEFD9;
  xlCalculationSemiautomatic = $00000002;

// XlFileAccess constants
type
  XlFileAccess = TOleEnum;
const
  xlReadOnly = $00000003;
  xlReadWrite = $00000002;

// XlEditionType constants
type
  XlEditionType = TOleEnum;
const
  xlPublisher = $00000001;
  xlSubscriber = $00000002;

// XlObjectSize constants
type
  XlObjectSize = TOleEnum;
const
  xlFitToPage = $00000002;
  xlFullPage = $00000003;
  xlScreenSize = $00000001;

// XlLookAt constants
type
  XlLookAt = TOleEnum;
const
  xlPart = $00000002;
  xlWhole = $00000001;

// XlMailSystem constants
type
  XlMailSystem = TOleEnum;
const
  xlMAPI = $00000001;
  xlNoMailSystem = $00000000;
  xlPowerTalk = $00000002;

// XlLinkInfoType constants
type
  XlLinkInfoType = TOleEnum;
const
  xlLinkInfoOLELinks = $00000002;
  xlLinkInfoPublishers = $00000005;
  xlLinkInfoSubscribers = $00000006;

// XlCVError constants
type
  XlCVError = TOleEnum;
const
  xlErrDiv0 = $000007D7;
  xlErrNA = $000007FA;
  xlErrName = $000007ED;
  xlErrNull = $000007D0;
  xlErrNum = $000007F4;
  xlErrRef = $000007E7;
  xlErrValue = $000007DF;

// XlEditionFormat constants
type
  XlEditionFormat = TOleEnum;
const
  xlBIFF = $00000002;
  xlPICT = $00000001;
  xlRTF = $00000004;
  xlVALU = $00000008;

// XlLink constants
type
  XlLink = TOleEnum;
const
  xlExcelLinks = $00000001;
  xlOLELinks = $00000002;
  xlPublishers = $00000005;
  xlSubscribers = $00000006;

// XlCellType constants
type
  XlCellType = TOleEnum;
const
  xlCellTypeBlanks = $00000004;
  xlCellTypeConstants = $00000002;
  xlCellTypeFormulas = $FFFFEFE5;
  xlCellTypeLastCell = $0000000B;
  xlCellTypeComments = $FFFFEFD0;
  xlCellTypeVisible = $0000000C;
  xlCellTypeAllFormatConditions = $FFFFEFB4;
  xlCellTypeSameFormatConditions = $FFFFEFB3;
  xlCellTypeAllValidation = $FFFFEFB2;
  xlCellTypeSameValidation = $FFFFEFB1;

// XlArrangeStyle constants
type
  XlArrangeStyle = TOleEnum;
const
  xlArrangeStyleCascade = $00000007;
  xlArrangeStyleHorizontal = $FFFFEFE0;
  xlArrangeStyleTiled = $00000001;
  xlArrangeStyleVertical = $FFFFEFBA;

// XlMousePointer constants
type
  XlMousePointer = TOleEnum;
const
  xlIBeam = $00000003;
  xlDefault = $FFFFEFD1;
  xlNorthwestArrow = $00000001;
  xlWait = $00000002;

// XlEditionOptionsOption constants
type
  XlEditionOptionsOption = TOleEnum;
const
  xlAutomaticUpdate = $00000004;
  xlCancel = $00000001;
  xlChangeAttributes = $00000006;
  xlManualUpdate = $00000005;
  xlOpenSource = $00000003;
  xlSelect = $00000003;
  xlSendPublisher = $00000002;
  xlUpdateSubscriber = $00000002;

// XlAutoFillType constants
type
  XlAutoFillType = TOleEnum;
const
  xlFillCopy = $00000001;
  xlFillDays = $00000005;
  xlFillDefault = $00000000;
  xlFillFormats = $00000003;
  xlFillMonths = $00000007;
  xlFillSeries = $00000002;
  xlFillValues = $00000004;
  xlFillWeekdays = $00000006;
  xlFillYears = $00000008;
  xlGrowthTrend = $0000000A;
  xlLinearTrend = $00000009;

// XlAutoFilterOperator constants
type
  XlAutoFilterOperator = TOleEnum;
const
  xlAnd = $00000001;
  xlBottom10Items = $00000004;
  xlBottom10Percent = $00000006;
  xlOr = $00000002;
  xlTop10Items = $00000003;
  xlTop10Percent = $00000005;

// XlClipboardFormat constants
type
  XlClipboardFormat = TOleEnum;
const
  xlClipboardFormatBIFF = $00000008;
  xlClipboardFormatBIFF2 = $00000012;
  xlClipboardFormatBIFF3 = $00000014;
  xlClipboardFormatBIFF4 = $0000001E;
  xlClipboardFormatBinary = $0000000F;
  xlClipboardFormatBitmap = $00000009;
  xlClipboardFormatCGM = $0000000D;
  xlClipboardFormatCSV = $00000005;
  xlClipboardFormatDIF = $00000004;
  xlClipboardFormatDspText = $0000000C;
  xlClipboardFormatEmbeddedObject = $00000015;
  xlClipboardFormatEmbedSource = $00000016;
  xlClipboardFormatLink = $0000000B;
  xlClipboardFormatLinkSource = $00000017;
  xlClipboardFormatLinkSourceDesc = $00000020;
  xlClipboardFormatMovie = $00000018;
  xlClipboardFormatNative = $0000000E;
  xlClipboardFormatObjectDesc = $0000001F;
  xlClipboardFormatObjectLink = $00000013;
  xlClipboardFormatOwnerLink = $00000011;
  xlClipboardFormatPICT = $00000002;
  xlClipboardFormatPrintPICT = $00000003;
  xlClipboardFormatRTF = $00000007;
  xlClipboardFormatScreenPICT = $0000001D;
  xlClipboardFormatStandardFont = $0000001C;
  xlClipboardFormatStandardScale = $0000001B;
  xlClipboardFormatSYLK = $00000006;
  xlClipboardFormatTable = $00000010;
  xlClipboardFormatText = $00000000;
  xlClipboardFormatToolFace = $00000019;
  xlClipboardFormatToolFacePICT = $0000001A;
  xlClipboardFormatVALU = $00000001;
  xlClipboardFormatWK1 = $0000000A;

// XlFileFormat constants
type
  XlFileFormat = TOleEnum;
const
  xlAddIn = $00000012;
  xlCSV = $00000006;
  xlCSVMac = $00000016;
  xlCSVMSDOS = $00000018;
  xlCSVWindows = $00000017;
  xlDBF2 = $00000007;
  xlDBF3 = $00000008;
  xlDBF4 = $0000000B;
  xlDIF = $00000009;
  xlExcel2 = $00000010;
  xlExcel2FarEast = $0000001B;
  xlExcel3 = $0000001D;
  xlExcel4 = $00000021;
  xlExcel5 = $00000027;
  xlExcel7 = $00000027;
  xlExcel9795 = $0000002B;
  xlExcel4Workbook = $00000023;
  xlIntlAddIn = $0000001A;
  xlIntlMacro = $00000019;
  xlWorkbookNormal = $FFFFEFD1;
  xlSYLK = $00000002;
  xlTemplate = $00000011;
  xlCurrentPlatformText = $FFFFEFC2;
  xlTextMac = $00000013;
  xlTextMSDOS = $00000015;
  xlTextPrinter = $00000024;
  xlTextWindows = $00000014;
  xlWJ2WD1 = $0000000E;
  xlWK1 = $00000005;
  xlWK1ALL = $0000001F;
  xlWK1FMT = $0000001E;
  xlWK3 = $0000000F;
  xlWK4 = $00000026;
  xlWK3FM3 = $00000020;
  xlWKS = $00000004;
  xlWorks2FarEast = $0000001C;
  xlWQ1 = $00000022;
  xlWJ3 = $00000028;
  xlWJ3FJ3 = $00000029;

// XlApplicationInternational constants
type
  XlApplicationInternational = TOleEnum;
const
  xl24HourClock = $00000021;
  xl4DigitYears = $0000002B;
  xlAlternateArraySeparator = $00000010;
  xlColumnSeparator = $0000000E;
  xlCountryCode = $00000001;
  xlCountrySetting = $00000002;
  xlCurrencyBefore = $00000025;
  xlCurrencyCode = $00000019;
  xlCurrencyDigits = $0000001B;
  xlCurrencyLeadingZeros = $00000028;
  xlCurrencyMinusSign = $00000026;
  xlCurrencyNegative = $0000001C;
  xlCurrencySpaceBefore = $00000024;
  xlCurrencyTrailingZeros = $00000027;
  xlDateOrder = $00000020;
  xlDateSeparator = $00000011;
  xlDayCode = $00000015;
  xlDayLeadingZero = $0000002A;
  xlDecimalSeparator = $00000003;
  xlGeneralFormatName = $0000001A;
  xlHourCode = $00000016;
  xlLeftBrace = $0000000C;
  xlLeftBracket = $0000000A;
  xlListSeparator = $00000005;
  xlLowerCaseColumnLetter = $00000009;
  xlLowerCaseRowLetter = $00000008;
  xlMDY = $0000002C;
  xlMetric = $00000023;
  xlMinuteCode = $00000017;
  xlMonthCode = $00000014;
  xlMonthLeadingZero = $00000029;
  xlMonthNameChars = $0000001E;
  xlNoncurrencyDigits = $0000001D;
  xlNonEnglishFunctions = $00000022;
  xlRightBrace = $0000000D;
  xlRightBracket = $0000000B;
  xlRowSeparator = $0000000F;
  xlSecondCode = $00000018;
  xlThousandsSeparator = $00000004;
  xlTimeLeadingZero = $0000002D;
  xlTimeSeparator = $00000012;
  xlUpperCaseColumnLetter = $00000007;
  xlUpperCaseRowLetter = $00000006;
  xlWeekdayNameChars = $0000001F;
  xlYearCode = $00000013;

// XlPageBreakExtent constants
type
  XlPageBreakExtent = TOleEnum;
const
  xlPageBreakFull = $00000001;
  xlPageBreakPartial = $00000002;

// XlCellInsertionMode constants
type
  XlCellInsertionMode = TOleEnum;
const
  xlOverwriteCells = $00000000;
  xlInsertDeleteCells = $00000001;
  xlInsertEntireRows = $00000002;

// XlFormulaLabel constants
type
  XlFormulaLabel = TOleEnum;
const
  xlNoLabels = $FFFFEFD2;
  xlRowLabels = $00000001;
  xlColumnLabels = $00000002;
  xlMixedLabels = $00000003;

// XlHighlightChangesTime constants
type
  XlHighlightChangesTime = TOleEnum;
const
  xlSinceMyLastSave = $00000001;
  xlAllChanges = $00000002;
  xlNotYetReviewed = $00000003;

// XlCommentDisplayMode constants
type
  XlCommentDisplayMode = TOleEnum;
const
  xlNoIndicator = $00000000;
  xlCommentIndicatorOnly = $FFFFFFFF;
  xlCommentAndIndicator = $00000001;

// XlFormatConditionType constants
type
  XlFormatConditionType = TOleEnum;
const
  xlCellValue = $00000001;
  xlExpression = $00000002;

// XlFormatConditionOperator constants
type
  XlFormatConditionOperator = TOleEnum;
const
  xlBetween = $00000001;
  xlNotBetween = $00000002;
  xlEqual = $00000003;
  xlNotEqual = $00000004;
  xlGreater = $00000005;
  xlLess = $00000006;
  xlGreaterEqual = $00000007;
  xlLessEqual = $00000008;

// XlEnableSelection constants
type
  XlEnableSelection = TOleEnum;
const
  xlNoRestrictions = $00000000;
  xlUnlockedCells = $00000001;
  xlNoSelection = $FFFFEFD2;

// XlDVType constants
type
  XlDVType = TOleEnum;
const
  xlValidateInputOnly = $00000000;
  xlValidateWholeNumber = $00000001;
  xlValidateDecimal = $00000002;
  xlValidateList = $00000003;
  xlValidateDate = $00000004;
  xlValidateTime = $00000005;
  xlValidateTextLength = $00000006;
  xlValidateCustom = $00000007;

// XlIMEMode constants
type
  XlIMEMode = TOleEnum;
const
  xlIMEModeNoControl = $00000000;
  xlIMEModeOn = $00000001;
  xlIMEModeOff = $00000002;
  xlIMEModeDisable = $00000003;
  xlIMEModeHiragana = $00000004;
  xlIMEModeKatakana = $00000005;
  xlIMEModeKatakanaHalf = $00000006;
  xlIMEModeAlphaFull = $00000007;
  xlIMEModeAlpha = $00000008;
  xlIMEModeHangulFull = $00000009;
  xlIMEModeHangul = $0000000A;

// XlDVAlertStyle constants
type
  XlDVAlertStyle = TOleEnum;
const
  xlValidAlertStop = $00000001;
  xlValidAlertWarning = $00000002;
  xlValidAlertInformation = $00000003;

// XlChartLocation constants
type
  XlChartLocation = TOleEnum;
const
  xlLocationAsNewSheet = $00000001;
  xlLocationAsObject = $00000002;
  xlLocationAutomatic = $00000003;

// XlPaperSize constants
type
  XlPaperSize = TOleEnum;
const
  xlPaper10x14 = $00000010;
  xlPaper11x17 = $00000011;
  xlPaperA3 = $00000008;
  xlPaperA4 = $00000009;
  xlPaperA4Small = $0000000A;
  xlPaperA5 = $0000000B;
  xlPaperB4 = $0000000C;
  xlPaperB5 = $0000000D;
  xlPaperCsheet = $00000018;
  xlPaperDsheet = $00000019;
  xlPaperEnvelope10 = $00000014;
  xlPaperEnvelope11 = $00000015;
  xlPaperEnvelope12 = $00000016;
  xlPaperEnvelope14 = $00000017;
  xlPaperEnvelope9 = $00000013;
  xlPaperEnvelopeB4 = $00000021;
  xlPaperEnvelopeB5 = $00000022;
  xlPaperEnvelopeB6 = $00000023;
  xlPaperEnvelopeC3 = $0000001D;
  xlPaperEnvelopeC4 = $0000001E;
  xlPaperEnvelopeC5 = $0000001C;
  xlPaperEnvelopeC6 = $0000001F;
  xlPaperEnvelopeC65 = $00000020;
  xlPaperEnvelopeDL = $0000001B;
  xlPaperEnvelopeItaly = $00000024;
  xlPaperEnvelopeMonarch = $00000025;
  xlPaperEnvelopePersonal = $00000026;
  xlPaperEsheet = $0000001A;
  xlPaperExecutive = $00000007;
  xlPaperFanfoldLegalGerman = $00000029;
  xlPaperFanfoldStdGerman = $00000028;
  xlPaperFanfoldUS = $00000027;
  xlPaperFolio = $0000000E;
  xlPaperLedger = $00000004;
  xlPaperLegal = $00000005;
  xlPaperLetter = $00000001;
  xlPaperLetterSmall = $00000002;
  xlPaperNote = $00000012;
  xlPaperQuarto = $0000000F;
  xlPaperStatement = $00000006;
  xlPaperTabloid = $00000003;
  xlPaperUser = $00000100;

// XlPasteSpecialOperation constants
type
  XlPasteSpecialOperation = TOleEnum;
const
  xlPasteSpecialOperationAdd = $00000002;
  xlPasteSpecialOperationDivide = $00000005;
  xlPasteSpecialOperationMultiply = $00000004;
  xlPasteSpecialOperationNone = $FFFFEFD2;
  xlPasteSpecialOperationSubtract = $00000003;

// XlPasteType constants
type
  XlPasteType = TOleEnum;
const
  xlPasteAll = $FFFFEFF8;
  xlPasteAllExceptBorders = $00000006;
  xlPasteFormats = $FFFFEFE6;
  xlPasteFormulas = $FFFFEFE5;
  xlPasteComments = $FFFFEFD0;
  xlPasteValues = $FFFFEFBD;

// XlPhoneticCharacterType constants
type
  XlPhoneticCharacterType = TOleEnum;
const
  xlKatakanaHalf = $00000000;
  xlKatakana = $00000001;
  xlHiragana = $00000002;
  xlNoConversion = $00000003;

// XlPhoneticAlignment constants
type
  XlPhoneticAlignment = TOleEnum;
const
  xlPhoneticAlignNoControl = $00000000;
  xlPhoneticAlignLeft = $00000001;
  xlPhoneticAlignCenter = $00000002;
  xlPhoneticAlignDistributed = $00000003;

// XlPictureAppearance constants
type
  XlPictureAppearance = TOleEnum;
const
  xlPrinter = $00000002;
  xlScreen = $00000001;

// XlPivotFieldOrientation constants
type
  XlPivotFieldOrientation = TOleEnum;
const
  xlColumnField = $00000002;
  xlDataField = $00000004;
  xlHidden = $00000000;
  xlPageField = $00000003;
  xlRowField = $00000001;

// XlPivotFieldCalculation constants
type
  XlPivotFieldCalculation = TOleEnum;
const
  xlDifferenceFrom = $00000002;
  xlIndex = $00000009;
  xlNoAdditionalCalculation = $FFFFEFD1;
  xlPercentDifferenceFrom = $00000004;
  xlPercentOf = $00000003;
  xlPercentOfColumn = $00000007;
  xlPercentOfRow = $00000006;
  xlPercentOfTotal = $00000008;
  xlRunningTotal = $00000005;

// XlPlacement constants
type
  XlPlacement = TOleEnum;
const
  xlFreeFloating = $00000003;
  xlMove = $00000002;
  xlMoveAndSize = $00000001;

// XlPlatform constants
type
  XlPlatform = TOleEnum;
const
  xlMacintosh = $00000001;
  xlMSDOS = $00000003;
  xlWindows = $00000002;

// XlPrintLocation constants
type
  XlPrintLocation = TOleEnum;
const
  xlPrintSheetEnd = $00000001;
  xlPrintInPlace = $00000010;
  xlPrintNoComments = $FFFFEFD2;

// XlPriority constants
type
  XlPriority = TOleEnum;
const
  xlPriorityHigh = $FFFFEFE1;
  xlPriorityLow = $FFFFEFDA;
  xlPriorityNormal = $FFFFEFD1;

// XlPTSelectionMode constants
type
  XlPTSelectionMode = TOleEnum;
const
  xlLabelOnly = $00000001;
  xlDataAndLabel = $00000000;
  xlDataOnly = $00000002;
  xlOrigin = $00000003;
  xlButton = $0000000F;
  xlBlanks = $00000004;

// XlRangeAutoFormat constants
type
  XlRangeAutoFormat = TOleEnum;
const
  xlRangeAutoFormat3DEffects1 = $0000000D;
  xlRangeAutoFormat3DEffects2 = $0000000E;
  xlRangeAutoFormatAccounting1 = $00000004;
  xlRangeAutoFormatAccounting2 = $00000005;
  xlRangeAutoFormatAccounting3 = $00000006;
  xlRangeAutoFormatAccounting4 = $00000011;
  xlRangeAutoFormatClassic1 = $00000001;
  xlRangeAutoFormatClassic2 = $00000002;
  xlRangeAutoFormatClassic3 = $00000003;
  xlRangeAutoFormatColor1 = $00000007;
  xlRangeAutoFormatColor2 = $00000008;
  xlRangeAutoFormatColor3 = $00000009;
  xlRangeAutoFormatList1 = $0000000A;
  xlRangeAutoFormatList2 = $0000000B;
  xlRangeAutoFormatList3 = $0000000C;
  xlRangeAutoFormatLocalFormat1 = $0000000F;
  xlRangeAutoFormatLocalFormat2 = $00000010;
  xlRangeAutoFormatLocalFormat3 = $00000013;
  xlRangeAutoFormatLocalFormat4 = $00000014;
  xlRangeAutoFormatNone = $FFFFEFD2;
  xlRangeAutoFormatSimple = $FFFFEFC6;

// XlReferenceType constants
type
  XlReferenceType = TOleEnum;
const
  xlAbsolute = $00000001;
  xlAbsRowRelColumn = $00000002;
  xlRelative = $00000004;
  xlRelRowAbsColumn = $00000003;

// XlRoutingSlipDelivery constants
type
  XlRoutingSlipDelivery = TOleEnum;
const
  xlAllAtOnce = $00000002;
  xlOneAfterAnother = $00000001;

// XlRoutingSlipStatus constants
type
  XlRoutingSlipStatus = TOleEnum;
const
  xlNotYetRouted = $00000000;
  xlRoutingComplete = $00000002;
  xlRoutingInProgress = $00000001;

// XlRunAutoMacro constants
type
  XlRunAutoMacro = TOleEnum;
const
  xlAutoActivate = $00000003;
  xlAutoClose = $00000002;
  xlAutoDeactivate = $00000004;
  xlAutoOpen = $00000001;

// XlSaveAction constants
type
  XlSaveAction = TOleEnum;
const
  xlDoNotSaveChanges = $00000002;
  xlSaveChanges = $00000001;

// XlSaveAsAccessMode constants
type
  XlSaveAsAccessMode = TOleEnum;
const
  xlExclusive = $00000003;
  xlNoChange = $00000001;
  xlShared = $00000002;

// XlSaveConflictResolution constants
type
  XlSaveConflictResolution = TOleEnum;
const
  xlLocalSessionChanges = $00000002;
  xlOtherSessionChanges = $00000003;
  xlUserResolution = $00000001;

// XlSearchDirection constants
type
  XlSearchDirection = TOleEnum;
const
  xlNext = $00000001;
  xlPrevious = $00000002;

// XlSearchOrder constants
type
  XlSearchOrder = TOleEnum;
const
  xlByColumns = $00000002;
  xlByRows = $00000001;

// XlSheetVisibility constants
type
  XlSheetVisibility = TOleEnum;
const
  xlSheetVisible = $FFFFFFFF;
  xlSheetHidden = $00000000;
  xlSheetVeryHidden = $00000002;

// XlSortMethod constants
type
  XlSortMethod = TOleEnum;
const
  xlPinYin = $00000001;
  xlStroke = $00000002;

// XlSortMethodOld constants
type
  XlSortMethodOld = TOleEnum;
const
  xlCodePage = $00000002;
  xlSyllabary = $00000001;

// XlSortOrder constants
type
  XlSortOrder = TOleEnum;
const
  xlAscending = $00000001;
  xlDescending = $00000002;

// XlSortOrientation constants
type
  XlSortOrientation = TOleEnum;
const
  xlSortRows = $00000002;
  xlSortColumns = $00000001;

// XlSortType constants
type
  XlSortType = TOleEnum;
const
  xlSortLabels = $00000002;
  xlSortValues = $00000001;

// XlSpecialCellsValue constants
type
  XlSpecialCellsValue = TOleEnum;
const
  xlErrors = $00000010;
  xlLogical = $00000004;
  xlNumbers = $00000001;
  xlTextValues = $00000002;

// XlSubscribeToFormat constants
type
  XlSubscribeToFormat = TOleEnum;
const
  xlSubscribeToPicture = $FFFFEFCD;
  xlSubscribeToText = $FFFFEFC2;

// XlSummaryRow constants
type
  XlSummaryRow = TOleEnum;
const
  xlSummaryAbove = $00000000;
  xlSummaryBelow = $00000001;

// XlSummaryColumn constants
type
  XlSummaryColumn = TOleEnum;
const
  xlSummaryOnLeft = $FFFFEFDD;
  xlSummaryOnRight = $FFFFEFC8;

// XlSummaryReportType constants
type
  XlSummaryReportType = TOleEnum;
const
  xlSummaryPivotTable = $FFFFEFCC;
  xlStandardSummary = $00000001;

// XlTabPosition constants
type
  XlTabPosition = TOleEnum;
const
  xlTabPositionFirst = $00000000;
  xlTabPositionLast = $00000001;

// XlTextParsingType constants
type
  XlTextParsingType = TOleEnum;
const
  xlDelimited = $00000001;
  xlFixedWidth = $00000002;

// XlTextQualifier constants
type
  XlTextQualifier = TOleEnum;
const
  xlTextQualifierDoubleQuote = $00000001;
  xlTextQualifierNone = $FFFFEFD2;
  xlTextQualifierSingleQuote = $00000002;

// XlWBATemplate constants
type
  XlWBATemplate = TOleEnum;
const
  xlWBATChart = $FFFFEFF3;
  xlWBATExcel4IntlMacroSheet = $00000004;
  xlWBATExcel4MacroSheet = $00000003;
  xlWBATWorksheet = $FFFFEFB9;

// XlWindowView constants
type
  XlWindowView = TOleEnum;
const
  xlNormalView = $00000001;
  xlPageBreakPreview = $00000002;

// XlXLMMacroType constants
type
  XlXLMMacroType = TOleEnum;
const
  xlCommand = $00000002;
  xlFunction = $00000001;
  xlNotXLM = $00000003;

// XlYesNoGuess constants
type
  XlYesNoGuess = TOleEnum;
const
  xlGuess = $00000000;
  xlNo = $00000002;
  xlYes = $00000001;

// XlDisplayShapes constants
type
  XlDisplayShapes = TOleEnum;
const
  XlDisplayShapes_ = $FFFFEFF8;
  xlHide = $00000003;
  xlPlaceholders = $00000002;

// XlBordersIndex constants
type
  XlBordersIndex = TOleEnum;
const
  xlInsideHorizontal = $0000000C;
  xlInsideVertical = $0000000B;
  xlDiagonalDown = $00000005;
  xlDiagonalUp = $00000006;
  xlEdgeBottom = $00000009;
  xlEdgeLeft = $00000007;
  xlEdgeRight = $0000000A;
  xlEdgeTop = $00000008;

// XlToolbarProtection constants
type
  XlToolbarProtection = TOleEnum;
const
  xlNoButtonChanges = $00000001;
  xlNoChanges = $00000004;
  xlNoDockingChanges = $00000003;
  xlToolbarProtectionNone = $FFFFEFD1;
  xlNoShapeChanges = $00000002;

// XlBuiltInDialog constants
type
  XlBuiltInDialog = TOleEnum;
const
  xlDialogOpen = $00000001;
  xlDialogOpenLinks = $00000002;
  xlDialogSaveAs = $00000005;
  xlDialogFileDelete = $00000006;
  xlDialogPageSetup = $00000007;
  xlDialogPrint = $00000008;
  xlDialogPrinterSetup = $00000009;
  xlDialogArrangeAll = $0000000C;
  xlDialogWindowSize = $0000000D;
  xlDialogWindowMove = $0000000E;
  xlDialogRun = $00000011;
  xlDialogSetPrintTitles = $00000017;
  xlDialogFont = $0000001A;
  xlDialogDisplay = $0000001B;
  xlDialogProtectDocument = $0000001C;
  xlDialogCalculation = $00000020;
  xlDialogExtract = $00000023;
  xlDialogDataDelete = $00000024;
  xlDialogSort = $00000027;
  xlDialogDataSeries = $00000028;
  xlDialogTable = $00000029;
  xlDialogFormatNumber = $0000002A;
  xlDialogAlignment = $0000002B;
  xlDialogStyle = $0000002C;
  xlDialogBorder = $0000002D;
  xlDialogCellProtection = $0000002E;
  xlDialogColumnWidth = $0000002F;
  xlDialogClear = $00000034;
  xlDialogPasteSpecial = $00000035;
  xlDialogEditDelete = $00000036;
  xlDialogInsert = $00000037;
  xlDialogPasteNames = $0000003A;
  xlDialogDefineName = $0000003D;
  xlDialogCreateNames = $0000003E;
  xlDialogFormulaGoto = $0000003F;
  xlDialogFormulaFind = $00000040;
  xlDialogGalleryArea = $00000043;
  xlDialogGalleryBar = $00000044;
  xlDialogGalleryColumn = $00000045;
  xlDialogGalleryLine = $00000046;
  xlDialogGalleryPie = $00000047;
  xlDialogGalleryScatter = $00000048;
  xlDialogCombination = $00000049;
  xlDialogGridlines = $0000004C;
  xlDialogAxes = $0000004E;
  xlDialogAttachText = $00000050;
  xlDialogPatterns = $00000054;
  xlDialogMainChart = $00000055;
  xlDialogOverlay = $00000056;
  xlDialogScale = $00000057;
  xlDialogFormatLegend = $00000058;
  xlDialogFormatText = $00000059;
  xlDialogParse = $0000005B;
  xlDialogUnhide = $0000005E;
  xlDialogWorkspace = $0000005F;
  xlDialogActivate = $00000067;
  xlDialogCopyPicture = $0000006C;
  xlDialogDeleteName = $0000006E;
  xlDialogDeleteFormat = $0000006F;
  xlDialogNew = $00000077;
  xlDialogRowHeight = $0000007F;
  xlDialogFormatMove = $00000080;
  xlDialogFormatSize = $00000081;
  xlDialogFormulaReplace = $00000082;
  xlDialogSelectSpecial = $00000084;
  xlDialogApplyNames = $00000085;
  xlDialogReplaceFont = $00000086;
  xlDialogSplit = $00000089;
  xlDialogOutline = $0000008E;
  xlDialogSaveWorkbook = $00000091;
  xlDialogCopyChart = $00000093;
  xlDialogFormatFont = $00000096;
  xlDialogNote = $0000009A;
  xlDialogSetUpdateStatus = $0000009F;
  xlDialogColorPalette = $000000A1;
  xlDialogChangeLink = $000000A6;
  xlDialogAppMove = $000000AA;
  xlDialogAppSize = $000000AB;
  xlDialogMainChartType = $000000B9;
  xlDialogOverlayChartType = $000000BA;
  xlDialogOpenMail = $000000BC;
  xlDialogSendMail = $000000BD;
  xlDialogStandardFont = $000000BE;
  xlDialogConsolidate = $000000BF;
  xlDialogSortSpecial = $000000C0;
  xlDialogGallery3dArea = $000000C1;
  xlDialogGallery3dColumn = $000000C2;
  xlDialogGallery3dLine = $000000C3;
  xlDialogGallery3dPie = $000000C4;
  xlDialogView3d = $000000C5;
  xlDialogGoalSeek = $000000C6;
  xlDialogWorkgroup = $000000C7;
  xlDialogFillGroup = $000000C8;
  xlDialogUpdateLink = $000000C9;
  xlDialogPromote = $000000CA;
  xlDialogDemote = $000000CB;
  xlDialogShowDetail = $000000CC;
  xlDialogObjectProperties = $000000CF;
  xlDialogSaveNewObject = $000000D0;
  xlDialogApplyStyle = $000000D4;
  xlDialogAssignToObject = $000000D5;
  xlDialogObjectProtection = $000000D6;
  xlDialogCreatePublisher = $000000D9;
  xlDialogSubscribeTo = $000000DA;
  xlDialogShowToolbar = $000000DC;
  xlDialogPrintPreview = $000000DE;
  xlDialogEditColor = $000000DF;
  xlDialogFormatMain = $000000E1;
  xlDialogFormatOverlay = $000000E2;
  xlDialogEditSeries = $000000E4;
  xlDialogDefineStyle = $000000E5;
  xlDialogGalleryRadar = $000000F9;
  xlDialogEditionOptions = $000000FB;
  xlDialogZoom = $00000100;
  xlDialogInsertObject = $00000103;
  xlDialogSize = $00000105;
  xlDialogMove = $00000106;
  xlDialogFormatAuto = $0000010D;
  xlDialogGallery3dBar = $00000110;
  xlDialogGallery3dSurface = $00000111;
  xlDialogCustomizeToolbar = $00000114;
  xlDialogWorkbookAdd = $00000119;
  xlDialogWorkbookMove = $0000011A;
  xlDialogWorkbookCopy = $0000011B;
  xlDialogWorkbookOptions = $0000011C;
  xlDialogSaveWorkspace = $0000011D;
  xlDialogChartWizard = $00000120;
  xlDialogAssignToTool = $00000125;
  xlDialogPlacement = $0000012C;
  xlDialogFillWorkgroup = $0000012D;
  xlDialogWorkbookNew = $0000012E;
  xlDialogScenarioCells = $00000131;
  xlDialogScenarioAdd = $00000133;
  xlDialogScenarioEdit = $00000134;
  xlDialogScenarioSummary = $00000137;
  xlDialogPivotTableWizard = $00000138;
  xlDialogPivotFieldProperties = $00000139;
  xlDialogOptionsCalculation = $0000013E;
  xlDialogOptionsEdit = $0000013F;
  xlDialogOptionsView = $00000140;
  xlDialogAddinManager = $00000141;
  xlDialogMenuEditor = $00000142;
  xlDialogAttachToolbars = $00000143;
  xlDialogOptionsChart = $00000145;
  xlDialogVbaInsertFile = $00000148;
  xlDialogVbaProcedureDefinition = $0000014A;
  xlDialogRoutingSlip = $00000150;
  xlDialogMailLogon = $00000153;
  xlDialogInsertPicture = $00000156;
  xlDialogGalleryDoughnut = $00000158;
  xlDialogChartTrend = $0000015E;
  xlDialogWorkbookInsert = $00000162;
  xlDialogOptionsTransition = $00000163;
  xlDialogOptionsGeneral = $00000164;
  xlDialogFilterAdvanced = $00000172;
  xlDialogMailNextLetter = $0000017A;
  xlDialogDataLabel = $0000017B;
  xlDialogInsertTitle = $0000017C;
  xlDialogFontProperties = $0000017D;
  xlDialogMacroOptions = $0000017E;
  xlDialogWorkbookUnhide = $00000180;
  xlDialogWorkbookName = $00000182;
  xlDialogGalleryCustom = $00000184;
  xlDialogAddChartAutoformat = $00000186;
  xlDialogChartAddData = $00000188;
  xlDialogTabOrder = $0000018A;
  xlDialogSubtotalCreate = $0000018E;
  xlDialogWorkbookTabSplit = $0000019F;
  xlDialogWorkbookProtect = $000001A1;
  xlDialogScrollbarProperties = $000001A4;
  xlDialogPivotShowPages = $000001A5;
  xlDialogTextToColumns = $000001A6;
  xlDialogFormatCharttype = $000001A7;
  xlDialogPivotFieldGroup = $000001B1;
  xlDialogPivotFieldUngroup = $000001B2;
  xlDialogCheckboxProperties = $000001B3;
  xlDialogLabelProperties = $000001B4;
  xlDialogListboxProperties = $000001B5;
  xlDialogEditboxProperties = $000001B6;
  xlDialogOpenText = $000001B9;
  xlDialogPushbuttonProperties = $000001BD;
  xlDialogFilter = $000001BF;
  xlDialogFunctionWizard = $000001C2;
  xlDialogSaveCopyAs = $000001C8;
  xlDialogOptionsListsAdd = $000001CA;
  xlDialogSeriesAxes = $000001CC;
  xlDialogSeriesX = $000001CD;
  xlDialogSeriesY = $000001CE;
  xlDialogErrorbarX = $000001CF;
  xlDialogErrorbarY = $000001D0;
  xlDialogFormatChart = $000001D1;
  xlDialogSeriesOrder = $000001D2;
  xlDialogMailEditMailer = $000001D6;
  xlDialogStandardWidth = $000001D8;
  xlDialogScenarioMerge = $000001D9;
  xlDialogProperties = $000001DA;
  xlDialogSummaryInfo = $000001DA;
  xlDialogFindFile = $000001DB;
  xlDialogActiveCellFont = $000001DC;
  xlDialogVbaMakeAddin = $000001DE;
  xlDialogFileSharing = $000001E1;
  xlDialogAutoCorrect = $000001E5;
  xlDialogCustomViews = $000001ED;
  xlDialogInsertNameLabel = $000001F0;
  xlDialogSeriesShape = $000001F8;
  xlDialogChartOptionsDataLabels = $000001F9;
  xlDialogChartOptionsDataTable = $000001FA;
  xlDialogSetBackgroundPicture = $000001FD;
  xlDialogDataValidation = $0000020D;
  xlDialogChartType = $0000020E;
  xlDialogChartLocation = $0000020F;
  xlDialogPhonetic = $0000021A;
  xlDialogChartSourceData = $0000021D;
  xlDialogSeriesOptions = $0000022D;
  xlDialogPivotTableOptions = $00000237;
  xlDialogPivotSolveOrder = $00000238;
  xlDialogPivotCalculatedField = $0000023A;
  xlDialogPivotCalculatedItem = $0000023C;
  xlDialogConditionalFormatting = $00000247;
  xlDialogInsertHyperlink = $00000254;
  xlDialogProtectSharing = $0000026C;

// XlParameterType constants
type
  XlParameterType = TOleEnum;
const
  xlPrompt = $00000000;
  xlConstant = $00000001;
  xlRange = $00000002;

// XlParameterDataType constants
type
  XlParameterDataType = TOleEnum;
const
  xlParamTypeUnknown = $00000000;
  xlParamTypeChar = $00000001;
  xlParamTypeNumeric = $00000002;
  xlParamTypeDecimal = $00000003;
  xlParamTypeInteger = $00000004;
  xlParamTypeSmallInt = $00000005;
  xlParamTypeFloat = $00000006;
  xlParamTypeReal = $00000007;
  xlParamTypeDouble = $00000008;
  xlParamTypeVarChar = $0000000C;
  xlParamTypeDate = $00000009;
  xlParamTypeTime = $0000000A;
  xlParamTypeTimestamp = $0000000B;
  xlParamTypeLongVarChar = $FFFFFFFF;
  xlParamTypeBinary = $FFFFFFFE;
  xlParamTypeVarBinary = $FFFFFFFD;
  xlParamTypeLongVarBinary = $FFFFFFFC;
  xlParamTypeBigInt = $FFFFFFFB;
  xlParamTypeTinyInt = $FFFFFFFA;
  xlParamTypeBit = $FFFFFFF9;

// XlFormControl constants
type
  XlFormControl = TOleEnum;
const
  xlButtonControl = $00000000;
  xlCheckBox = $00000001;
  xlDropDown = $00000002;
  xlEditBox = $00000003;
  xlGroupBox = $00000004;
  xlLabel = $00000005;
  xlListBox = $00000006;
  xlOptionButton = $00000007;
  xlScrollBar = $00000008;
  xlSpinner = $00000009;

{$IFNDEF XLR_BCB}
type

// *********************************************************************//
// Forward declaration of interfaces defined in Type Library            //
// *********************************************************************//
  Adjustments = interface;
  CalloutFormat = interface;
  ColorFormat = interface;
  LineFormat = interface;
  ShapeNode = interface;
  ShapeNodes = interface;
  PictureFormat = interface;
  ShadowFormat = interface;
  TextEffectFormat = interface;
  ThreeDFormat = interface;
  FillFormat = interface;
  IFont = interface;
  IWindow = interface;
  IWindows = interface;
  IAppEvents = interface;
  _Application = interface;
  IWorksheetFunction = interface;
  IRange = interface;
  IChartEvents = interface;
  _Chart = interface;
  Sheets = interface;
  IVPageBreak = interface;
  IHPageBreak = interface;
  IHPageBreaks = interface;
  IVPageBreaks = interface;
  IRecentFile = interface;
  IRecentFiles = interface;
  IDocEvents = interface;
  _Worksheet = interface;
  IStyle = interface;
  IStyles = interface;
  IBorders = interface;
  _Global = interface;
  IAddIn = interface;
  IAddIns = interface;
  IToolbar = interface;
  IToolbars = interface;
  IToolbarButton = interface;
  IToolbarButtons = interface;
  IAreas = interface;
  IWorkbookEvents = interface;
  _Workbook = interface;
  Workbooks = interface;
  IMenuBars = interface;
  IMenuBar = interface;
  IMenus = interface;
  IMenu = interface;
  IMenuItems = interface;
  IMenuItem = interface;
  ICharts = interface;
  IDrawingObjects = interface;
  IPivotCache = interface;
  IPivotCaches = interface;
  IPivotFormula = interface;
  IPivotFormulas = interface;
  IPivotTable = interface;
  IPivotTables = interface;
  IPivotField = interface;
  IPivotFields = interface;
  ICalculatedFields = interface;
  IPivotItem = interface;
  IPivotItems = interface;
  ICalculatedItems = interface;
  ICharacters = interface;
  IDialogs = interface;
  IDialog = interface;
  ISoundNote = interface;
  IButton = interface;
  IButtons = interface;
  ICheckBox = interface;
  ICheckBoxes = interface;
  IOptionButton = interface;
  IOptionButtons = interface;
  IEditBox = interface;
  IEditBoxes = interface;
  IScrollBar = interface;
  IScrollBars = interface;
  IListBox = interface;
  IListBoxes = interface;
  IGroupBox = interface;
  IGroupBoxes = interface;
  IDropDown = interface;
  IDropDowns = interface;
  ISpinner = interface;
  ISpinners = interface;
  IDialogFrame = interface;
  ILabel = interface;
  ILabels = interface;
  IPanes = interface;
  IPane = interface;
  IScenarios = interface;
  IScenario = interface;
  IGroupObject = interface;
  IGroupObjects = interface;
  ILine = interface;
  ILines = interface;
  IRectangle = interface;
  IRectangles = interface;
  IOval = interface;
  IOvals = interface;
  IArc = interface;
  IArcs = interface;
  IOLEObjectEvents = interface;
  _IOLEObject = interface;
  IOLEObjects = interface;
  ITextBox = interface;
  ITextBoxes = interface;
  IPicture = interface;
  IPictures = interface;
  IDrawing = interface;
  IDrawings = interface;
  IRoutingSlip = interface;
  IOutline = interface;
  IModule = interface;
  IModules = interface;
  IDialogSheet = interface;
  IDialogSheets = interface;
  IWorksheets = interface;
  IPageSetup = interface;
  INames = interface;
  IName = interface;
  IChartObject = interface;
  IChartObjects = interface;
  IMailer = interface;
  ICustomViews = interface;
  ICustomView = interface;
  IFormatConditions = interface;
  IFormatCondition = interface;
  IComments = interface;
  IComment = interface;
  IRefreshEvents = interface;
  _IQueryTable = interface;
  IQueryTables = interface;
  IParameter = interface;
  IParameters = interface;
  IODBCError = interface;
  IODBCErrors = interface;
  IValidation = interface;
  IHyperlinks = interface;
  IHyperlink = interface;
  IAutoFilter = interface;
  IFilters = interface;
  IFilter = interface;
  IAutoCorrect = interface;
  IBorder = interface;
  IInterior = interface;
  IChartFillFormat = interface;
  IChartColorFormat = interface;
  IAxis = interface;
  IChartTitle = interface;
  IAxisTitle = interface;
  IChartGroup = interface;
  IChartGroups = interface;
  IAxes = interface;
  IPoints = interface;
  IPoint = interface;
  ISeries = interface;
  ISeriesCollection = interface;
  IDataLabel = interface;
  IDataLabels = interface;
  ILegendEntry = interface;
  ILegendEntries = interface;
  ILegendKey = interface;
  ITrendlines = interface;
  ITrendline = interface;
  ICorners = interface;
  ISeriesLines = interface;
  IHiLoLines = interface;
  IGridlines = interface;
  IDropLines = interface;
  ILeaderLines = interface;
  IUpBars = interface;
  IDownBars = interface;
  IFloor = interface;
  IWalls = interface;
  ITickLabels = interface;
  IPlotArea = interface;
  IChartArea = interface;
  ILegend = interface;
  IErrorBars = interface;
  IDataTable = interface;
  IPhonetic = interface;
  IShape = interface;
  IShapes = interface;
  IShapeRange = interface;
  IGroupShapes = interface;
  ITextFrame = interface;
  IConnectorFormat = interface;
  IFreeformBuilder = interface;
  IControlFormat = interface;
  IOLEFormat = interface;
  ILinkFormat = interface;
  IDummy = interface;

  AdjustmentsDisp = dispinterface;
  CalloutFormatDisp = dispinterface;
  ColorFormatDisp = dispinterface;
  LineFormatDisp = dispinterface;
  ShapeNodeDisp = dispinterface;
  ShapeNodesDisp = dispinterface;
  PictureFormatDisp = dispinterface;
  ShadowFormatDisp = dispinterface;
  TextEffectFormatDisp = dispinterface;
  ThreeDFormatDisp = dispinterface;
  FillFormatDisp = dispinterface;
  _ApplicationDisp = dispinterface;
  _ChartDisp = dispinterface;
  SheetsDisp = dispinterface;
  _WorksheetDisp = dispinterface;
  _GlobalDisp = dispinterface;
  _WorkbookDisp = dispinterface;
  WorkbooksDisp = dispinterface;
  Font = dispinterface;
  Window_ = dispinterface;
  DIWindows = dispinterface;
  AppEvents = dispinterface;
  WorksheetFunction = dispinterface;
  Range = dispinterface;
  ChartEvents = dispinterface;
  VPageBreak = dispinterface;
  HPageBreak = dispinterface;
  HPageBreaks = dispinterface;
  VPageBreaks = dispinterface;
  RecentFile = dispinterface;
  RecentFiles = dispinterface;
  DocEvents = dispinterface;
  Style = dispinterface;
  Styles = dispinterface;
  Borders = dispinterface;
  AddIn = dispinterface;
  AddIns = dispinterface;
  Toolbar = dispinterface;
  Toolbars = dispinterface;
  ToolbarButton = dispinterface;
  ToolbarButtons = dispinterface;
  Areas = dispinterface;
  WorkbookEvents = dispinterface;
  MenuBars = dispinterface;
  MenuBar = dispinterface;
  MenusDisp = dispinterface;
  Menu = dispinterface;
  MenuItems = dispinterface;
  MenuItem = dispinterface;
  Charts = dispinterface;
  DrawingObjects = dispinterface;
  PivotCache = dispinterface;
  PivotCaches = dispinterface;
  PivotFormula = dispinterface;
  PivotFormulas = dispinterface;
  PivotTable = dispinterface;
  PivotTables = dispinterface;
  PivotField = dispinterface;
  PivotFields = dispinterface;
  CalculatedFields = dispinterface;
  PivotItem = dispinterface;
  PivotItems = dispinterface;
  CalculatedItems = dispinterface;
  Characters = dispinterface;
  Dialogs = dispinterface;
  Dialog = dispinterface;
  SoundNote = dispinterface;
  Button = dispinterface;
  ButtonsDisp = dispinterface;
  CheckBox = dispinterface;
  CheckBoxes = dispinterface;
  OptionButton = dispinterface;
  OptionButtons = dispinterface;
  EditBox = dispinterface;
  EditBoxes = dispinterface;
  ScrollBar = dispinterface;
  ScrollBars = dispinterface;
  ListBox = dispinterface;
  ListBoxes = dispinterface;
  GroupBox = dispinterface;
  GroupBoxes = dispinterface;
  DropDown = dispinterface;
  DropDowns = dispinterface;
  Spinner = dispinterface;
  Spinners = dispinterface;
  DialogFrame = dispinterface;
  Label_ = dispinterface;
  Labels = dispinterface;
  Panes = dispinterface;
  Pane = dispinterface;
  Scenarios = dispinterface;
  Scenario = dispinterface;
  GroupObject = dispinterface;
  GroupObjects = dispinterface;
  Line = dispinterface;
  Lines = dispinterface;
  Rectangle = dispinterface;
  Rectangles = dispinterface;
  Oval = dispinterface;
  Ovals = dispinterface;
  Arc = dispinterface;
  Arcs = dispinterface;
  OLEObjectEvents = dispinterface;
  _OLEObject = dispinterface;
  OLEObjects = dispinterface;
  TextBox = dispinterface;
  TextBoxes = dispinterface;
  Picture = dispinterface;
  Pictures = dispinterface;
  Drawing = dispinterface;
  Drawings = dispinterface;
  RoutingSlip = dispinterface;
  Outline = dispinterface;
  Module = dispinterface;
  Modules = dispinterface;
  DialogSheet = dispinterface;
  DialogSheets = dispinterface;
  Worksheets = dispinterface;
  PageSetup = dispinterface;
  Names = dispinterface;
  Name = dispinterface;
  ChartObject = dispinterface;
  ChartObjects = dispinterface;
  Mailer = dispinterface;
  CustomViews = dispinterface;
  CustomView = dispinterface;
  FormatConditions = dispinterface;
  FormatCondition = dispinterface;
  Comments = dispinterface;
  Comment = dispinterface;
  RefreshEvents = dispinterface;
  _QueryTable = dispinterface;
  QueryTables = dispinterface;
  Parameter = dispinterface;
  Parameters = dispinterface;
  ODBCError = dispinterface;
  ODBCErrors = dispinterface;
  Validation = dispinterface;
  Hyperlinks = dispinterface;
  Hyperlink = dispinterface;
  AutoFilter = dispinterface;
  Filters = dispinterface;
  Filter = dispinterface;
  AutoCorrect = dispinterface;
  Border = dispinterface;
  Interior = dispinterface;
  ChartFillFormat = dispinterface;
  ChartColorFormat = dispinterface;
  Axis = dispinterface;
  ChartTitle = dispinterface;
  AxisTitle = dispinterface;
  ChartGroup = dispinterface;
  ChartGroups = dispinterface;
  Axes = dispinterface;
  Points = dispinterface;
  Point = dispinterface;
  Series = dispinterface;
  SeriesCollection = dispinterface;
  DataLabel = dispinterface;
  DataLabels = dispinterface;
  LegendEntry = dispinterface;
  LegendEntries = dispinterface;
  LegendKey = dispinterface;
  Trendlines = dispinterface;
  Trendline = dispinterface;
  Corners = dispinterface;
  SeriesLines = dispinterface;
  HiLoLines = dispinterface;
  Gridlines = dispinterface;
  DropLines = dispinterface;
  LeaderLines = dispinterface;
  UpBars = dispinterface;
  DownBars = dispinterface;
  Floor = dispinterface;
  Walls = dispinterface;
  TickLabels = dispinterface;
  PlotArea = dispinterface;
  ChartArea = dispinterface;
  Legend = dispinterface;
  ErrorBars = dispinterface;
  DataTable = dispinterface;
  Phonetic = dispinterface;
  Shape = dispinterface;
  Shapes = dispinterface;
  ShapeRange = dispinterface;
  GroupShapes = dispinterface;
  TextFrame = dispinterface;
  ConnectorFormat = dispinterface;
  FreeformBuilder = dispinterface;
  ControlFormat = dispinterface;
  OLEFormat = dispinterface;
  LinkFormat = dispinterface;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                     //
// (NOTE: Here we map each CoClass to its Default Interface)            //
// *********************************************************************//
  QueryTable = _QueryTable;
  Application_ = _Application;
  Chart = _Chart;
  Worksheet = _Worksheet;
  Global = _Global;
  Workbook = _Workbook;
  OLEObject = _OLEObject;


// *********************************************************************//
// Declaration of structures, unions and aliases.                       //
// *********************************************************************//
  PWordBool1 = ^WordBool; {*}
  PInteger1 = ^Integer; {*}
  PUserType1 = ^TGUID; {*}
  PShortint1 = ^Shortint; {*}
  PPShortint1 = ^PShortint1; {*}
  PUserType2 = ^DISPPARAMS; {*}


// *********************************************************************//
// Interface: Adjustments
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0310-0000-0000-C000-000000000046}
// *********************************************************************//
  Adjustments = interface(_IMsoDispObj)
    ['{000C0310-0000-0000-C000-000000000046}']
    function Get_Parent: IDispatch; safecall;
    function Get_Count: SYSINT; safecall;
    function Get_Item(Index: SYSINT): Single; safecall;
    procedure Set_Item(Index: SYSINT; Val: Single); safecall;
    property Parent: IDispatch read Get_Parent;
    property Count: SYSINT read Get_Count;
    property Item[Index: SYSINT]: Single read Get_Item write Set_Item;
  end;

// *********************************************************************//
// Interface: CalloutFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0311-0000-0000-C000-000000000046}
// *********************************************************************//
  CalloutFormat = interface(_IMsoDispObj)
    ['{000C0311-0000-0000-C000-000000000046}']
    function Get_Parent: IDispatch; safecall;
    procedure AutomaticLength; safecall;
    procedure CustomDrop(Drop: Single); safecall;
    procedure CustomLength(Length: Single); safecall;
    procedure PresetDrop(DropType: MsoCalloutDropType); safecall;
    function Get_Accent: MsoTriState; safecall;
    procedure Set_Accent(Accent: MsoTriState); safecall;
    function Get_Angle: MsoCalloutAngleType; safecall;
    procedure Set_Angle(Angle: MsoCalloutAngleType); safecall;
    function Get_AutoAttach: MsoTriState; safecall;
    procedure Set_AutoAttach(AutoAttach: MsoTriState); safecall;
    function Get_AutoLength: MsoTriState; safecall;
    function Get_Border: MsoTriState; safecall;
    procedure Set_Border(Border: MsoTriState); safecall;
    function Get_Drop: Single; safecall;
    function Get_DropType: MsoCalloutDropType; safecall;
    function Get_Gap: Single; safecall;
    procedure Set_Gap(Gap: Single); safecall;
    function Get_Length: Single; safecall;
    function Get_Type_: MsoCalloutType; safecall;
    procedure Set_Type_(Type_: MsoCalloutType); safecall;
    property Parent: IDispatch read Get_Parent;
    property Accent: MsoTriState read Get_Accent write Set_Accent;
    property Angle: MsoCalloutAngleType read Get_Angle write Set_Angle;
    property AutoAttach: MsoTriState read Get_AutoAttach write Set_AutoAttach;
    property AutoLength: MsoTriState read Get_AutoLength;
    property Border: MsoTriState read Get_Border write Set_Border;
    property Drop: Single read Get_Drop;
    property DropType: MsoCalloutDropType read Get_DropType;
    property Gap: Single read Get_Gap write Set_Gap;
    property Length: Single read Get_Length;
    property Type_: MsoCalloutType read Get_Type_ write Set_Type_;
  end;

// *********************************************************************//
// Interface: ColorFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0312-0000-0000-C000-000000000046}
// *********************************************************************//
  ColorFormat = interface(_IMsoDispObj)
    ['{000C0312-0000-0000-C000-000000000046}']
    function Get_Parent: IDispatch; safecall;
    function Get_RGB_: MsoRGBType; safecall;
    procedure Set_RGB_(RGB_: MsoRGBType); safecall;
    function Get_SchemeColor: SYSINT; safecall;
    procedure Set_SchemeColor(SchemeColor: SYSINT); safecall;
    function Get_Type_: MsoColorType; safecall;
    property Parent: IDispatch read Get_Parent;
    property RGB_: MsoRGBType read Get_RGB_ write Set_RGB_;
    property SchemeColor: SYSINT read Get_SchemeColor write Set_SchemeColor;
    property Type_: MsoColorType read Get_Type_;
  end;

// *********************************************************************//
// Interface: LineFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0317-0000-0000-C000-000000000046}
// *********************************************************************//
  LineFormat = interface(_IMsoDispObj)
    ['{000C0317-0000-0000-C000-000000000046}']
    function Get_Parent: IDispatch; safecall;
    function Get_BackColor: ColorFormat; safecall;
    procedure Set_BackColor(const BackColor: ColorFormat); safecall;
    function Get_BeginArrowheadLength: MsoArrowheadLength; safecall;
    procedure Set_BeginArrowheadLength(BeginArrowheadLength: MsoArrowheadLength); safecall;
    function Get_BeginArrowheadStyle: MsoArrowheadStyle; safecall;
    procedure Set_BeginArrowheadStyle(BeginArrowheadStyle: MsoArrowheadStyle); safecall;
    function Get_BeginArrowheadWidth: MsoArrowheadWidth; safecall;
    procedure Set_BeginArrowheadWidth(BeginArrowheadWidth: MsoArrowheadWidth); safecall;
    function Get_DashStyle: MsoLineDashStyle; safecall;
    procedure Set_DashStyle(DashStyle: MsoLineDashStyle); safecall;
    function Get_EndArrowheadLength: MsoArrowheadLength; safecall;
    procedure Set_EndArrowheadLength(EndArrowheadLength: MsoArrowheadLength); safecall;
    function Get_EndArrowheadStyle: MsoArrowheadStyle; safecall;
    procedure Set_EndArrowheadStyle(EndArrowheadStyle: MsoArrowheadStyle); safecall;
    function Get_EndArrowheadWidth: MsoArrowheadWidth; safecall;
    procedure Set_EndArrowheadWidth(EndArrowheadWidth: MsoArrowheadWidth); safecall;
    function Get_ForeColor: ColorFormat; safecall;
    procedure Set_ForeColor(const ForeColor: ColorFormat); safecall;
    function Get_Pattern: MsoPatternType; safecall;
    procedure Set_Pattern(Pattern: MsoPatternType); safecall;
    function Get_Style: MsoLineStyle; safecall;
    procedure Set_Style(Style: MsoLineStyle); safecall;
    function Get_Transparency: Single; safecall;
    procedure Set_Transparency(Transparency: Single); safecall;
    function Get_Visible: MsoTriState; safecall;
    procedure Set_Visible(Visible: MsoTriState); safecall;
    function Get_Weight: Single; safecall;
    procedure Set_Weight(Weight: Single); safecall;
    property Parent: IDispatch read Get_Parent;
    property BackColor: ColorFormat read Get_BackColor write Set_BackColor;
    property BeginArrowheadLength: MsoArrowheadLength read Get_BeginArrowheadLength write Set_BeginArrowheadLength;
    property BeginArrowheadStyle: MsoArrowheadStyle read Get_BeginArrowheadStyle write Set_BeginArrowheadStyle;
    property BeginArrowheadWidth: MsoArrowheadWidth read Get_BeginArrowheadWidth write Set_BeginArrowheadWidth;
    property DashStyle: MsoLineDashStyle read Get_DashStyle write Set_DashStyle;
    property EndArrowheadLength: MsoArrowheadLength read Get_EndArrowheadLength write Set_EndArrowheadLength;
    property EndArrowheadStyle: MsoArrowheadStyle read Get_EndArrowheadStyle write Set_EndArrowheadStyle;
    property EndArrowheadWidth: MsoArrowheadWidth read Get_EndArrowheadWidth write Set_EndArrowheadWidth;
    property ForeColor: ColorFormat read Get_ForeColor write Set_ForeColor;
    property Pattern: MsoPatternType read Get_Pattern write Set_Pattern;
    property Style: MsoLineStyle read Get_Style write Set_Style;
    property Transparency: Single read Get_Transparency write Set_Transparency;
    property Visible: MsoTriState read Get_Visible write Set_Visible;
    property Weight: Single read Get_Weight write Set_Weight;
  end;

// *********************************************************************//
// Interface: ShapeNode
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0318-0000-0000-C000-000000000046}
// *********************************************************************//
  ShapeNode = interface(_IMsoDispObj)
    ['{000C0318-0000-0000-C000-000000000046}']
    function Get_Parent: IDispatch; safecall;
    function Get_EditingType: MsoEditingType; safecall;
    function Get_Points: OleVariant; safecall;
    function Get_SegmentType: MsoSegmentType; safecall;
    property Parent: IDispatch read Get_Parent;
    property EditingType: MsoEditingType read Get_EditingType;
    property Points: OleVariant read Get_Points;
    property SegmentType: MsoSegmentType read Get_SegmentType;
  end;

// *********************************************************************//
// Interface: ShapeNodes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0319-0000-0000-C000-000000000046}
// *********************************************************************//
  ShapeNodes = interface(_IMsoDispObj)
    ['{000C0319-0000-0000-C000-000000000046}']
    function Get_Parent: IDispatch; safecall;
    function Get_Count: SYSINT; safecall;
    function Item(Index: OleVariant): ShapeNode; safecall;
    function Get__NewEnum: IUnknown; safecall;
    procedure Delete(Index: SYSINT); safecall;
    procedure Insert(Index: SYSINT; SegmentType: MsoSegmentType; EditingType: MsoEditingType; 
                     X1: Single; Y1: Single; X2: Single; Y2: Single; X3: Single; Y3: Single); safecall;
    procedure SetEditingType(Index: SYSINT; EditingType: MsoEditingType); safecall;
    procedure SetPosition(Index: SYSINT; X1: Single; Y1: Single); safecall;
    procedure SetSegmentType(Index: SYSINT; SegmentType: MsoSegmentType); safecall;
    property Parent: IDispatch read Get_Parent;
    property Count: SYSINT read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// Interface: PictureFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031A-0000-0000-C000-000000000046}
// *********************************************************************//
  PictureFormat = interface(_IMsoDispObj)
    ['{000C031A-0000-0000-C000-000000000046}']
    function Get_Parent: IDispatch; safecall;
    procedure IncrementBrightness(Increment: Single); safecall;
    procedure IncrementContrast(Increment: Single); safecall;
    function Get_Brightness: Single; safecall;
    procedure Set_Brightness(Brightness: Single); safecall;
    function Get_ColorType: MsoPictureColorType; safecall;
    procedure Set_ColorType(ColorType: MsoPictureColorType); safecall;
    function Get_Contrast: Single; safecall;
    procedure Set_Contrast(Contrast: Single); safecall;
    function Get_CropBottom: Single; safecall;
    procedure Set_CropBottom(CropBottom: Single); safecall;
    function Get_CropLeft: Single; safecall;
    procedure Set_CropLeft(CropLeft: Single); safecall;
    function Get_CropRight: Single; safecall;
    procedure Set_CropRight(CropRight: Single); safecall;
    function Get_CropTop: Single; safecall;
    procedure Set_CropTop(CropTop: Single); safecall;
    function Get_TransparencyColor: MsoRGBType; safecall;
    procedure Set_TransparencyColor(TransparencyColor: MsoRGBType); safecall;
    function Get_TransparentBackground: MsoTriState; safecall;
    procedure Set_TransparentBackground(TransparentBackground: MsoTriState); safecall;
    property Parent: IDispatch read Get_Parent;
    property Brightness: Single read Get_Brightness write Set_Brightness;
    property ColorType: MsoPictureColorType read Get_ColorType write Set_ColorType;
    property Contrast: Single read Get_Contrast write Set_Contrast;
    property CropBottom: Single read Get_CropBottom write Set_CropBottom;
    property CropLeft: Single read Get_CropLeft write Set_CropLeft;
    property CropRight: Single read Get_CropRight write Set_CropRight;
    property CropTop: Single read Get_CropTop write Set_CropTop;
    property TransparencyColor: MsoRGBType read Get_TransparencyColor write Set_TransparencyColor;
    property TransparentBackground: MsoTriState read Get_TransparentBackground write Set_TransparentBackground;
  end;

// *********************************************************************//
// Interface: ShadowFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031B-0000-0000-C000-000000000046}
// *********************************************************************//
  ShadowFormat = interface(_IMsoDispObj)
    ['{000C031B-0000-0000-C000-000000000046}']
    function Get_Parent: IDispatch; safecall;
    procedure IncrementOffsetX(Increment: Single); safecall;
    procedure IncrementOffsetY(Increment: Single); safecall;
    function Get_ForeColor: ColorFormat; safecall;
    procedure Set_ForeColor(const ForeColor: ColorFormat); safecall;
    function Get_Obscured: MsoTriState; safecall;
    procedure Set_Obscured(Obscured: MsoTriState); safecall;
    function Get_OffsetX: Single; safecall;
    procedure Set_OffsetX(OffsetX: Single); safecall;
    function Get_OffsetY: Single; safecall;
    procedure Set_OffsetY(OffsetY: Single); safecall;
    function Get_Transparency: Single; safecall;
    procedure Set_Transparency(Transparency: Single); safecall;
    function Get_Type_: MsoShadowType; safecall;
    procedure Set_Type_(Type_: MsoShadowType); safecall;
    function Get_Visible: MsoTriState; safecall;
    procedure Set_Visible(Visible: MsoTriState); safecall;
    property Parent: IDispatch read Get_Parent;
    property ForeColor: ColorFormat read Get_ForeColor write Set_ForeColor;
    property Obscured: MsoTriState read Get_Obscured write Set_Obscured;
    property OffsetX: Single read Get_OffsetX write Set_OffsetX;
    property OffsetY: Single read Get_OffsetY write Set_OffsetY;
    property Transparency: Single read Get_Transparency write Set_Transparency;
    property Type_: MsoShadowType read Get_Type_ write Set_Type_;
    property Visible: MsoTriState read Get_Visible write Set_Visible;
  end;

// *********************************************************************//
// Interface: TextEffectFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031F-0000-0000-C000-000000000046}
// *********************************************************************//
  TextEffectFormat = interface(_IMsoDispObj)
    ['{000C031F-0000-0000-C000-000000000046}']
    function Get_Parent: IDispatch; safecall;
    procedure ToggleVerticalText; safecall;
    function Get_Alignment: MsoTextEffectAlignment; safecall;
    procedure Set_Alignment(Alignment: MsoTextEffectAlignment); safecall;
    function Get_FontBold: MsoTriState; safecall;
    procedure Set_FontBold(FontBold: MsoTriState); safecall;
    function Get_FontItalic: MsoTriState; safecall;
    procedure Set_FontItalic(FontItalic: MsoTriState); safecall;
    function Get_FontName: WideString; safecall;
    procedure Set_FontName(const FontName: WideString); safecall;
    function Get_FontSize: Single; safecall;
    procedure Set_FontSize(FontSize: Single); safecall;
    function Get_KernedPairs: MsoTriState; safecall;
    procedure Set_KernedPairs(KernedPairs: MsoTriState); safecall;
    function Get_NormalizedHeight: MsoTriState; safecall;
    procedure Set_NormalizedHeight(NormalizedHeight: MsoTriState); safecall;
    function Get_PresetShape: MsoPresetTextEffectShape; safecall;
    procedure Set_PresetShape(PresetShape: MsoPresetTextEffectShape); safecall;
    function Get_PresetTextEffect: MsoPresetTextEffect; safecall;
    procedure Set_PresetTextEffect(Preset: MsoPresetTextEffect); safecall;
    function Get_RotatedChars: MsoTriState; safecall;
    procedure Set_RotatedChars(RotatedChars: MsoTriState); safecall;
    function Get_Text: WideString; safecall;
    procedure Set_Text(const Text: WideString); safecall;
    function Get_Tracking: Single; safecall;
    procedure Set_Tracking(Tracking: Single); safecall;
    property Parent: IDispatch read Get_Parent;
    property Alignment: MsoTextEffectAlignment read Get_Alignment write Set_Alignment;
    property FontBold: MsoTriState read Get_FontBold write Set_FontBold;
    property FontItalic: MsoTriState read Get_FontItalic write Set_FontItalic;
    property FontName: WideString read Get_FontName write Set_FontName;
    property FontSize: Single read Get_FontSize write Set_FontSize;
    property KernedPairs: MsoTriState read Get_KernedPairs write Set_KernedPairs;
    property NormalizedHeight: MsoTriState read Get_NormalizedHeight write Set_NormalizedHeight;
    property PresetShape: MsoPresetTextEffectShape read Get_PresetShape write Set_PresetShape;
    property PresetTextEffect: MsoPresetTextEffect read Get_PresetTextEffect write Set_PresetTextEffect;
    property RotatedChars: MsoTriState read Get_RotatedChars write Set_RotatedChars;
    property Text: WideString read Get_Text write Set_Text;
    property Tracking: Single read Get_Tracking write Set_Tracking;
  end;

// *********************************************************************//
// Interface: ThreeDFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0321-0000-0000-C000-000000000046}
// *********************************************************************//
  ThreeDFormat = interface(_IMsoDispObj)
    ['{000C0321-0000-0000-C000-000000000046}']
    function Get_Parent: IDispatch; safecall;
    procedure IncrementRotationX(Increment: Single); safecall;
    procedure IncrementRotationY(Increment: Single); safecall;
    procedure ResetRotation; safecall;
    procedure SetThreeDFormat(PresetThreeDFormat: MsoPresetThreeDFormat); safecall;
    procedure SetExtrusionDirection(PresetExtrusionDirection: MsoPresetExtrusionDirection); safecall;
    function Get_Depth: Single; safecall;
    procedure Set_Depth(Depth: Single); safecall;
    function Get_ExtrusionColor: ColorFormat; safecall;
    function Get_ExtrusionColorType: MsoExtrusionColorType; safecall;
    procedure Set_ExtrusionColorType(ExtrusionColorType: MsoExtrusionColorType); safecall;
    function Get_Perspective: MsoTriState; safecall;
    procedure Set_Perspective(Perspective: MsoTriState); safecall;
    function Get_PresetExtrusionDirection: MsoPresetExtrusionDirection; safecall;
    function Get_PresetLightingDirection: MsoPresetLightingDirection; safecall;
    procedure Set_PresetLightingDirection(PresetLightingDirection: MsoPresetLightingDirection); safecall;
    function Get_PresetLightingSoftness: MsoPresetLightingSoftness; safecall;
    procedure Set_PresetLightingSoftness(PresetLightingSoftness: MsoPresetLightingSoftness); safecall;
    function Get_PresetMaterial: MsoPresetMaterial; safecall;
    procedure Set_PresetMaterial(PresetMaterial: MsoPresetMaterial); safecall;
    function Get_PresetThreeDFormat: MsoPresetThreeDFormat; safecall;
    function Get_RotationX: Single; safecall;
    procedure Set_RotationX(RotationX: Single); safecall;
    function Get_RotationY: Single; safecall;
    procedure Set_RotationY(RotationY: Single); safecall;
    function Get_Visible: MsoTriState; safecall;
    procedure Set_Visible(Visible: MsoTriState); safecall;
    property Parent: IDispatch read Get_Parent;
    property Depth: Single read Get_Depth write Set_Depth;
    property ExtrusionColor: ColorFormat read Get_ExtrusionColor;
    property ExtrusionColorType: MsoExtrusionColorType read Get_ExtrusionColorType write Set_ExtrusionColorType;
    property Perspective: MsoTriState read Get_Perspective write Set_Perspective;
    property PresetExtrusionDirection: MsoPresetExtrusionDirection read Get_PresetExtrusionDirection;
    property PresetLightingDirection: MsoPresetLightingDirection read Get_PresetLightingDirection write Set_PresetLightingDirection;
    property PresetLightingSoftness: MsoPresetLightingSoftness read Get_PresetLightingSoftness write Set_PresetLightingSoftness;
    property PresetMaterial: MsoPresetMaterial read Get_PresetMaterial write Set_PresetMaterial;
    property PresetThreeDFormat: MsoPresetThreeDFormat read Get_PresetThreeDFormat;
    property RotationX: Single read Get_RotationX write Set_RotationX;
    property RotationY: Single read Get_RotationY write Set_RotationY;
    property Visible: MsoTriState read Get_Visible write Set_Visible;
  end;

// *********************************************************************//
// Interface: FillFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0314-0000-0000-C000-000000000046}
// *********************************************************************//
  FillFormat = interface(_IMsoDispObj)
    ['{000C0314-0000-0000-C000-000000000046}']
    function Get_Parent: IDispatch; safecall;
    procedure Background; safecall;
    procedure OneColorGradient(Style: MsoGradientStyle; Variant: SYSINT; Degree: Single); safecall;
    procedure Patterned(Pattern: MsoPatternType); safecall;
    procedure PresetGradient(Style: MsoGradientStyle; Variant: SYSINT;
                             PresetGradientType: MsoPresetGradientType); safecall;
    procedure PresetTextured(PresetTexture: MsoPresetTexture); safecall;
    procedure Solid; safecall;
    procedure TwoColorGradient(Style: MsoGradientStyle; Variant: SYSINT); safecall;
    procedure UserPicture(const PictureFile: WideString); safecall;
    procedure UserTextured(const TextureFile: WideString); safecall;
    function Get_BackColor: ColorFormat; safecall;
    procedure Set_BackColor(const BackColor: ColorFormat); safecall;
    function Get_ForeColor: ColorFormat; safecall;
    procedure Set_ForeColor(const ForeColor: ColorFormat); safecall;
    function Get_GradientColorType: MsoGradientColorType; safecall;
    function Get_GradientDegree: Single; safecall;
    function Get_GradientStyle: MsoGradientStyle; safecall;
    function Get_GradientVariant: SYSINT; safecall;
    function Get_Pattern: MsoPatternType; safecall;
    function Get_PresetGradientType: MsoPresetGradientType; safecall;
    function Get_PresetTexture: MsoPresetTexture; safecall;
    function Get_TextureName: WideString; safecall;
    function Get_TextureType: MsoTextureType; safecall;
    function Get_Transparency: Single; safecall;
    procedure Set_Transparency(Transparency: Single); safecall;
    function Get_Type_: MsoFillType; safecall;
    function Get_Visible: MsoTriState; safecall;
    procedure Set_Visible(Visible: MsoTriState); safecall;
    property Parent: IDispatch read Get_Parent;
    property BackColor: ColorFormat read Get_BackColor write Set_BackColor;
    property ForeColor: ColorFormat read Get_ForeColor write Set_ForeColor;
    property GradientColorType: MsoGradientColorType read Get_GradientColorType;
    property GradientDegree: Single read Get_GradientDegree;
    property GradientStyle: MsoGradientStyle read Get_GradientStyle;
    property GradientVariant: SYSINT read Get_GradientVariant;
    property Pattern: MsoPatternType read Get_Pattern;
    property PresetGradientType: MsoPresetGradientType read Get_PresetGradientType;
    property PresetTexture: MsoPresetTexture read Get_PresetTexture;
    property TextureName: WideString read Get_TextureName;
    property TextureType: MsoTextureType read Get_TextureType;
    property Transparency: Single read Get_Transparency write Set_Transparency;
    property Type_: MsoFillType read Get_Type_;
    property Visible: MsoTriState read Get_Visible write Set_Visible;
  end;

// *********************************************************************//
// Interface: IFont
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002084D-0001-0000-C000-000000000046}
// *********************************************************************//
  IFont = interface(IDispatch)
    ['{0002084D-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Background: OleVariant; stdcall;
    function Set_Background(RHS: OleVariant): HResult; stdcall;
    function Get_Bold: OleVariant; stdcall;
    function Set_Bold(RHS: OleVariant): HResult; stdcall;
    function Get_Color: OleVariant; stdcall;
    function Set_Color(RHS: OleVariant): HResult; stdcall;
    function Get_ColorIndex: OleVariant; stdcall;
    function Set_ColorIndex(RHS: OleVariant): HResult; stdcall;
    function Get_FontStyle: OleVariant; stdcall;
    function Set_FontStyle(RHS: OleVariant): HResult; stdcall;
    function Get_Italic: OleVariant; stdcall;
    function Set_Italic(RHS: OleVariant): HResult; stdcall;
    function Get_Name: OleVariant; stdcall;
    function Set_Name(RHS: OleVariant): HResult; stdcall;
    function Get_OutlineFont: OleVariant; stdcall;
    function Set_OutlineFont(RHS: OleVariant): HResult; stdcall;
    function Get_Shadow: OleVariant; stdcall;
    function Set_Shadow(RHS: OleVariant): HResult; stdcall;
    function Get_Size: OleVariant; stdcall;
    function Set_Size(RHS: OleVariant): HResult; stdcall;
    function Get_Strikethrough: OleVariant; stdcall;
    function Set_Strikethrough(RHS: OleVariant): HResult; stdcall;
    function Get_Subscript: OleVariant; stdcall;
    function Set_Subscript(RHS: OleVariant): HResult; stdcall;
    function Get_Superscript: OleVariant; stdcall;
    function Set_Superscript(RHS: OleVariant): HResult; stdcall;
    function Get_Underline: OleVariant; stdcall;
    function Set_Underline(RHS: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IWindow
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020893-0001-0000-C000-000000000046}
// *********************************************************************//
  IWindow = interface(IDispatch)
    ['{00020893-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Activate: HResult; stdcall;
    function ActivateNext: HResult; stdcall;
    function ActivatePrevious: HResult; stdcall;
    function Get_ActiveCell: Range; stdcall;
    function Get_ActiveChart: Chart; stdcall;
    function Get_ActivePane: Pane; stdcall;
    function Get_ActiveSheet: IDispatch; stdcall;
    function Get_Caption: OleVariant; stdcall;
    function Set_Caption(RHS: OleVariant): HResult; stdcall;
    function Close(SaveChanges: OleVariant; Filename: OleVariant; RouteWorkbook: OleVariant): HResult; stdcall;
    function Get_DisplayFormulas: WordBool; stdcall;
    function Set_DisplayFormulas(RHS: WordBool): HResult; stdcall;
    function Get_DisplayGridlines: WordBool; stdcall;
    function Set_DisplayGridlines(RHS: WordBool): HResult; stdcall;
    function Get_DisplayHeadings: WordBool; stdcall;
    function Set_DisplayHeadings(RHS: WordBool): HResult; stdcall;
    function Get_DisplayHorizontalScrollBar: WordBool; stdcall;
    function Set_DisplayHorizontalScrollBar(RHS: WordBool): HResult; stdcall;
    function Get_DisplayOutline: WordBool; stdcall;
    function Set_DisplayOutline(RHS: WordBool): HResult; stdcall;
    function Get_DisplayRightToLeft: WordBool; stdcall;
    function Set_DisplayRightToLeft(RHS: WordBool): HResult; stdcall;
    function Get_DisplayVerticalScrollBar: WordBool; stdcall;
    function Set_DisplayVerticalScrollBar(RHS: WordBool): HResult; stdcall;
    function Get_DisplayWorkbookTabs: WordBool; stdcall;
    function Set_DisplayWorkbookTabs(RHS: WordBool): HResult; stdcall;
    function Get_DisplayZeros: WordBool; stdcall;
    function Set_DisplayZeros(RHS: WordBool): HResult; stdcall;
    function Get_EnableResize: WordBool; stdcall;
    function Set_EnableResize(RHS: WordBool): HResult; stdcall;
    function Get_FreezePanes: WordBool; stdcall;
    function Set_FreezePanes(RHS: WordBool): HResult; stdcall;
    function Get_GridlineColor: Integer; stdcall;
    function Set_GridlineColor(RHS: Integer): HResult; stdcall;
    function Get_GridlineColorIndex: XlColorIndex; stdcall;
    function Set_GridlineColorIndex(RHS: XlColorIndex): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function LargeScroll(Down: OleVariant; Up: OleVariant; ToRight: OleVariant; ToLeft: OleVariant): HResult; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function NewWindow: Window_; stdcall;
    function Get_OnWindow: WideString; stdcall;
    function Set_OnWindow(const RHS: WideString): HResult; stdcall;
    function Get_Panes: Panes; stdcall;
    function PrintOut(From: OleVariant; To_: OleVariant; Copies: OleVariant; Preview: OleVariant; 
                      ActivePrinter: OleVariant; PrintToFile: OleVariant; Collate: OleVariant): HResult; stdcall;
    function PrintPreview(EnableChanges: OleVariant): HResult; stdcall;
    function Get_RangeSelection: Range; stdcall;
    function Get_ScrollColumn: Integer; stdcall;
    function Set_ScrollColumn(RHS: Integer): HResult; stdcall;
    function Get_ScrollRow: Integer; stdcall;
    function Set_ScrollRow(RHS: Integer): HResult; stdcall;
    function ScrollWorkbookTabs(Sheets: OleVariant; Position: OleVariant): HResult; stdcall;
    function Get_SelectedSheets: Sheets; stdcall;
    function Get_Selection: IDispatch; stdcall;
    function SmallScroll(Down: OleVariant; Up: OleVariant; ToRight: OleVariant; ToLeft: OleVariant): HResult; stdcall;
    function Get_Split: WordBool; stdcall;
    function Set_Split(RHS: WordBool): HResult; stdcall;
    function Get_SplitColumn: Integer; stdcall;
    function Set_SplitColumn(RHS: Integer): HResult; stdcall;
    function Get_SplitHorizontal: Double; stdcall;
    function Set_SplitHorizontal(RHS: Double): HResult; stdcall;
    function Get_SplitRow: Integer; stdcall;
    function Set_SplitRow(RHS: Integer): HResult; stdcall;
    function Get_SplitVertical: Double; stdcall;
    function Set_SplitVertical(RHS: Double): HResult; stdcall;
    function Get_TabRatio: Double; stdcall;
    function Set_TabRatio(RHS: Double): HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    function Get_Type_: XlWindowType; stdcall;
    function Get_UsableHeight: Double; stdcall;
    function Get_UsableWidth: Double; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_VisibleRange: Range; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_WindowNumber: Integer; stdcall;
    function Get_WindowState: XlWindowState; stdcall;
    function Set_WindowState(RHS: XlWindowState): HResult; stdcall;
    function Get_Zoom: OleVariant; stdcall;
    function Set_Zoom(RHS: OleVariant): HResult; stdcall;
    function Get_View: XlWindowView; stdcall;
    function Set_View(RHS: XlWindowView): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IWindows
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020892-0001-0000-C000-000000000046}
// *********************************************************************//
  IWindows = interface(IDispatch)
    ['{00020892-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Arrange(ArrangeStyle: XlArrangeStyle; ActiveWorkbook: OleVariant; 
                     SyncHorizontal: OleVariant; SyncVertical: OleVariant): HResult; stdcall;
    function Get_Count: Integer; stdcall;
    function Get_Item(Index: OleVariant): Window_; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
    function Get__Default(Index: OleVariant): Window_; stdcall;
  end;

// *********************************************************************//
// Interface: IAppEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024413-0001-0000-C000-000000000046}
// *********************************************************************//
  IAppEvents = interface(IDispatch)
    ['{00024413-0001-0000-C000-000000000046}']
    function NewWorkbook(const Wb: Workbook): HResult; stdcall;
    function SheetSelectionChange(const Sh: IDispatch; const Target: Range): HResult; stdcall;
    function SheetBeforeDoubleClick(const Sh: IDispatch; const Target: Range; var Cancel: WordBool): HResult; stdcall;
    function SheetBeforeRightClick(const Sh: IDispatch; const Target: Range; var Cancel: WordBool): HResult; stdcall;
    function SheetActivate(const Sh: IDispatch): HResult; stdcall;
    function SheetDeactivate(const Sh: IDispatch): HResult; stdcall;
    function SheetCalculate(const Sh: IDispatch): HResult; stdcall;
    function SheetChange(const Sh: IDispatch; const Target: Range): HResult; stdcall;
    function WorkbookOpen(const Wb: Workbook): HResult; stdcall;
    function WorkbookActivate(const Wb: Workbook): HResult; stdcall;
    function WorkbookDeactivate(const Wb: Workbook): HResult; stdcall;
    function WorkbookBeforeClose(const Wb: Workbook; var Cancel: WordBool): HResult; stdcall;
    function WorkbookBeforeSave(const Wb: Workbook; SaveAsUI: WordBool; var Cancel: WordBool): HResult; stdcall;
    function WorkbookBeforePrint(const Wb: Workbook; var Cancel: WordBool): HResult; stdcall;
    function WorkbookNewSheet(const Wb: Workbook; const Sh: IDispatch): HResult; stdcall;
    function WorkbookAddinInstall(const Wb: Workbook): HResult; stdcall;
    function WorkbookAddinUninstall(const Wb: Workbook): HResult; stdcall;
    function WindowResize(const Wb: Workbook; const Wn: Window_): HResult; stdcall;
    function WindowActivate(const Wb: Workbook; const Wn: Window_): HResult; stdcall;
    function WindowDeactivate(const Wb: Workbook; const Wn: Window_): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: _Application
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000208D5-0000-0000-C000-000000000046}
// *********************************************************************//
  _Application = interface(IDispatch)
    ['{000208D5-0000-0000-C000-000000000046}']
    function Get_Application_: Application_; safecall;
    function Get_Creator: XlCreator; safecall;
    function Get_Parent: Application_; safecall;
    function Get_ActiveCell: Range; safecall;
    function Get_ActiveChart: Chart; safecall;
    function Get_ActiveDialog: DialogSheet; safecall;
    function Get_ActiveMenuBar: MenuBar; safecall;
    function Get_ActivePrinter(lcid: Integer): WideString; safecall;
    procedure Set_ActivePrinter(lcid: Integer; const RHS: WideString); safecall;
    function Get_ActiveSheet: IDispatch; safecall;
    function Get_ActiveWindow: Window_; safecall;
    function Get_ActiveWorkbook: Workbook; safecall;
    function Get_AddIns: AddIns; safecall;
    function Get_Assistant: Assistant; safecall;
    procedure Calculate(lcid: Integer); safecall;
    function Get_Cells: Range; safecall;
    function Get_Charts: Sheets; safecall;
    function Get_Columns: Range; safecall;
    function Get_CommandBars: CommandBars; safecall;
    function Get_DDEAppReturnCode(lcid: Integer): Integer; safecall;
    procedure DDEExecute(Channel: Integer; const String_: WideString; lcid: Integer); safecall;
    function DDEInitiate(const App: WideString; const Topic: WideString; lcid: Integer): Integer; safecall;
    procedure DDEPoke(Channel: Integer; Item: OleVariant; Data: OleVariant; lcid: Integer); safecall;
    function DDERequest(Channel: Integer; const Item: WideString; lcid: Integer): OleVariant; safecall;
    procedure DDETerminate(Channel: Integer; lcid: Integer); safecall;
    function Get_DialogSheets: Sheets; safecall;
    function Evaluate(Name: OleVariant; lcid: Integer): OleVariant; safecall;
    function _Evaluate(Name: OleVariant; lcid: Integer): OleVariant; safecall;
    function ExecuteExcel4Macro(const String_: WideString; lcid: Integer): OleVariant; safecall;
    function Intersect(const Arg1: Range; const Arg2: Range; Arg3: OleVariant; Arg4: OleVariant; 
                       Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                       Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                       Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                       Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                       Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                       Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                       Arg29: OleVariant; Arg30: OleVariant; lcid: Integer): Range; safecall;
    function Get_MenuBars: MenuBars; safecall;
    function Get_Modules: Modules; safecall;
    function Get_Names: Names; safecall;
    function Get_Range(Cell1: OleVariant; Cell2: OleVariant): Range; safecall;
    function Get_Rows: Range; safecall;
    function Run(Macro: OleVariant; Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; 
                 Arg4: OleVariant; Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; 
                 Arg8: OleVariant; Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant;
                 Arg12: OleVariant; Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; 
                 Arg16: OleVariant; Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; 
                 Arg20: OleVariant; Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; 
                 Arg24: OleVariant; Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; 
                 Arg28: OleVariant; Arg29: OleVariant; Arg30: OleVariant): OleVariant; safecall;
    function _Run2(Macro: OleVariant; Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; 
                   Arg4: OleVariant; Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; 
                   Arg8: OleVariant; Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; 
                   Arg12: OleVariant; Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; 
                   Arg16: OleVariant; Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; 
                   Arg20: OleVariant; Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; 
                   Arg24: OleVariant; Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; 
                   Arg28: OleVariant; Arg29: OleVariant; Arg30: OleVariant; lcid: Integer): OleVariant; safecall;
    function Get_Selection(lcid: Integer): IDispatch; safecall;
    procedure SendKeys(Keys: OleVariant; Wait: OleVariant; lcid: Integer); safecall;
    function Get_Sheets: Sheets; safecall;
    function Get_ShortcutMenus(Index: Integer): Menu; safecall;
    function Get_ThisWorkbook(lcid: Integer): Workbook; safecall;
    function Get_Toolbars: Toolbars; safecall;
    function Union(const Arg1: Range; const Arg2: Range; Arg3: OleVariant; Arg4: OleVariant; 
                   Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                   Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                   Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                   Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                   Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                   Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                   Arg29: OleVariant; Arg30: OleVariant; lcid: Integer): Range; safecall;
    function Get_Windows: DIWindows; safecall;
    function Get_Workbooks: Workbooks; safecall;
    function Get_WorksheetFunction: WorksheetFunction; safecall;
    function Get_Worksheets: Sheets; safecall;
    function Get_Excel4IntlMacroSheets: Sheets; safecall;
    function Get_Excel4MacroSheets: Sheets; safecall;
    procedure ActivateMicrosoftApp(Index: XlMSApplication; lcid: Integer); safecall;
    procedure AddChartAutoFormat(Chart: OleVariant; const Name: WideString; 
                                 Description: OleVariant; lcid: Integer); safecall;
    procedure AddCustomList(ListArray: OleVariant; ByRow: OleVariant; lcid: Integer); safecall;
    function Get_AlertBeforeOverwriting(lcid: Integer): WordBool; safecall;
    procedure Set_AlertBeforeOverwriting(lcid: Integer; RHS: WordBool); safecall;
    function Get_AltStartupPath(lcid: Integer): WideString; safecall;
    procedure Set_AltStartupPath(lcid: Integer; const RHS: WideString); safecall;
    function Get_AskToUpdateLinks(lcid: Integer): WordBool; safecall;
    procedure Set_AskToUpdateLinks(lcid: Integer; RHS: WordBool); safecall;
    function Get_EnableAnimations(lcid: Integer): WordBool; safecall;
    procedure Set_EnableAnimations(lcid: Integer; RHS: WordBool); safecall;
    function Get_AutoCorrect: AutoCorrect; safecall;
    function Get_Build(lcid: Integer): Integer; safecall;
    function Get_CalculateBeforeSave(lcid: Integer): WordBool; safecall;
    procedure Set_CalculateBeforeSave(lcid: Integer; RHS: WordBool); safecall;
    function Get_Calculation(lcid: Integer): XlCalculation; safecall;
    procedure Set_Calculation(lcid: Integer; RHS: XlCalculation); safecall;
    function Get_Caller(Index: OleVariant; lcid: Integer): OleVariant; safecall;
    function Get_CanPlaySounds(lcid: Integer): WordBool; safecall;
    function Get_CanRecordSounds(lcid: Integer): WordBool; safecall;
    function Get_Caption: WideString; safecall;
    procedure Set_Caption(const RHS: WideString); safecall;
    function Get_CellDragAndDrop(lcid: Integer): WordBool; safecall;
    procedure Set_CellDragAndDrop(lcid: Integer; RHS: WordBool); safecall;
    function CentimetersToPoints(Centimeters: Double; lcid: Integer): Double; safecall;
    function CheckSpelling(const Word: WideString; CustomDictionary: OleVariant; 
                           IgnoreUppercase: OleVariant; lcid: Integer): WordBool; safecall;
    function Get_ClipboardFormats(Index: OleVariant; lcid: Integer): OleVariant; safecall;
    function Get_DisplayClipboardWindow(lcid: Integer): WordBool; safecall;
    procedure Set_DisplayClipboardWindow(lcid: Integer; RHS: WordBool); safecall;
    function Get_ColorButtons: WordBool; safecall;
    procedure Set_ColorButtons(RHS: WordBool); safecall;
    function Get_CommandUnderlines(lcid: Integer): XlCommandUnderlines; safecall;
    procedure Set_CommandUnderlines(lcid: Integer; RHS: XlCommandUnderlines); safecall;
    function Get_ConstrainNumeric(lcid: Integer): WordBool; safecall;
    procedure Set_ConstrainNumeric(lcid: Integer; RHS: WordBool); safecall;
    function ConvertFormula(Formula: OleVariant; FromReferenceStyle: XlReferenceStyle; 
                            ToReferenceStyle: OleVariant; ToAbsolute: OleVariant; 
                            RelativeTo: OleVariant; lcid: Integer): OleVariant; safecall;
    function Get_CopyObjectsWithCells(lcid: Integer): WordBool; safecall;
    procedure Set_CopyObjectsWithCells(lcid: Integer; RHS: WordBool); safecall;
    function Get_Cursor(lcid: Integer): XlMousePointer; safecall;
    procedure Set_Cursor(lcid: Integer; RHS: XlMousePointer); safecall;
    function Get_CustomListCount(lcid: Integer): Integer; safecall;
    function Get_CutCopyMode(lcid: Integer): XlCutCopyMode; safecall;
    procedure Set_CutCopyMode(lcid: Integer; RHS: XlCutCopyMode); safecall;
    function Get_DataEntryMode(lcid: Integer): Integer; safecall;
    procedure Set_DataEntryMode(lcid: Integer; RHS: Integer); safecall;
    procedure Dummy1; safecall;
    procedure Dummy2; safecall;
    procedure Dummy3; safecall;
    procedure Dummy4; safecall;
    procedure Dummy5; safecall;
    procedure Dummy6; safecall;
    procedure Dummy7; safecall;
    procedure Dummy8; safecall;
    procedure Dummy9; safecall;
    procedure Dummy10; safecall;
    procedure Dummy11; safecall;
    function Get__Default: WideString; safecall;
    function Get_DefaultFilePath(lcid: Integer): WideString; safecall;
    procedure Set_DefaultFilePath(lcid: Integer; const RHS: WideString); safecall;
    procedure DeleteChartAutoFormat(const Name: WideString; lcid: Integer); safecall;
    procedure DeleteCustomList(ListNum: Integer; lcid: Integer); safecall;
    function Get_Dialogs: Dialogs; safecall;
    function Get_DisplayAlerts(lcid: Integer): WordBool; safecall;
    procedure Set_DisplayAlerts(lcid: Integer; RHS: WordBool); safecall;
    function Get_DisplayFormulaBar(lcid: Integer): WordBool; safecall;
    procedure Set_DisplayFormulaBar(lcid: Integer; RHS: WordBool); safecall;
    function Get_DisplayFullScreen(lcid: Integer): WordBool; safecall;
    procedure Set_DisplayFullScreen(lcid: Integer; RHS: WordBool); safecall;
    function Get_DisplayNoteIndicator: WordBool; safecall;
    procedure Set_DisplayNoteIndicator(RHS: WordBool); safecall;
    function Get_DisplayCommentIndicator: XlCommentDisplayMode; safecall;
    procedure Set_DisplayCommentIndicator(RHS: XlCommentDisplayMode); safecall;
    function Get_DisplayExcel4Menus(lcid: Integer): WordBool; safecall;
    procedure Set_DisplayExcel4Menus(lcid: Integer; RHS: WordBool); safecall;
    function Get_DisplayRecentFiles: WordBool; safecall;
    procedure Set_DisplayRecentFiles(RHS: WordBool); safecall;
    function Get_DisplayScrollBars(lcid: Integer): WordBool; safecall;
    procedure Set_DisplayScrollBars(lcid: Integer; RHS: WordBool); safecall;
    function Get_DisplayStatusBar(lcid: Integer): WordBool; safecall;
    procedure Set_DisplayStatusBar(lcid: Integer; RHS: WordBool); safecall;
    procedure DoubleClick(lcid: Integer); safecall;
    function Get_EditDirectlyInCell(lcid: Integer): WordBool; safecall;
    procedure Set_EditDirectlyInCell(lcid: Integer; RHS: WordBool); safecall;
    function Get_EnableAutoComplete: WordBool; safecall;
    procedure Set_EnableAutoComplete(RHS: WordBool); safecall;
    function Get_EnableCancelKey(lcid: Integer): XlEnableCancelKey; safecall;
    procedure Set_EnableCancelKey(lcid: Integer; RHS: XlEnableCancelKey); safecall;
    function Get_EnableSound: WordBool; safecall;
    procedure Set_EnableSound(RHS: WordBool); safecall;
    function Get_EnableTipWizard(lcid: Integer): WordBool; safecall;
    procedure Set_EnableTipWizard(lcid: Integer; RHS: WordBool); safecall;
    function Get_FileConverters(Index1: OleVariant; Index2: OleVariant; lcid: Integer): OleVariant; safecall;
    function Get_FileSearch: FileSearch; safecall;
    function Get_FileFind: IFind; safecall;
    procedure FindFile(lcid: Integer); safecall;
    function Get_FixedDecimal(lcid: Integer): WordBool; safecall;
    procedure Set_FixedDecimal(lcid: Integer; RHS: WordBool); safecall;
    function Get_FixedDecimalPlaces(lcid: Integer): Integer; safecall;
    procedure Set_FixedDecimalPlaces(lcid: Integer; RHS: Integer); safecall;
    function GetCustomListContents(ListNum: Integer; lcid: Integer): OleVariant; safecall;
    function GetCustomListNum(ListArray: OleVariant; lcid: Integer): Integer; safecall;
    function GetOpenFilename(FileFilter: OleVariant; FilterIndex: OleVariant; Title: OleVariant; 
                             ButtonText: OleVariant; MultiSelect: OleVariant; lcid: Integer): OleVariant; safecall;
    function GetSaveAsFilename(InitialFilename: OleVariant; FileFilter: OleVariant; 
                               FilterIndex: OleVariant; Title: OleVariant; ButtonText: OleVariant; 
                               lcid: Integer): OleVariant; safecall;
    procedure Goto_(Reference: OleVariant; Scroll: OleVariant; lcid: Integer); safecall;
    function Get_Height(lcid: Integer): Double; safecall;
    procedure Set_Height(lcid: Integer; RHS: Double); safecall;
    procedure Help(HelpFile: OleVariant; HelpContextID: OleVariant; lcid: Integer); safecall;
    function Get_IgnoreRemoteRequests(lcid: Integer): WordBool; safecall;
    procedure Set_IgnoreRemoteRequests(lcid: Integer; RHS: WordBool); safecall;
    function InchesToPoints(Inches: Double; lcid: Integer): Double; safecall;
    function InputBox(const Prompt: WideString; Title: OleVariant; Default: OleVariant; 
                      Left: OleVariant; Top: OleVariant; HelpFile: OleVariant; 
                      HelpContextID: OleVariant; Type_: OleVariant; lcid: Integer): OleVariant; safecall;
    function Get_Interactive(lcid: Integer): WordBool; safecall;
    procedure Set_Interactive(lcid: Integer; RHS: WordBool); safecall;
    function Get_International(Index: OleVariant; lcid: Integer): OleVariant; safecall;
    function Get_Iteration(lcid: Integer): WordBool; safecall;
    procedure Set_Iteration(lcid: Integer; RHS: WordBool); safecall;
    function Get_LargeButtons: WordBool; safecall;
    procedure Set_LargeButtons(RHS: WordBool); safecall;
    function Get_Left(lcid: Integer): Double; safecall;
    procedure Set_Left(lcid: Integer; RHS: Double); safecall;
    function Get_LibraryPath(lcid: Integer): WideString; safecall;
    procedure MacroOptions(Macro: OleVariant; Description: OleVariant; HasMenu: OleVariant; 
                           MenuText: OleVariant; HasShortcutKey: OleVariant; 
                           ShortcutKey: OleVariant; Category: OleVariant; StatusBar: OleVariant; 
                           HelpContextID: OleVariant; HelpFile: OleVariant; lcid: Integer); safecall;
    procedure MailLogoff(lcid: Integer); safecall;
    procedure MailLogon(Name: OleVariant; Password: OleVariant; DownloadNewMail: OleVariant; 
                        lcid: Integer); safecall;
    function Get_MailSession(lcid: Integer): OleVariant; safecall;
    function Get_MailSystem(lcid: Integer): XlMailSystem; safecall;
    function Get_MathCoprocessorAvailable(lcid: Integer): WordBool; safecall;
    function Get_MaxChange(lcid: Integer): Double; safecall;
    procedure Set_MaxChange(lcid: Integer; RHS: Double); safecall;
    function Get_MaxIterations(lcid: Integer): Integer; safecall;
    procedure Set_MaxIterations(lcid: Integer; RHS: Integer); safecall;
    function Get_MemoryFree(lcid: Integer): Integer; safecall;
    function Get_MemoryTotal(lcid: Integer): Integer; safecall;
    function Get_MemoryUsed(lcid: Integer): Integer; safecall;
    function Get_MouseAvailable(lcid: Integer): WordBool; safecall;
    function Get_MoveAfterReturn(lcid: Integer): WordBool; safecall;
    procedure Set_MoveAfterReturn(lcid: Integer; RHS: WordBool); safecall;
    function Get_MoveAfterReturnDirection(lcid: Integer): XlDirection; safecall;
    procedure Set_MoveAfterReturnDirection(lcid: Integer; RHS: XlDirection); safecall;
    function Get_RecentFiles: RecentFiles; safecall;
    function Get_Name: WideString; safecall;
    function NextLetter(lcid: Integer): Workbook; safecall;
    function Get_NetworkTemplatesPath(lcid: Integer): WideString; safecall;
    function Get_ODBCErrors: ODBCErrors; safecall;
    function Get_ODBCTimeout: Integer; safecall;
    procedure Set_ODBCTimeout(RHS: Integer); safecall;
    function Get_OnCalculate(lcid: Integer): WideString; safecall;
    procedure Set_OnCalculate(lcid: Integer; const RHS: WideString); safecall;
    function Get_OnData(lcid: Integer): WideString; safecall;
    procedure Set_OnData(lcid: Integer; const RHS: WideString); safecall;
    function Get_OnDoubleClick(lcid: Integer): WideString; safecall;
    procedure Set_OnDoubleClick(lcid: Integer; const RHS: WideString); safecall;
    function Get_OnEntry(lcid: Integer): WideString; safecall;
    procedure Set_OnEntry(lcid: Integer; const RHS: WideString); safecall;
    procedure OnKey(const Key: WideString; Procedure_: OleVariant; lcid: Integer); safecall;
    procedure OnRepeat(const Text: WideString; const Procedure_: WideString; lcid: Integer); safecall;
    function Get_OnSheetActivate(lcid: Integer): WideString; safecall;
    procedure Set_OnSheetActivate(lcid: Integer; const RHS: WideString); safecall;
    function Get_OnSheetDeactivate(lcid: Integer): WideString; safecall;
    procedure Set_OnSheetDeactivate(lcid: Integer; const RHS: WideString); safecall;
    procedure OnTime(EarliestTime: OleVariant; const Procedure_: WideString; 
                     LatestTime: OleVariant; Schedule: OleVariant; lcid: Integer); safecall;
    procedure OnUndo(const Text: WideString; const Procedure_: WideString; lcid: Integer); safecall;
    function Get_OnWindow(lcid: Integer): WideString; safecall;
    procedure Set_OnWindow(lcid: Integer; const RHS: WideString); safecall;
    function Get_OperatingSystem(lcid: Integer): WideString; safecall;
    function Get_OrganizationName(lcid: Integer): WideString; safecall;
    function Get_Path(lcid: Integer): WideString; safecall;
    function Get_PathSeparator(lcid: Integer): WideString; safecall;
    function Get_PreviousSelections(Index: OleVariant; lcid: Integer): OleVariant; safecall;
    function Get_PivotTableSelection: WordBool; safecall;
    procedure Set_PivotTableSelection(RHS: WordBool); safecall;
    function Get_PromptForSummaryInfo(lcid: Integer): WordBool; safecall;
    procedure Set_PromptForSummaryInfo(lcid: Integer; RHS: WordBool); safecall;
    procedure Quit; safecall;
    procedure RecordMacro(BasicCode: OleVariant; XlmCode: OleVariant; lcid: Integer); safecall;
    function Get_RecordRelative(lcid: Integer): WordBool; safecall;
    function Get_ReferenceStyle(lcid: Integer): XlReferenceStyle; safecall;
    procedure Set_ReferenceStyle(lcid: Integer; RHS: XlReferenceStyle); safecall;
    function Get_RegisteredFunctions(Index1: OleVariant; Index2: OleVariant; lcid: Integer): OleVariant; safecall;
    function RegisterXLL(const Filename: WideString; lcid: Integer): WordBool; safecall;
    procedure Repeat_(lcid: Integer); safecall;
    procedure ResetTipWizard(lcid: Integer); safecall;
    function Get_RollZoom: WordBool; safecall;
    procedure Set_RollZoom(RHS: WordBool); safecall;
    procedure Save(Filename: OleVariant; lcid: Integer); safecall;
    procedure SaveWorkspace(Filename: OleVariant; lcid: Integer); safecall;
    function Get_ScreenUpdating(lcid: Integer): WordBool; safecall;
    procedure Set_ScreenUpdating(lcid: Integer; RHS: WordBool); safecall;
    procedure SetDefaultChart(FormatName: OleVariant; Gallery: OleVariant); safecall;
    function Get_SheetsInNewWorkbook(lcid: Integer): Integer; safecall;
    procedure Set_SheetsInNewWorkbook(lcid: Integer; RHS: Integer); safecall;
    function Get_ShowChartTipNames: WordBool; safecall;
    procedure Set_ShowChartTipNames(RHS: WordBool); safecall;
    function Get_ShowChartTipValues: WordBool; safecall;
    procedure Set_ShowChartTipValues(RHS: WordBool); safecall;
    function Get_StandardFont(lcid: Integer): WideString; safecall;
    procedure Set_StandardFont(lcid: Integer; const RHS: WideString); safecall;
    function Get_StandardFontSize(lcid: Integer): Double; safecall;
    procedure Set_StandardFontSize(lcid: Integer; RHS: Double); safecall;
    function Get_StartupPath(lcid: Integer): WideString; safecall;
    function Get_StatusBar(lcid: Integer): OleVariant; safecall;
    procedure Set_StatusBar(lcid: Integer; RHS: OleVariant); safecall;
    function Get_TemplatesPath(lcid: Integer): WideString; safecall;
    function Get_ShowToolTips: WordBool; safecall;
    procedure Set_ShowToolTips(RHS: WordBool); safecall;
    function Get_Top(lcid: Integer): Double; safecall;
    procedure Set_Top(lcid: Integer; RHS: Double); safecall;
    function Get_DefaultSaveFormat: XlFileFormat; safecall;
    procedure Set_DefaultSaveFormat(RHS: XlFileFormat); safecall;
    function Get_TransitionMenuKey(lcid: Integer): WideString; safecall;
    procedure Set_TransitionMenuKey(lcid: Integer; const RHS: WideString); safecall;
    function Get_TransitionMenuKeyAction(lcid: Integer): Integer; safecall;
    procedure Set_TransitionMenuKeyAction(lcid: Integer; RHS: Integer); safecall;
    function Get_TransitionNavigKeys(lcid: Integer): WordBool; safecall;
    procedure Set_TransitionNavigKeys(lcid: Integer; RHS: WordBool); safecall;
    procedure Undo(lcid: Integer); safecall;
    function Get_UsableHeight(lcid: Integer): Double; safecall;
    function Get_UsableWidth(lcid: Integer): Double; safecall;
    function Get_UserControl: WordBool; safecall;
    procedure Set_UserControl(RHS: WordBool); safecall;
    function Get_UserName(lcid: Integer): WideString; safecall;
    procedure Set_UserName(lcid: Integer; const RHS: WideString); safecall;
    function Get_Value: WideString; safecall;
    function Get_VBE: VBE; safecall;
    function Get_Version(lcid: Integer): WideString; safecall;
    function Get_Visible(lcid: Integer): WordBool; safecall;
    procedure Set_Visible(lcid: Integer; RHS: WordBool); safecall;
    procedure Volatile(Volatile: OleVariant; lcid: Integer); safecall;
    procedure Wait(Time: OleVariant; lcid: Integer); safecall;
    function Get_Width(lcid: Integer): Double; safecall;
    procedure Set_Width(lcid: Integer; RHS: Double); safecall;
    function Get_WindowsForPens(lcid: Integer): WordBool; safecall;
    function Get_WindowState(lcid: Integer): XlWindowState; safecall;
    procedure Set_WindowState(lcid: Integer; RHS: XlWindowState); safecall;
    function Get_UILanguage(lcid: Integer): Integer; safecall;
    procedure Set_UILanguage(lcid: Integer; RHS: Integer); safecall;
    function Get_DefaultSheetDirection(lcid: Integer): Integer; safecall;
    procedure Set_DefaultSheetDirection(lcid: Integer; RHS: Integer); safecall;
    function Get_CursorMovement(lcid: Integer): Integer; safecall;
    procedure Set_CursorMovement(lcid: Integer; RHS: Integer); safecall;
    function Get_ControlCharacters(lcid: Integer): Integer; safecall;
    procedure Set_ControlCharacters(lcid: Integer; RHS: Integer); safecall;
    function _WSFunction(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                         Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                         Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                         Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; 
                         Arg16: OleVariant; Arg17: OleVariant; Arg18: OleVariant; 
                         Arg19: OleVariant; Arg20: OleVariant; Arg21: OleVariant; 
                         Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                         Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; 
                         Arg28: OleVariant; Arg29: OleVariant; Arg30: OleVariant; lcid: Integer): OleVariant; safecall;
    function Get_EnableEvents: WordBool; safecall;
    procedure Set_EnableEvents(RHS: WordBool); safecall;
    function Get_DisplayInfoWindow: WordBool; safecall;
    procedure Set_DisplayInfoWindow(RHS: WordBool); safecall;
    property Application_: Application_ read Get_Application_;
    property Creator: XlCreator read Get_Creator;
    property Parent: Application_ read Get_Parent;
    property ActiveCell: Range read Get_ActiveCell;
    property ActiveChart: Chart read Get_ActiveChart;
    property ActiveDialog: DialogSheet read Get_ActiveDialog;
    property ActiveMenuBar: MenuBar read Get_ActiveMenuBar;
    property ActivePrinter[lcid: Integer]: WideString read Get_ActivePrinter write Set_ActivePrinter;
    property ActiveSheet: IDispatch read Get_ActiveSheet;
    property ActiveWindow: Window_ read Get_ActiveWindow;
    property ActiveWorkbook: Workbook read Get_ActiveWorkbook;
    property AddIns: AddIns read Get_AddIns;
    property Assistant: Assistant read Get_Assistant;
    property Cells: Range read Get_Cells;
    property Charts: Sheets read Get_Charts;
    property Columns: Range read Get_Columns;
    property CommandBars: CommandBars read Get_CommandBars;
    property DDEAppReturnCode[lcid: Integer]: Integer read Get_DDEAppReturnCode;
    property DialogSheets: Sheets read Get_DialogSheets;
    property MenuBars: MenuBars read Get_MenuBars;
    property Modules: Modules read Get_Modules;
    property Names: Names read Get_Names;
    property Range[Cell1: OleVariant; Cell2: OleVariant]: Range read Get_Range;
    property Rows: Range read Get_Rows;
    property Selection[lcid: Integer]: IDispatch read Get_Selection;
    property Sheets: Sheets read Get_Sheets;
    property ShortcutMenus[Index: Integer]: Menu read Get_ShortcutMenus;
    property ThisWorkbook[lcid: Integer]: Workbook read Get_ThisWorkbook;
    property Toolbars: Toolbars read Get_Toolbars;
    property Windows: DIWindows read Get_Windows;
    property Workbooks: Workbooks read Get_Workbooks;
    property WorksheetFunction: WorksheetFunction read Get_WorksheetFunction;
    property Worksheets: Sheets read Get_Worksheets;
    property Excel4IntlMacroSheets: Sheets read Get_Excel4IntlMacroSheets;
    property Excel4MacroSheets: Sheets read Get_Excel4MacroSheets;
    property AlertBeforeOverwriting[lcid: Integer]: WordBool read Get_AlertBeforeOverwriting write Set_AlertBeforeOverwriting;
    property AltStartupPath[lcid: Integer]: WideString read Get_AltStartupPath write Set_AltStartupPath;
    property AskToUpdateLinks[lcid: Integer]: WordBool read Get_AskToUpdateLinks write Set_AskToUpdateLinks;
    property EnableAnimations[lcid: Integer]: WordBool read Get_EnableAnimations write Set_EnableAnimations;
    property AutoCorrect: AutoCorrect read Get_AutoCorrect;
    property Build[lcid: Integer]: Integer read Get_Build;
    property CalculateBeforeSave[lcid: Integer]: WordBool read Get_CalculateBeforeSave write Set_CalculateBeforeSave;
    property Calculation[lcid: Integer]: XlCalculation read Get_Calculation write Set_Calculation;
    property Caller[Index: OleVariant; lcid: Integer]: OleVariant read Get_Caller;
    property CanPlaySounds[lcid: Integer]: WordBool read Get_CanPlaySounds;
    property CanRecordSounds[lcid: Integer]: WordBool read Get_CanRecordSounds;
    property Caption: WideString read Get_Caption write Set_Caption;
    property CellDragAndDrop[lcid: Integer]: WordBool read Get_CellDragAndDrop write Set_CellDragAndDrop;
    property ClipboardFormats[Index: OleVariant; lcid: Integer]: OleVariant read Get_ClipboardFormats;
    property DisplayClipboardWindow[lcid: Integer]: WordBool read Get_DisplayClipboardWindow write Set_DisplayClipboardWindow;
    property ColorButtons: WordBool read Get_ColorButtons write Set_ColorButtons;
    property CommandUnderlines[lcid: Integer]: XlCommandUnderlines read Get_CommandUnderlines write Set_CommandUnderlines;
    property ConstrainNumeric[lcid: Integer]: WordBool read Get_ConstrainNumeric write Set_ConstrainNumeric;
    property CopyObjectsWithCells[lcid: Integer]: WordBool read Get_CopyObjectsWithCells write Set_CopyObjectsWithCells;
    property Cursor[lcid: Integer]: XlMousePointer read Get_Cursor write Set_Cursor;
    property CustomListCount[lcid: Integer]: Integer read Get_CustomListCount;
    property CutCopyMode[lcid: Integer]: XlCutCopyMode read Get_CutCopyMode write Set_CutCopyMode;
    property DataEntryMode[lcid: Integer]: Integer read Get_DataEntryMode write Set_DataEntryMode;
    property _Default: WideString read Get__Default;
    property DefaultFilePath[lcid: Integer]: WideString read Get_DefaultFilePath write Set_DefaultFilePath;
    property Dialogs: Dialogs read Get_Dialogs;
    property DisplayAlerts[lcid: Integer]: WordBool read Get_DisplayAlerts write Set_DisplayAlerts;
    property DisplayFormulaBar[lcid: Integer]: WordBool read Get_DisplayFormulaBar write Set_DisplayFormulaBar;
    property DisplayFullScreen[lcid: Integer]: WordBool read Get_DisplayFullScreen write Set_DisplayFullScreen;
    property DisplayNoteIndicator: WordBool read Get_DisplayNoteIndicator write Set_DisplayNoteIndicator;
    property DisplayCommentIndicator: XlCommentDisplayMode read Get_DisplayCommentIndicator write Set_DisplayCommentIndicator;
    property DisplayExcel4Menus[lcid: Integer]: WordBool read Get_DisplayExcel4Menus write Set_DisplayExcel4Menus;
    property DisplayRecentFiles: WordBool read Get_DisplayRecentFiles write Set_DisplayRecentFiles;
    property DisplayScrollBars[lcid: Integer]: WordBool read Get_DisplayScrollBars write Set_DisplayScrollBars;
    property DisplayStatusBar[lcid: Integer]: WordBool read Get_DisplayStatusBar write Set_DisplayStatusBar;
    property EditDirectlyInCell[lcid: Integer]: WordBool read Get_EditDirectlyInCell write Set_EditDirectlyInCell;
    property EnableAutoComplete: WordBool read Get_EnableAutoComplete write Set_EnableAutoComplete;
    property EnableCancelKey[lcid: Integer]: XlEnableCancelKey read Get_EnableCancelKey write Set_EnableCancelKey;
    property EnableSound: WordBool read Get_EnableSound write Set_EnableSound;
    property EnableTipWizard[lcid: Integer]: WordBool read Get_EnableTipWizard write Set_EnableTipWizard;
    property FileConverters[Index1: OleVariant; Index2: OleVariant; lcid: Integer]: OleVariant read Get_FileConverters;
    property FileSearch: FileSearch read Get_FileSearch;
    property FileFind: IFind read Get_FileFind;
    property FixedDecimal[lcid: Integer]: WordBool read Get_FixedDecimal write Set_FixedDecimal;
    property FixedDecimalPlaces[lcid: Integer]: Integer read Get_FixedDecimalPlaces write Set_FixedDecimalPlaces;
    property Height[lcid: Integer]: Double read Get_Height write Set_Height;
    property IgnoreRemoteRequests[lcid: Integer]: WordBool read Get_IgnoreRemoteRequests write Set_IgnoreRemoteRequests;
    property Interactive[lcid: Integer]: WordBool read Get_Interactive write Set_Interactive;
    property International[Index: OleVariant; lcid: Integer]: OleVariant read Get_International;
    property Iteration[lcid: Integer]: WordBool read Get_Iteration write Set_Iteration;
    property LargeButtons: WordBool read Get_LargeButtons write Set_LargeButtons;
    property Left[lcid: Integer]: Double read Get_Left write Set_Left;
    property LibraryPath[lcid: Integer]: WideString read Get_LibraryPath;
    property MailSession[lcid: Integer]: OleVariant read Get_MailSession;
    property MailSystem[lcid: Integer]: XlMailSystem read Get_MailSystem;
    property MathCoprocessorAvailable[lcid: Integer]: WordBool read Get_MathCoprocessorAvailable;
    property MaxChange[lcid: Integer]: Double read Get_MaxChange write Set_MaxChange;
    property MaxIterations[lcid: Integer]: Integer read Get_MaxIterations write Set_MaxIterations;
    property MemoryFree[lcid: Integer]: Integer read Get_MemoryFree;
    property MemoryTotal[lcid: Integer]: Integer read Get_MemoryTotal;
    property MemoryUsed[lcid: Integer]: Integer read Get_MemoryUsed;
    property MouseAvailable[lcid: Integer]: WordBool read Get_MouseAvailable;
    property MoveAfterReturn[lcid: Integer]: WordBool read Get_MoveAfterReturn write Set_MoveAfterReturn;
    property MoveAfterReturnDirection[lcid: Integer]: XlDirection read Get_MoveAfterReturnDirection write Set_MoveAfterReturnDirection;
    property RecentFiles: RecentFiles read Get_RecentFiles;
    property Name: WideString read Get_Name;
    property NetworkTemplatesPath[lcid: Integer]: WideString read Get_NetworkTemplatesPath;
    property ODBCErrors: ODBCErrors read Get_ODBCErrors;
    property ODBCTimeout: Integer read Get_ODBCTimeout write Set_ODBCTimeout;
    property OnCalculate[lcid: Integer]: WideString read Get_OnCalculate write Set_OnCalculate;
    property OnData[lcid: Integer]: WideString read Get_OnData write Set_OnData;
    property OnDoubleClick[lcid: Integer]: WideString read Get_OnDoubleClick write Set_OnDoubleClick;
    property OnEntry[lcid: Integer]: WideString read Get_OnEntry write Set_OnEntry;
    property OnSheetActivate[lcid: Integer]: WideString read Get_OnSheetActivate write Set_OnSheetActivate;
    property OnSheetDeactivate[lcid: Integer]: WideString read Get_OnSheetDeactivate write Set_OnSheetDeactivate;
    property OnWindow[lcid: Integer]: WideString read Get_OnWindow write Set_OnWindow;
    property OperatingSystem[lcid: Integer]: WideString read Get_OperatingSystem;
    property OrganizationName[lcid: Integer]: WideString read Get_OrganizationName;
    property Path[lcid: Integer]: WideString read Get_Path;
    property PathSeparator[lcid: Integer]: WideString read Get_PathSeparator;
    property PreviousSelections[Index: OleVariant; lcid: Integer]: OleVariant read Get_PreviousSelections;
    property PivotTableSelection: WordBool read Get_PivotTableSelection write Set_PivotTableSelection;
    property PromptForSummaryInfo[lcid: Integer]: WordBool read Get_PromptForSummaryInfo write Set_PromptForSummaryInfo;
    property RecordRelative[lcid: Integer]: WordBool read Get_RecordRelative;
    property ReferenceStyle[lcid: Integer]: XlReferenceStyle read Get_ReferenceStyle write Set_ReferenceStyle;
    property RegisteredFunctions[Index1: OleVariant; Index2: OleVariant; lcid: Integer]: OleVariant read Get_RegisteredFunctions;
    property RollZoom: WordBool read Get_RollZoom write Set_RollZoom;
    property ScreenUpdating[lcid: Integer]: WordBool read Get_ScreenUpdating write Set_ScreenUpdating;
    property SheetsInNewWorkbook[lcid: Integer]: Integer read Get_SheetsInNewWorkbook write Set_SheetsInNewWorkbook;
    property ShowChartTipNames: WordBool read Get_ShowChartTipNames write Set_ShowChartTipNames;
    property ShowChartTipValues: WordBool read Get_ShowChartTipValues write Set_ShowChartTipValues;
    property StandardFont[lcid: Integer]: WideString read Get_StandardFont write Set_StandardFont;
    property StandardFontSize[lcid: Integer]: Double read Get_StandardFontSize write Set_StandardFontSize;
    property StartupPath[lcid: Integer]: WideString read Get_StartupPath;
    property StatusBar[lcid: Integer]: OleVariant read Get_StatusBar write Set_StatusBar;
    property TemplatesPath[lcid: Integer]: WideString read Get_TemplatesPath;
    property ShowToolTips: WordBool read Get_ShowToolTips write Set_ShowToolTips;
    property Top[lcid: Integer]: Double read Get_Top write Set_Top;
    property DefaultSaveFormat: XlFileFormat read Get_DefaultSaveFormat write Set_DefaultSaveFormat;
    property TransitionMenuKey[lcid: Integer]: WideString read Get_TransitionMenuKey write Set_TransitionMenuKey;
    property TransitionMenuKeyAction[lcid: Integer]: Integer read Get_TransitionMenuKeyAction write Set_TransitionMenuKeyAction;
    property TransitionNavigKeys[lcid: Integer]: WordBool read Get_TransitionNavigKeys write Set_TransitionNavigKeys;
    property UsableHeight[lcid: Integer]: Double read Get_UsableHeight;
    property UsableWidth[lcid: Integer]: Double read Get_UsableWidth;
    property UserControl: WordBool read Get_UserControl write Set_UserControl;
    property UserName[lcid: Integer]: WideString read Get_UserName write Set_UserName;
    property Value: WideString read Get_Value;
    property VBE: VBE read Get_VBE;
    property Version[lcid: Integer]: WideString read Get_Version;
    property Visible[lcid: Integer]: WordBool read Get_Visible write Set_Visible;
    property Width[lcid: Integer]: Double read Get_Width write Set_Width;
    property WindowsForPens[lcid: Integer]: WordBool read Get_WindowsForPens;
    property WindowState[lcid: Integer]: XlWindowState read Get_WindowState write Set_WindowState;
    property UILanguage[lcid: Integer]: Integer read Get_UILanguage write Set_UILanguage;
    property DefaultSheetDirection[lcid: Integer]: Integer read Get_DefaultSheetDirection write Set_DefaultSheetDirection;
    property CursorMovement[lcid: Integer]: Integer read Get_CursorMovement write Set_CursorMovement;
    property ControlCharacters[lcid: Integer]: Integer read Get_ControlCharacters write Set_ControlCharacters;
    property EnableEvents: WordBool read Get_EnableEvents write Set_EnableEvents;
    property DisplayInfoWindow: WordBool read Get_DisplayInfoWindow write Set_DisplayInfoWindow;
  end;

// *********************************************************************//
// Interface: IWorksheetFunction
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020845-0001-0000-C000-000000000046}
// *********************************************************************//
  IWorksheetFunction = interface(IDispatch)
    ['{00020845-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function _WSFunction(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant;
                         Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant;
                         Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant;
                         Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant;
                         Arg16: OleVariant; Arg17: OleVariant; Arg18: OleVariant;
                         Arg19: OleVariant; Arg20: OleVariant; Arg21: OleVariant;
                         Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant;
                         Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant;
                         Arg28: OleVariant; Arg29: OleVariant; Arg30: OleVariant): OleVariant; stdcall;
    function Count(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant;
                   Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                   Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                   Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                   Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                   Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                   Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                   Arg29: OleVariant; Arg30: OleVariant): Double; stdcall;
    function IsNA(Arg1: OleVariant): WordBool; stdcall;
    function IsError(Arg1: OleVariant): WordBool; stdcall;
    function Sum(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                 Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                 Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                 Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                 Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                 Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                 Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                 Arg29: OleVariant; Arg30: OleVariant): Double; stdcall;
    function Average(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                     Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                     Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                     Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                     Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                     Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                     Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant;
                     Arg29: OleVariant; Arg30: OleVariant): Double; stdcall;
    function Min(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant;
                 Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                 Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                 Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                 Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                 Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                 Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                 Arg29: OleVariant; Arg30: OleVariant): Double; stdcall;
    function Max(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                 Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                 Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                 Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                 Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                 Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                 Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                 Arg29: OleVariant; Arg30: OleVariant): Double; stdcall;
    function Npv(Arg1: Double; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                 Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                 Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                 Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                 Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                 Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                 Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                 Arg29: OleVariant; Arg30: OleVariant): Double; stdcall;
    function StDev(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                   Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                   Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                   Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                   Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant;
                   Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant;
                   Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant;
                   Arg29: OleVariant; Arg30: OleVariant): Double; stdcall;
    function Dollar(Arg1: Double; Arg2: OleVariant): WideString; stdcall;
    function Fixed(Arg1: Double; Arg2: OleVariant; Arg3: OleVariant): WideString; stdcall;
    function Pi: Double; stdcall;
    function Ln(Arg1: Double): Double; stdcall;
    function Log10(Arg1: Double): Double; stdcall;
    function Round(Arg1: Double; Arg2: Double): Double; stdcall;
    function Lookup(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant): OleVariant; stdcall;
    function Index(Arg1: OleVariant; Arg2: Double; Arg3: OleVariant; Arg4: OleVariant): OleVariant; stdcall;
    function Rept(const Arg1: WideString; Arg2: Double): WideString; stdcall;
    function And_(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant;
                  Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant;
                  Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant;
                  Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant;
                  Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant;
                  Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant;
                  Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant;
                  Arg29: OleVariant; Arg30: OleVariant): WordBool; stdcall;
    function Or_(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant;
                 Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant;
                 Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant;
                 Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant;
                 Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant;
                 Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant;
                 Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant;
                 Arg29: OleVariant; Arg30: OleVariant): WordBool; stdcall;
    function DCount(const Arg1: Range; Arg2: OleVariant; Arg3: OleVariant): Double; stdcall;
    function DSum(const Arg1: Range; Arg2: OleVariant; Arg3: OleVariant): Double; stdcall;
    function DAverage(const Arg1: Range; Arg2: OleVariant; Arg3: OleVariant): Double; stdcall;
    function DMin(const Arg1: Range; Arg2: OleVariant; Arg3: OleVariant): Double; stdcall;
    function DMax(const Arg1: Range; Arg2: OleVariant; Arg3: OleVariant): Double; stdcall;
    function DStDev(const Arg1: Range; Arg2: OleVariant; Arg3: OleVariant): Double; stdcall;
    function Var_(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant;
                  Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant;
                  Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant;
                  Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant;
                  Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant;
                  Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant;
                  Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant;
                  Arg29: OleVariant; Arg30: OleVariant): Double; stdcall;
    function DVar(const Arg1: Range; Arg2: OleVariant; Arg3: OleVariant): Double; stdcall;
    function Text(Arg1: OleVariant; const Arg2: WideString): WideString; stdcall;
    function LinEst(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant): OleVariant; stdcall;
    function Trend(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant): OleVariant; stdcall;
    function LogEst(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant): OleVariant; stdcall;
    function Growth(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant): OleVariant; stdcall;
    function Pv(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: OleVariant; Arg5: OleVariant): Double; stdcall;
    function Fv(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: OleVariant; Arg5: OleVariant): Double; stdcall;
    function NPer(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: OleVariant; Arg5: OleVariant): Double; stdcall;
    function Pmt(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: OleVariant; Arg5: OleVariant): Double; stdcall;
    function Rate(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: OleVariant; Arg5: OleVariant;
                  Arg6: OleVariant): Double; stdcall;
    function MIrr(Arg1: OleVariant; Arg2: Double; Arg3: Double): Double; stdcall;
    function Irr(Arg1: OleVariant; Arg2: OleVariant): Double; stdcall;
    function Match(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant): Double; stdcall;
    function Weekday(Arg1: OleVariant; Arg2: OleVariant): Double; stdcall;
    function Search(const Arg1: WideString; const Arg2: WideString; Arg3: OleVariant): Double; stdcall;
    function Transpose(Arg1: OleVariant): OleVariant; stdcall;
    function Atan2(Arg1: Double; Arg2: Double): Double; stdcall;
    function Asin(Arg1: Double): Double; stdcall;
    function Acos(Arg1: Double): Double; stdcall;
    function Choose(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant;
                    Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant;
                    Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant;
                    Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant;
                    Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                    Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                    Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                    Arg29: OleVariant; Arg30: OleVariant): OleVariant; stdcall;
    function HLookup(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant): OleVariant; stdcall;
    function VLookup(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant): OleVariant; stdcall;
    function Log(Arg1: Double; Arg2: OleVariant): Double; stdcall;
    function Proper(const Arg1: WideString): WideString; stdcall;
    function Trim(const Arg1: WideString): WideString; stdcall;
    function Replace(const Arg1: WideString; Arg2: Double; Arg3: Double; const Arg4: WideString): WideString; stdcall;
    function Substitute(const Arg1: WideString; const Arg2: WideString; const Arg3: WideString; 
                        Arg4: OleVariant): WideString; stdcall;
    function Find(const Arg1: WideString; const Arg2: WideString; Arg3: OleVariant): Double; stdcall;
    function IsErr(Arg1: OleVariant): WordBool; stdcall;
    function IsText(Arg1: OleVariant): WordBool; stdcall;
    function IsNumber(Arg1: OleVariant): WordBool; stdcall;
    function Sln(Arg1: Double; Arg2: Double; Arg3: Double): Double; stdcall;
    function Syd(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: Double): Double; stdcall;
    function Ddb(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: Double; Arg5: OleVariant): Double; stdcall;
    function Clean(const Arg1: WideString): WideString; stdcall;
    function MDeterm(Arg1: OleVariant): Double; stdcall;
    function MInverse(Arg1: OleVariant): OleVariant; stdcall;
    function MMult(Arg1: OleVariant; Arg2: OleVariant): OleVariant; stdcall;
    function Ipmt(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: Double; Arg5: OleVariant; 
                  Arg6: OleVariant): Double; stdcall;
    function Ppmt(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: Double; Arg5: OleVariant; 
                  Arg6: OleVariant): Double; stdcall;
    function CountA(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                    Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                    Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                    Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                    Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                    Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                    Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                    Arg29: OleVariant; Arg30: OleVariant): Double; stdcall;
    function Product(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                     Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                     Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                     Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                     Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                     Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                     Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                     Arg29: OleVariant; Arg30: OleVariant): Double; stdcall;
    function Fact(Arg1: Double): Double; stdcall;
    function DProduct(const Arg1: Range; Arg2: OleVariant; Arg3: OleVariant): Double; stdcall;
    function IsNonText(Arg1: OleVariant): WordBool; stdcall;
    function StDevP(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                    Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                    Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                    Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                    Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                    Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                    Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                    Arg29: OleVariant; Arg30: OleVariant): Double; stdcall;
    function VarP(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant;
                  Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                  Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                  Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                  Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                  Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                  Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                  Arg29: OleVariant; Arg30: OleVariant): Double; stdcall;
    function DStDevP(const Arg1: Range; Arg2: OleVariant; Arg3: OleVariant): Double; stdcall;
    function DVarP(const Arg1: Range; Arg2: OleVariant; Arg3: OleVariant): Double; stdcall;
    function IsLogical(Arg1: OleVariant): WordBool; stdcall;
    function DCountA(const Arg1: Range; Arg2: OleVariant; Arg3: OleVariant): Double; stdcall;
    function USDollar(Arg1: Double; Arg2: Double): WideString; stdcall;
    function FindB(const Arg1: WideString; const Arg2: WideString; Arg3: OleVariant): Double; stdcall;
    function SearchB(const Arg1: WideString; const Arg2: WideString; Arg3: OleVariant): Double; stdcall;
    function ReplaceB(const Arg1: WideString; Arg2: Double; Arg3: Double; const Arg4: WideString): WideString; stdcall;
    function RoundUp(Arg1: Double; Arg2: Double): Double; stdcall;
    function RoundDown(Arg1: Double; Arg2: Double): Double; stdcall;
    function Rank(Arg1: Double; const Arg2: Range; Arg3: OleVariant): Double; stdcall;
    function Days360(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant): Double; stdcall;
    function Vdb(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: Double; Arg5: Double; 
                 Arg6: OleVariant; Arg7: OleVariant): Double; stdcall;
    function Median(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                    Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                    Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                    Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                    Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                    Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                    Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                    Arg29: OleVariant; Arg30: OleVariant): Double; stdcall;
    function SumProduct(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant;
                        Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                        Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                        Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                        Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                        Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                        Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                        Arg29: OleVariant; Arg30: OleVariant): Double; stdcall;
    function Sinh(Arg1: Double): Double; stdcall;
    function Cosh(Arg1: Double): Double; stdcall;
    function Tanh(Arg1: Double): Double; stdcall;
    function Asinh(Arg1: Double): Double; stdcall;
    function Acosh(Arg1: Double): Double; stdcall;
    function Atanh(Arg1: Double): Double; stdcall;
    function DGet(const Arg1: Range; Arg2: OleVariant; Arg3: OleVariant): OleVariant; stdcall;
    function Db(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: Double; Arg5: OleVariant): Double; stdcall;
    function Frequency(Arg1: OleVariant; Arg2: OleVariant): OleVariant; stdcall;
    function AveDev(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                    Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                    Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                    Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                    Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                    Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                    Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                    Arg29: OleVariant; Arg30: OleVariant): Double; stdcall;
    function BetaDist(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: OleVariant; Arg5: OleVariant): Double; stdcall;
    function GammaLn(Arg1: Double): Double; stdcall;
    function BetaInv(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: OleVariant; Arg5: OleVariant): Double; stdcall;
    function BinomDist(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: WordBool): Double; stdcall;
    function ChiDist(Arg1: Double; Arg2: Double): Double; stdcall;
    function ChiInv(Arg1: Double; Arg2: Double): Double; stdcall;
    function Combin(Arg1: Double; Arg2: Double): Double; stdcall;
    function Confidence(Arg1: Double; Arg2: Double; Arg3: Double): Double; stdcall;
    function CritBinom(Arg1: Double; Arg2: Double; Arg3: Double): Double; stdcall;
    function Even(Arg1: Double): Double; stdcall;
    function ExponDist(Arg1: Double; Arg2: Double; Arg3: WordBool): Double; stdcall;
    function FDist(Arg1: Double; Arg2: Double; Arg3: Double): Double; stdcall;
    function FInv(Arg1: Double; Arg2: Double; Arg3: Double): Double; stdcall;
    function Fisher(Arg1: Double): Double; stdcall;
    function FisherInv(Arg1: Double): Double; stdcall;
    function Floor(Arg1: Double; Arg2: Double): Double; stdcall;
    function GammaDist(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: WordBool): Double; stdcall;
    function GammaInv(Arg1: Double; Arg2: Double; Arg3: Double): Double; stdcall;
    function Ceiling(Arg1: Double; Arg2: Double): Double; stdcall;
    function HypGeomDist(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: Double): Double; stdcall;
    function LogNormDist(Arg1: Double; Arg2: Double; Arg3: Double): Double; stdcall;
    function LogInv(Arg1: Double; Arg2: Double; Arg3: Double): Double; stdcall;
    function NegBinomDist(Arg1: Double; Arg2: Double; Arg3: Double): Double; stdcall;
    function NormDist(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: WordBool): Double; stdcall;
    function NormSDist(Arg1: Double): Double; stdcall;
    function NormInv(Arg1: Double; Arg2: Double; Arg3: Double): Double; stdcall;
    function NormSInv(Arg1: Double): Double; stdcall;
    function Standardize(Arg1: Double; Arg2: Double; Arg3: Double): Double; stdcall;
    function Odd(Arg1: Double): Double; stdcall;
    function Permut(Arg1: Double; Arg2: Double): Double; stdcall;
    function Poisson(Arg1: Double; Arg2: Double; Arg3: WordBool): Double; stdcall;
    function TDist(Arg1: Double; Arg2: Double; Arg3: Double): Double; stdcall;
    function Weibull(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: WordBool): Double; stdcall;
    function SumXMY2(Arg1: OleVariant; Arg2: OleVariant): Double; stdcall;
    function SumX2MY2(Arg1: OleVariant; Arg2: OleVariant): Double; stdcall;
    function SumX2PY2(Arg1: OleVariant; Arg2: OleVariant): Double; stdcall;
    function ChiTest(Arg1: OleVariant; Arg2: OleVariant): Double; stdcall;
    function Correl(Arg1: OleVariant; Arg2: OleVariant): Double; stdcall;
    function Covar(Arg1: OleVariant; Arg2: OleVariant): Double; stdcall;
    function Forecast(Arg1: Double; Arg2: OleVariant; Arg3: OleVariant): Double; stdcall;
    function FTest(Arg1: OleVariant; Arg2: OleVariant): Double; stdcall;
    function Intercept(Arg1: OleVariant; Arg2: OleVariant): Double; stdcall;
    function Pearson(Arg1: OleVariant; Arg2: OleVariant): Double; stdcall;
    function RSq(Arg1: OleVariant; Arg2: OleVariant): Double; stdcall;
    function StEyx(Arg1: OleVariant; Arg2: OleVariant): Double; stdcall;
    function Slope(Arg1: OleVariant; Arg2: OleVariant): Double; stdcall;
    function TTest(Arg1: OleVariant; Arg2: OleVariant; Arg3: Double; Arg4: Double): Double; stdcall;
    function Prob(Arg1: OleVariant; Arg2: OleVariant; Arg3: Double; Arg4: OleVariant): Double; stdcall;
    function DevSq(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                   Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                   Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                   Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                   Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                   Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                   Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                   Arg29: OleVariant; Arg30: OleVariant): Double; stdcall;
    function GeoMean(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                     Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                     Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                     Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                     Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                     Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                     Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                     Arg29: OleVariant; Arg30: OleVariant): Double; stdcall;
    function HarMean(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                     Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                     Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                     Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                     Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                     Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                     Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                     Arg29: OleVariant; Arg30: OleVariant): Double; stdcall;
    function SumSq(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                   Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                   Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                   Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                   Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                   Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                   Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                   Arg29: OleVariant; Arg30: OleVariant): Double; stdcall;
    function Kurt(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                  Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                  Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                  Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                  Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                  Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                  Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                  Arg29: OleVariant; Arg30: OleVariant): Double; stdcall;
    function Skew(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                  Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                  Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                  Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                  Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                  Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                  Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                  Arg29: OleVariant; Arg30: OleVariant): Double; stdcall;
    function ZTest(Arg1: OleVariant; Arg2: Double; Arg3: OleVariant): Double; stdcall;
    function Large(Arg1: OleVariant; Arg2: Double): Double; stdcall;
    function Small(Arg1: OleVariant; Arg2: Double): Double; stdcall;
    function Quartile(Arg1: OleVariant; Arg2: Double): Double; stdcall;
    function Percentile(Arg1: OleVariant; Arg2: Double): Double; stdcall;
    function PercentRank(Arg1: OleVariant; Arg2: Double; Arg3: OleVariant): Double; stdcall;
    function Mode(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                  Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                  Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                  Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                  Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                  Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                  Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                  Arg29: OleVariant; Arg30: OleVariant): Double; stdcall;
    function TrimMean(Arg1: OleVariant; Arg2: Double): Double; stdcall;
    function TInv(Arg1: Double; Arg2: Double): Double; stdcall;
    function Power(Arg1: Double; Arg2: Double): Double; stdcall;
    function Radians(Arg1: Double): Double; stdcall;
    function Degrees(Arg1: Double): Double; stdcall;
    function Subtotal(Arg1: Double; const Arg2: Range; Arg3: OleVariant; Arg4: OleVariant; 
                      Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                      Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                      Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                      Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                      Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                      Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                      Arg29: OleVariant; Arg30: OleVariant): Double; stdcall;
    function SumIf(const Arg1: Range; Arg2: OleVariant; Arg3: OleVariant): Double; stdcall;
    function CountIf(const Arg1: Range; Arg2: OleVariant): Double; stdcall;
    function CountBlank(const Arg1: Range): Double; stdcall;
    function Ispmt(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: Double): Double; stdcall;
    function Roman(Arg1: Double; Arg2: OleVariant): WideString; stdcall;
    function Asc(const Arg1: WideString): WideString; stdcall;
    function Dbcs(const Arg1: WideString): WideString; stdcall;
  end;

// *********************************************************************//
// Interface: IRange
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020846-0001-0000-C000-000000000046}
// *********************************************************************//
  IRange = interface(IDispatch)
    ['{00020846-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Activate: HResult; stdcall;
    function Get_AddIndent: OleVariant; stdcall;
    function Set_AddIndent(RHS: OleVariant): HResult; stdcall;
    function Get_Address(RowAbsolute: OleVariant; ColumnAbsolute: OleVariant; 
                         ReferenceStyle: XlReferenceStyle; External: OleVariant; 
                         RelativeTo: OleVariant; lcid: Integer): WideString; stdcall;
    function Get_AddressLocal(RowAbsolute: OleVariant; ColumnAbsolute: OleVariant; 
                              ReferenceStyle: XlReferenceStyle; External: OleVariant; 
                              RelativeTo: OleVariant): WideString; stdcall;
    function AdvancedFilter(Action: XlFilterAction; CriteriaRange: OleVariant; 
                            CopyToRange: OleVariant; Unique: OleVariant): HResult; stdcall;
    function ApplyNames(Names: OleVariant; IgnoreRelativeAbsolute: OleVariant; 
                        UseRowColumnNames: OleVariant; OmitColumn: OleVariant; OmitRow: OleVariant; 
                        Order: XlApplyNamesOrder; AppendLast: OleVariant): HResult; stdcall;
    function ApplyOutlineStyles: HResult; stdcall;
    function Get_Areas: Areas; stdcall;
    function AutoComplete(const String_: WideString): WideString; stdcall;
    function AutoFill(const Destination: Range; Type_: XlAutoFillType): HResult; stdcall;
    function AutoFilter(Field: OleVariant; Criteria1: OleVariant; Operator: XlAutoFilterOperator; 
                        Criteria2: OleVariant; VisibleDropDown: OleVariant): HResult; stdcall;
    function AutoFit: HResult; stdcall;
    function AutoFormat(Format: XlRangeAutoFormat; Number: OleVariant; Font: OleVariant; 
                        Alignment: OleVariant; Border: OleVariant; Pattern: OleVariant; 
                        Width: OleVariant): HResult; stdcall;
    function AutoOutline: HResult; stdcall;
    function BorderAround(LineStyle: OleVariant; Weight: XlBorderWeight; ColorIndex: XlColorIndex; 
                          Color: OleVariant): HResult; stdcall;
    function Get_Borders: Borders; stdcall;
    function Calculate: HResult; stdcall;
    function Get_Cells: Range; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant): HResult; stdcall;
    function Clear: HResult; stdcall;
    function ClearContents: HResult; stdcall;
    function ClearFormats: HResult; stdcall;
    function ClearNotes: HResult; stdcall;
    function ClearOutline: HResult; stdcall;
    function Get_Column: Integer; stdcall;
    function ColumnDifferences(Comparison: OleVariant): Range; stdcall;
    function Get_Columns: Range; stdcall;
    function Get_ColumnWidth: OleVariant; stdcall;
    function Set_ColumnWidth(RHS: OleVariant): HResult; stdcall;
    function Consolidate(Sources: OleVariant; Function_: OleVariant; TopRow: OleVariant; 
                         LeftColumn: OleVariant; CreateLinks: OleVariant): HResult; stdcall;
    function Copy(Destination: OleVariant): HResult; stdcall;
    function CopyFromRecordset(const Data: IUnknown; MaxRows: OleVariant; MaxColumns: OleVariant): Integer; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Get_Count: Integer; stdcall;
    function CreateNames(Top: OleVariant; Left: OleVariant; Bottom: OleVariant; Right: OleVariant): HResult; stdcall;
    function CreatePublisher(Edition: OleVariant; Appearance: XlPictureAppearance; 
                             ContainsPICT: OleVariant; ContainsBIFF: OleVariant; 
                             ContainsRTF: OleVariant; ContainsVALU: OleVariant): HResult; stdcall;
    function Get_CurrentArray: Range; stdcall;
    function Get_CurrentRegion: Range; stdcall;
    function Cut(Destination: OleVariant): HResult; stdcall;
    function DataSeries(Rowcol: OleVariant; Type_: XlDataSeriesType; Date: XlDataSeriesDate; 
                        Step: OleVariant; Stop: OleVariant; Trend: OleVariant): HResult; stdcall;
    function Get__Default(RowIndex: OleVariant; ColumnIndex: OleVariant; lcid: Integer): OleVariant; stdcall;
    function Set__Default(RowIndex: OleVariant; ColumnIndex: OleVariant; lcid: Integer; 
                          RHS: OleVariant): HResult; stdcall;
    function Delete(Shift: OleVariant): HResult; stdcall;
    function Get_Dependents: Range; stdcall;
    function DialogBox_: OleVariant; stdcall;
    function Get_DirectDependents: Range; stdcall;
    function Get_DirectPrecedents: Range; stdcall;
    function EditionOptions(Type_: XlEditionType; Option: XlEditionOptionsOption; Name: OleVariant; 
                            Reference: OleVariant; Appearance: XlPictureAppearance; 
                            ChartSize: XlPictureAppearance; Format: OleVariant): OleVariant; stdcall;
    function Get_End_(Direction: XlDirection): Range; stdcall;
    function Get_EntireColumn: Range; stdcall;
    function Get_EntireRow: Range; stdcall;
    function FillDown: HResult; stdcall;
    function FillLeft: HResult; stdcall;
    function FillRight: HResult; stdcall;
    function FillUp: HResult; stdcall;
    function Find(What: OleVariant; After: OleVariant; LookIn: OleVariant; LookAt: OleVariant; 
                  SearchOrder: OleVariant; SearchDirection: XlSearchDirection; 
                  MatchCase: OleVariant; MatchByte: OleVariant; MatchControlCharacters: OleVariant; 
                  MatchDiacritics: OleVariant; MatchKashida: OleVariant; MatchAlefHamza: OleVariant): Range; stdcall;
    function FindNext(After: OleVariant): Range; stdcall;
    function FindPrevious(After: OleVariant): Range; stdcall;
    function Get_Font: Font; stdcall;
    function Get_Formula(lcid: Integer): OleVariant; stdcall;
    function Set_Formula(lcid: Integer; RHS: OleVariant): HResult; stdcall;
    function Get_FormulaArray: OleVariant; stdcall;
    function Set_FormulaArray(RHS: OleVariant): HResult; stdcall;
    function Get_FormulaLabel: XlFormulaLabel; stdcall;
    function Set_FormulaLabel(RHS: XlFormulaLabel): HResult; stdcall;
    function Get_FormulaHidden: OleVariant; stdcall;
    function Set_FormulaHidden(RHS: OleVariant): HResult; stdcall;
    function Get_FormulaLocal: OleVariant; stdcall;
    function Set_FormulaLocal(RHS: OleVariant): HResult; stdcall;
    function Get_FormulaR1C1(lcid: Integer): OleVariant; stdcall;
    function Set_FormulaR1C1(lcid: Integer; RHS: OleVariant): HResult; stdcall;
    function Get_FormulaR1C1Local: OleVariant; stdcall;
    function Set_FormulaR1C1Local(RHS: OleVariant): HResult; stdcall;
    function FunctionWizard: HResult; stdcall;
    function GoalSeek(Goal: OleVariant; const ChangingCell: Range): WordBool; stdcall;
    function Group(Start: OleVariant; End_: OleVariant; By: OleVariant; Periods: OleVariant): OleVariant; stdcall;
    function Get_HasArray: OleVariant; stdcall;
    function Get_HasFormula: OleVariant; stdcall;
    function Get_Height: OleVariant; stdcall;
    function Get_Hidden: OleVariant; stdcall;
    function Set_Hidden(RHS: OleVariant): HResult; stdcall;
    function Get_HorizontalAlignment: OleVariant; stdcall;
    function Set_HorizontalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_IndentLevel: OleVariant; stdcall;
    function Set_IndentLevel(RHS: OleVariant): HResult; stdcall;
    function InsertIndent(InsertAmount: Integer): HResult; stdcall;
    function Insert(Shift: OleVariant): HResult; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Item(RowIndex: OleVariant; ColumnIndex: OleVariant; lcid: Integer): OleVariant; stdcall;
    function Set_Item(RowIndex: OleVariant; ColumnIndex: OleVariant; lcid: Integer; RHS: OleVariant): HResult; stdcall;
    function Justify: HResult; stdcall;
    function Get_Left: OleVariant; stdcall;
    function Get_ListHeaderRows: Integer; stdcall;
    function ListNames: HResult; stdcall;
    function Get_LocationInTable: XlLocationInTable; stdcall;
    function Get_Locked: OleVariant; stdcall;
    function Set_Locked(RHS: OleVariant): HResult; stdcall;
    function Merge(Across: OleVariant): HResult; stdcall;
    function UnMerge: HResult; stdcall;
    function Get_MergeArea: Range; stdcall;
    function Get_MergeCells: OleVariant; stdcall;
    function Set_MergeCells(RHS: OleVariant): HResult; stdcall;
    function Get_Name: OleVariant; stdcall;
    function Set_Name(RHS: OleVariant): HResult; stdcall;
    function NavigateArrow(TowardPrecedent: OleVariant; ArrowNumber: OleVariant; 
                           LinkNumber: OleVariant): HResult; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
    function Get_Next: Range; stdcall;
    function NoteText(Text: OleVariant; Start: OleVariant; Length: OleVariant): WideString; stdcall;
    function Get_NumberFormat: OleVariant; stdcall;
    function Set_NumberFormat(RHS: OleVariant): HResult; stdcall;
    function Get_NumberFormatLocal: OleVariant; stdcall;
    function Set_NumberFormatLocal(RHS: OleVariant): HResult; stdcall;
    function Get_Offset(RowOffset: OleVariant; ColumnOffset: OleVariant): Range; stdcall;
    function Get_Orientation: OleVariant; stdcall;
    function Set_Orientation(RHS: OleVariant): HResult; stdcall;
    function Get_OutlineLevel: OleVariant; stdcall;
    function Set_OutlineLevel(RHS: OleVariant): HResult; stdcall;
    function Get_PageBreak: Integer; stdcall;
    function Set_PageBreak(RHS: Integer): HResult; stdcall;
    function Parse(ParseLine: OleVariant; Destination: OleVariant): HResult; stdcall;
    function PasteSpecial(Paste: XlPasteType; Operation: XlPasteSpecialOperation; 
                          SkipBlanks: OleVariant; Transpose: OleVariant): HResult; stdcall;
    function Get_PivotField: PivotField; stdcall;
    function Get_PivotItem: PivotItem; stdcall;
    function Get_PivotTable: PivotTable; stdcall;
    function Get_Precedents: Range; stdcall;
    function Get_PrefixCharacter: OleVariant; stdcall;
    function Get_Previous: Range; stdcall;
    function PrintOut(From: OleVariant; To_: OleVariant; Copies: OleVariant; Preview: OleVariant;
                      ActivePrinter: OleVariant; PrintToFile: OleVariant; Collate: OleVariant): HResult; stdcall;
    function PrintPreview(EnableChanges: OleVariant): HResult; stdcall;
    function Get_QueryTable: QueryTable; stdcall;
    function Get_Range(Cell1: OleVariant; Cell2: OleVariant): Range; stdcall;
    function RemoveSubtotal: HResult; stdcall;
    function Replace(What: OleVariant; Replacement: OleVariant; LookAt: OleVariant; 
                     SearchOrder: OleVariant; MatchCase: OleVariant; MatchByte: OleVariant; 
                     MatchControlCharacters: OleVariant; MatchDiacritics: OleVariant; 
                     MatchKashida: OleVariant; MatchAlefHamza: OleVariant): WordBool; stdcall;
    function Get_Resize(RowSize: OleVariant; ColumnSize: OleVariant): Range; stdcall;
    function Get_Row: Integer; stdcall;
    function RowDifferences(Comparison: OleVariant): Range; stdcall;
    function Get_RowHeight: OleVariant; stdcall;
    function Set_RowHeight(RHS: OleVariant): HResult; stdcall;
    function Get_Rows: Range; stdcall;
    function Run(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                 Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                 Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                 Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                 Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                 Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                 Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                 Arg29: OleVariant; Arg30: OleVariant): OleVariant; stdcall;
    function Select: HResult; stdcall;
    function Show: HResult; stdcall;
    function ShowDependents(Remove: OleVariant): HResult; stdcall;
    function Get_ShowDetail: OleVariant; stdcall;
    function Set_ShowDetail(RHS: OleVariant): HResult; stdcall;
    function ShowErrors: HResult; stdcall;
    function ShowPrecedents(Remove: OleVariant): HResult; stdcall;
    function Get_ShrinkToFit: OleVariant; stdcall;
    function Set_ShrinkToFit(RHS: OleVariant): HResult; stdcall;
    function Sort(Key1: OleVariant; Order1: XlSortOrder; Key2: OleVariant; Type_: OleVariant; 
                  Order2: XlSortOrder; Key3: OleVariant; Order3: XlSortOrder; Header: XlYesNoGuess; 
                  OrderCustom: OleVariant; MatchCase: OleVariant; Orientation: XlSortOrientation; 
                  SortMethod: XlSortMethod; IgnoreControlCharacters: OleVariant; 
                  IgnoreDiacritics: OleVariant; IgnoreKashida: OleVariant): HResult; stdcall;
    function SortSpecial(SortMethod: XlSortMethod; Key1: OleVariant; Order1: XlSortOrder; 
                         Type_: OleVariant; Key2: OleVariant; Order2: XlSortOrder; 
                         Key3: OleVariant; Order3: XlSortOrder; Header: XlYesNoGuess; 
                         OrderCustom: OleVariant; MatchCase: OleVariant; 
                         Orientation: XlSortOrientation): HResult; stdcall;
    function Get_SoundNote: SoundNote; stdcall;
    function SpecialCells(Type_: XlCellType; Value: OleVariant): Range; stdcall;
    function Get_Style: OleVariant; stdcall;
    function Set_Style(RHS: OleVariant): HResult; stdcall;
    function SubscribeTo(const Edition: WideString; Format: XlSubscribeToFormat): HResult; stdcall;
    function Subtotal(GroupBy: Integer; Function_: XlConsolidationFunction; TotalList: OleVariant; 
                      Replace: OleVariant; PageBreaks: OleVariant; SummaryBelowData: XlSummaryRow): HResult; stdcall;
    function Get_Summary: OleVariant; stdcall;
    function Table(RowInput: OleVariant; ColumnInput: OleVariant): HResult; stdcall;
    function Get_Text: OleVariant; stdcall;
    function TextToColumns(Destination: OleVariant; DataType: XlTextParsingType; 
                           TextQualifier: XlTextQualifier; ConsecutiveDelimiter: OleVariant; 
                           Tab: OleVariant; Semicolon: OleVariant; Comma: OleVariant; 
                           Space: OleVariant; Other: OleVariant; OtherChar: OleVariant; 
                           FieldInfo: OleVariant): HResult; stdcall;
    function Get_Top: OleVariant; stdcall;
    function Ungroup: HResult; stdcall;
    function Get_UseStandardHeight: OleVariant; stdcall;
    function Set_UseStandardHeight(RHS: OleVariant): HResult; stdcall;
    function Get_UseStandardWidth: OleVariant; stdcall;
    function Set_UseStandardWidth(RHS: OleVariant): HResult; stdcall;
    function Get_Validation: Validation; stdcall;
    function Get_Value(lcid: Integer): OleVariant; stdcall;
    function Set_Value(lcid: Integer; RHS: OleVariant): HResult; stdcall;
    function Get_Value2(lcid: Integer): OleVariant; stdcall;
    function Set_Value2(lcid: Integer; RHS: OleVariant): HResult; stdcall;
    function Get_VerticalAlignment: OleVariant; stdcall;
    function Set_VerticalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_Width: OleVariant; stdcall;
    function Get_Worksheet: Worksheet; stdcall;
    function Get_WrapText: OleVariant; stdcall;
    function Set_WrapText(RHS: OleVariant): HResult; stdcall;
    function AddComment(Text: OleVariant): Comment; stdcall;
    function Get_Comment: Comment; stdcall;
    function ClearComments: HResult; stdcall;
    function Get_Phonetic: Phonetic; stdcall;
    function Get_FormatConditions: FormatConditions; stdcall;
    function Get_ReadingOrder: Integer; stdcall;
    function Set_ReadingOrder(RHS: Integer): HResult; stdcall;
    function Get_Hyperlinks: Hyperlinks; stdcall;
  end;

// *********************************************************************//
// Interface: IChartEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002440F-0001-0000-C000-000000000046}
// *********************************************************************//
  IChartEvents = interface(IDispatch)
    ['{0002440F-0001-0000-C000-000000000046}']
    function Activate: HResult; stdcall;
    function Deactivate: HResult; stdcall;
    function Resize: HResult; stdcall;
    function MouseDown(Button: XlMouseButton; Shift: Integer; X: Integer; Y: Integer): HResult; stdcall;
    function MouseUp(Button: XlMouseButton; Shift: Integer; X: Integer; Y: Integer): HResult; stdcall;
    function MouseMove(Button: XlMouseButton; Shift: Integer; X: Integer; Y: Integer): HResult; stdcall;
    function BeforeRightClick(var Cancel: WordBool): HResult; stdcall;
    function DragPlot: HResult; stdcall;
    function DragOver: HResult; stdcall;
    function BeforeDoubleClick(ElementID: XlChartItem; Arg1: Integer; Arg2: Integer; 
                               var Cancel: WordBool): HResult; stdcall;
    function Select(ElementID: XlChartItem; Arg1: Integer; Arg2: Integer): HResult; stdcall;
    function SeriesChange(SeriesIndex: Integer; PointIndex: Integer): HResult; stdcall;
    function Calculate: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: _Chart
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000208D6-0000-0000-C000-000000000046}
// *********************************************************************//
  _Chart = interface(IDispatch)
    ['{000208D6-0000-0000-C000-000000000046}']
    function Get_Application_: Application_; safecall;
    function Get_Creator: XlCreator; safecall;
    function Get_Parent: IDispatch; safecall;
    procedure Activate(lcid: Integer); safecall;
    procedure Copy(Before: OleVariant; After: OleVariant; lcid: Integer); safecall;
    procedure Delete(lcid: Integer); safecall;
    function Get_CodeName: WideString; safecall;
    function Get__CodeName: WideString; safecall;
    procedure Set__CodeName(const RHS: WideString); safecall;
    function Get_Index(lcid: Integer): Integer; safecall;
    procedure Move(Before: OleVariant; After: OleVariant; lcid: Integer); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const RHS: WideString); safecall;
    function Get_Next: IDispatch; safecall;
    function Get_OnDoubleClick(lcid: Integer): WideString; safecall;
    procedure Set_OnDoubleClick(lcid: Integer; const RHS: WideString); safecall;
    function Get_OnSheetActivate(lcid: Integer): WideString; safecall;
    procedure Set_OnSheetActivate(lcid: Integer; const RHS: WideString); safecall;
    function Get_OnSheetDeactivate(lcid: Integer): WideString; safecall;
    procedure Set_OnSheetDeactivate(lcid: Integer; const RHS: WideString); safecall;
    function Get_PageSetup: PageSetup; safecall;
    function Get_Previous: IDispatch; safecall;
    procedure PrintOut(From: OleVariant; To_: OleVariant; Copies: OleVariant; Preview: OleVariant; 
                       ActivePrinter: OleVariant; PrintToFile: OleVariant; Collate: OleVariant; 
                       lcid: Integer); safecall;
    procedure PrintPreview(EnableChanges: OleVariant; lcid: Integer); safecall;
    procedure Protect(Password: OleVariant; DrawingObjects: OleVariant; Contents: OleVariant; 
                      Scenarios: OleVariant; UserInterfaceOnly: OleVariant; lcid: Integer); safecall;
    function Get_ProtectContents(lcid: Integer): WordBool; safecall;
    function Get_ProtectDrawingObjects(lcid: Integer): WordBool; safecall;
    function Get_ProtectionMode(lcid: Integer): WordBool; safecall;
    procedure _Dummy23; stdcall;
    procedure SaveAs(const Filename: WideString; FileFormat: OleVariant; Password: OleVariant; 
                     WriteResPassword: OleVariant; ReadOnlyRecommended: OleVariant; 
                     CreateBackup: OleVariant; AddToMru: OleVariant; TextCodepage: OleVariant; 
                     TextVisualLayout: OleVariant; lcid: Integer); safecall;
    procedure Select(Replace: OleVariant; lcid: Integer); safecall;
    procedure Unprotect(Password: OleVariant; lcid: Integer); safecall;
    function Get_Visible(lcid: Integer): XlSheetVisibility; safecall;
    procedure Set_Visible(lcid: Integer; RHS: XlSheetVisibility); safecall;
    function Get_Shapes: Shapes; safecall;
    procedure ApplyDataLabels(Type_: XlDataLabelsType; LegendKey: OleVariant; AutoText: OleVariant; 
                              HasLeaderLines: OleVariant; lcid: Integer); safecall;
    function Arcs(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_Area3DGroup(lcid: Integer): ChartGroup; safecall;
    function AreaGroups(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    procedure AutoFormat(Gallery: Integer; Format: OleVariant); safecall;
    function Get_AutoScaling(lcid: Integer): WordBool; safecall;
    procedure Set_AutoScaling(lcid: Integer; RHS: WordBool); safecall;
    function Axes(Type_: OleVariant; AxisGroup: XlAxisGroup; lcid: Integer): IDispatch; safecall;
    procedure SetBackgroundPicture(const Filename: WideString); safecall;
    function Get_Bar3DGroup(lcid: Integer): ChartGroup; safecall;
    function BarGroups(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Buttons(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_ChartArea(lcid: Integer): ChartArea; safecall;
    function ChartGroups(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function ChartObjects(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_ChartTitle(lcid: Integer): ChartTitle; safecall;
    procedure ChartWizard(Source: OleVariant; Gallery: OleVariant; Format: OleVariant; 
                          PlotBy: OleVariant; CategoryLabels: OleVariant; SeriesLabels: OleVariant; 
                          HasLegend: OleVariant; Title: OleVariant; CategoryTitle: OleVariant; 
                          ValueTitle: OleVariant; ExtraTitle: OleVariant; lcid: Integer); safecall;
    function CheckBoxes(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant; lcid: Integer); safecall;
    function Get_Column3DGroup(lcid: Integer): ChartGroup; safecall;
    function ColumnGroups(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat; 
                          Size: XlPictureAppearance; lcid: Integer); safecall;
    function Get_Corners(lcid: Integer): Corners; safecall;
    procedure CreatePublisher(Edition: OleVariant; Appearance: XlPictureAppearance; 
                              Size: XlPictureAppearance; ContainsPICT: OleVariant; 
                              ContainsBIFF: OleVariant; ContainsRTF: OleVariant; 
                              ContainsVALU: OleVariant; lcid: Integer); safecall;
    function Get_DataTable: DataTable; safecall;
    function Get_DepthPercent(lcid: Integer): Integer; safecall;
    procedure Set_DepthPercent(lcid: Integer; RHS: Integer); safecall;
    procedure Deselect(lcid: Integer); safecall;
    function Get_DisplayBlanksAs(lcid: Integer): XlDisplayBlanksAs; safecall;
    procedure Set_DisplayBlanksAs(lcid: Integer; RHS: XlDisplayBlanksAs); safecall;
    function DoughnutGroups(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Drawings(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function DrawingObjects(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function DropDowns(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_Elevation(lcid: Integer): Integer; safecall;
    procedure Set_Elevation(lcid: Integer; RHS: Integer); safecall;
    function Evaluate(Name: OleVariant; lcid: Integer): OleVariant; safecall;
    function _Evaluate(Name: OleVariant; lcid: Integer): OleVariant; safecall;
    function Get_Floor(lcid: Integer): Floor; safecall;
    function Get_GapDepth(lcid: Integer): Integer; safecall;
    procedure Set_GapDepth(lcid: Integer; RHS: Integer); safecall;
    function GroupBoxes(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function GroupObjects(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_HasAxis(Index1: OleVariant; Index2: OleVariant; lcid: Integer): OleVariant; safecall;
    procedure Set_HasAxis(Index1: OleVariant; Index2: OleVariant; lcid: Integer; RHS: OleVariant); safecall;
    function Get_HasDataTable: WordBool; safecall;
    procedure Set_HasDataTable(RHS: WordBool); safecall;
    function Get_HasLegend(lcid: Integer): WordBool; safecall;
    procedure Set_HasLegend(lcid: Integer; RHS: WordBool); safecall;
    function Get_HasTitle(lcid: Integer): WordBool; safecall;
    procedure Set_HasTitle(lcid: Integer; RHS: WordBool); safecall;
    function Get_HeightPercent(lcid: Integer): Integer; safecall;
    procedure Set_HeightPercent(lcid: Integer; RHS: Integer); safecall;
    function Get_Hyperlinks: Hyperlinks; safecall;
    function Labels(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_Legend(lcid: Integer): Legend; safecall;
    function Get_Line3DGroup(lcid: Integer): ChartGroup; safecall;
    function LineGroups(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Lines(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function ListBoxes(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Location(Where: XlChartLocation; Name: OleVariant): Chart; safecall;
    function OLEObjects(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function OptionButtons(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Ovals(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    procedure Paste(Type_: OleVariant; lcid: Integer); safecall;
    function Get_Perspective(lcid: Integer): Integer; safecall;
    procedure Set_Perspective(lcid: Integer; RHS: Integer); safecall;
    function Pictures(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_Pie3DGroup(lcid: Integer): ChartGroup; safecall;
    function PieGroups(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_PlotArea(lcid: Integer): PlotArea; safecall;
    function Get_PlotVisibleOnly(lcid: Integer): WordBool; safecall;
    procedure Set_PlotVisibleOnly(lcid: Integer; RHS: WordBool); safecall;
    function RadarGroups(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Rectangles(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_RightAngleAxes(lcid: Integer): OleVariant; safecall;
    procedure Set_RightAngleAxes(lcid: Integer; RHS: OleVariant); safecall;
    function Get_Rotation(lcid: Integer): OleVariant; safecall;
    procedure Set_Rotation(lcid: Integer; RHS: OleVariant); safecall;
    function ScrollBars(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function SeriesCollection(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_SizeWithWindow(lcid: Integer): WordBool; safecall;
    procedure Set_SizeWithWindow(lcid: Integer; RHS: WordBool); safecall;
    function Get_ShowWindow: WordBool; safecall;
    procedure Set_ShowWindow(RHS: WordBool); safecall;
    function Spinners(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_SubType(lcid: Integer): Integer; safecall;
    procedure Set_SubType(lcid: Integer; RHS: Integer); safecall;
    function Get_SurfaceGroup(lcid: Integer): ChartGroup; safecall;
    function TextBoxes(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_Type_(lcid: Integer): Integer; safecall;
    procedure Set_Type_(lcid: Integer; RHS: Integer); safecall;
    function Get_ChartType: XlChartType; safecall;
    procedure Set_ChartType(RHS: XlChartType); safecall;
    procedure ApplyCustomType(ChartType: XlChartType; TypeName: OleVariant); safecall;
    function Get_Walls(lcid: Integer): Walls; safecall;
    function Get_WallsAndGridlines2D(lcid: Integer): WordBool; safecall;
    procedure Set_WallsAndGridlines2D(lcid: Integer; RHS: WordBool); safecall;
    function XYGroups(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_BarShape: XlBarShape; safecall;
    procedure Set_BarShape(RHS: XlBarShape); safecall;
    function Get_PlotBy: XlRowCol; safecall;
    procedure Set_PlotBy(RHS: XlRowCol); safecall;
    procedure CopyChartBuild; safecall;
    function Get_ProtectFormatting: WordBool; safecall;
    procedure Set_ProtectFormatting(RHS: WordBool); safecall;
    function Get_ProtectData: WordBool; safecall;
    procedure Set_ProtectData(RHS: WordBool); safecall;
    function Get_ProtectGoalSeek: WordBool; safecall;
    procedure Set_ProtectGoalSeek(RHS: WordBool); safecall;
    function Get_ProtectSelection: WordBool; safecall;
    procedure Set_ProtectSelection(RHS: WordBool); safecall;
    procedure GetChartElement(X: Integer; Y: Integer; var ElementID: Integer; var Arg1: Integer; 
                              var Arg2: Integer); safecall;
    procedure SetSourceData(const Source: Range; PlotBy: OleVariant); safecall;
    function Export(const Filename: WideString; FilterName: OleVariant; Interactive: OleVariant): WordBool; safecall;
    procedure Refresh; safecall;
    property Application_: Application_ read Get_Application_;
    property Creator: XlCreator read Get_Creator;
    property Parent: IDispatch read Get_Parent;
    property CodeName: WideString read Get_CodeName;
    property _CodeName: WideString read Get__CodeName write Set__CodeName;
    property Index[lcid: Integer]: Integer read Get_Index;
    property Name: WideString read Get_Name write Set_Name;
    property Next: IDispatch read Get_Next;
    property OnDoubleClick[lcid: Integer]: WideString read Get_OnDoubleClick write Set_OnDoubleClick;
    property OnSheetActivate[lcid: Integer]: WideString read Get_OnSheetActivate write Set_OnSheetActivate;
    property OnSheetDeactivate[lcid: Integer]: WideString read Get_OnSheetDeactivate write Set_OnSheetDeactivate;
    property PageSetup: PageSetup read Get_PageSetup;
    property Previous: IDispatch read Get_Previous;
    property ProtectContents[lcid: Integer]: WordBool read Get_ProtectContents;
    property ProtectDrawingObjects[lcid: Integer]: WordBool read Get_ProtectDrawingObjects;
    property ProtectionMode[lcid: Integer]: WordBool read Get_ProtectionMode;
    property Visible[lcid: Integer]: XlSheetVisibility read Get_Visible write Set_Visible;
    property Shapes: Shapes read Get_Shapes;
    property Area3DGroup[lcid: Integer]: ChartGroup read Get_Area3DGroup;
    property AutoScaling[lcid: Integer]: WordBool read Get_AutoScaling write Set_AutoScaling;
    property Bar3DGroup[lcid: Integer]: ChartGroup read Get_Bar3DGroup;
    property ChartArea[lcid: Integer]: ChartArea read Get_ChartArea;
    property ChartTitle[lcid: Integer]: ChartTitle read Get_ChartTitle;
    property Column3DGroup[lcid: Integer]: ChartGroup read Get_Column3DGroup;
    property Corners[lcid: Integer]: Corners read Get_Corners;
    property DataTable: DataTable read Get_DataTable;
    property DepthPercent[lcid: Integer]: Integer read Get_DepthPercent write Set_DepthPercent;
    property DisplayBlanksAs[lcid: Integer]: XlDisplayBlanksAs read Get_DisplayBlanksAs write Set_DisplayBlanksAs;
    property Elevation[lcid: Integer]: Integer read Get_Elevation write Set_Elevation;
    property Floor[lcid: Integer]: Floor read Get_Floor;
    property GapDepth[lcid: Integer]: Integer read Get_GapDepth write Set_GapDepth;
    property HasAxis[Index1: OleVariant; Index2: OleVariant; lcid: Integer]: OleVariant read Get_HasAxis write Set_HasAxis;
    property HasDataTable: WordBool read Get_HasDataTable write Set_HasDataTable;
    property HasLegend[lcid: Integer]: WordBool read Get_HasLegend write Set_HasLegend;
    property HasTitle[lcid: Integer]: WordBool read Get_HasTitle write Set_HasTitle;
    property HeightPercent[lcid: Integer]: Integer read Get_HeightPercent write Set_HeightPercent;
    property Hyperlinks: Hyperlinks read Get_Hyperlinks;
    property Legend[lcid: Integer]: Legend read Get_Legend;
    property Line3DGroup[lcid: Integer]: ChartGroup read Get_Line3DGroup;
    property Perspective[lcid: Integer]: Integer read Get_Perspective write Set_Perspective;
    property Pie3DGroup[lcid: Integer]: ChartGroup read Get_Pie3DGroup;
    property PlotArea[lcid: Integer]: PlotArea read Get_PlotArea;
    property PlotVisibleOnly[lcid: Integer]: WordBool read Get_PlotVisibleOnly write Set_PlotVisibleOnly;
    property RightAngleAxes[lcid: Integer]: OleVariant read Get_RightAngleAxes write Set_RightAngleAxes;
    property Rotation[lcid: Integer]: OleVariant read Get_Rotation write Set_Rotation;
    property SizeWithWindow[lcid: Integer]: WordBool read Get_SizeWithWindow write Set_SizeWithWindow;
    property ShowWindow: WordBool read Get_ShowWindow write Set_ShowWindow;
    property SubType[lcid: Integer]: Integer read Get_SubType write Set_SubType;
    property SurfaceGroup[lcid: Integer]: ChartGroup read Get_SurfaceGroup;
    property Type_[lcid: Integer]: Integer read Get_Type_ write Set_Type_;
    property ChartType: XlChartType read Get_ChartType write Set_ChartType;
    property Walls[lcid: Integer]: Walls read Get_Walls;
    property WallsAndGridlines2D[lcid: Integer]: WordBool read Get_WallsAndGridlines2D write Set_WallsAndGridlines2D;
    property BarShape: XlBarShape read Get_BarShape write Set_BarShape;
    property PlotBy: XlRowCol read Get_PlotBy write Set_PlotBy;
    property ProtectFormatting: WordBool read Get_ProtectFormatting write Set_ProtectFormatting;
    property ProtectData: WordBool read Get_ProtectData write Set_ProtectData;
    property ProtectGoalSeek: WordBool read Get_ProtectGoalSeek write Set_ProtectGoalSeek;
    property ProtectSelection: WordBool read Get_ProtectSelection write Set_ProtectSelection;
  end;

// *********************************************************************//
// Interface: Sheets
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000208D7-0000-0000-C000-000000000046}
// *********************************************************************//
  Sheets = interface(IDispatch)
    ['{000208D7-0000-0000-C000-000000000046}']
    function Get_Application_: Application_; safecall;
    function Get_Creator: XlCreator; safecall;
    function Get_Parent: IDispatch; safecall;
    function Add(Before: OleVariant; After: OleVariant; Count: OleVariant; Type_: OleVariant; 
                 lcid: Integer): IDispatch; safecall;
    procedure Copy(Before: OleVariant; After: OleVariant; lcid: Integer); safecall;
    function Get_Count: Integer; safecall;
    procedure Delete(lcid: Integer); safecall;
    procedure FillAcrossSheets(const Range: Range; Type_: XlFillWith; lcid: Integer); safecall;
    function Get_Item(Index: OleVariant): IDispatch; safecall;
    procedure Move(Before: OleVariant; After: OleVariant; lcid: Integer); safecall;
    function Get__NewEnum: IUnknown; safecall;
    procedure PrintOut(From: OleVariant; To_: OleVariant; Copies: OleVariant; Preview: OleVariant; 
                       ActivePrinter: OleVariant; PrintToFile: OleVariant; Collate: OleVariant; 
                       lcid: Integer); safecall;
    procedure PrintPreview(EnableChanges: OleVariant; lcid: Integer); safecall;
    procedure Select(Replace: OleVariant; lcid: Integer); safecall;
    function Get_HPageBreaks: HPageBreaks; safecall;
    function Get_VPageBreaks: VPageBreaks; safecall;
    function Get_Visible(lcid: Integer): OleVariant; safecall;
    procedure Set_Visible(lcid: Integer; RHS: OleVariant); safecall;
    function Get__Default(Index: OleVariant): IDispatch; safecall;
    property Application_: Application_ read Get_Application_;
    property Creator: XlCreator read Get_Creator;
    property Parent: IDispatch read Get_Parent;
    property Count: Integer read Get_Count;
    property Item[Index: OleVariant]: IDispatch read Get_Item;
    property _NewEnum: IUnknown read Get__NewEnum;
    property HPageBreaks: HPageBreaks read Get_HPageBreaks;
    property VPageBreaks: VPageBreaks read Get_VPageBreaks;
    property Visible[lcid: Integer]: OleVariant read Get_Visible write Set_Visible;
    property _Default[Index: OleVariant]: IDispatch read Get__Default;
  end;

// *********************************************************************//
// Interface: IVPageBreak
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024402-0001-0000-C000-000000000046}
// *********************************************************************//
  IVPageBreak = interface(IDispatch)
    ['{00024402-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: Worksheet; stdcall;
    function Delete: HResult; stdcall;
    function DragOff(Direction: XlDirection; RegionIndex: Integer): HResult; stdcall;
    function Get_Type_: XlPageBreak; stdcall;
    function Set_Type_(RHS: XlPageBreak): HResult; stdcall;
    function Get_Extent: XlPageBreakExtent; stdcall;
    function Get_Location: Range; stdcall;
    function Set_Location(const RHS: Range): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IHPageBreak
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024401-0001-0000-C000-000000000046}
// *********************************************************************//
  IHPageBreak = interface(IDispatch)
    ['{00024401-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: Worksheet; stdcall;
    function Delete: HResult; stdcall;
    function DragOff(Direction: XlDirection; RegionIndex: Integer): HResult; stdcall;
    function Get_Type_: XlPageBreak; stdcall;
    function Set_Type_(RHS: XlPageBreak): HResult; stdcall;
    function Get_Extent: XlPageBreakExtent; stdcall;
    function Get_Location: Range; stdcall;
    function Set_Location(const RHS: Range): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IHPageBreaks
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024404-0001-0000-C000-000000000046}
// *********************************************************************//
  IHPageBreaks = interface(IDispatch)
    ['{00024404-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Count: Integer; stdcall;
    function Get_Item(Index: Integer): HPageBreak; stdcall;
    function Get__Default(Index: Integer): HPageBreak; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
    function Add(const Before: IDispatch): HPageBreak; stdcall;
  end;

// *********************************************************************//
// Interface: IVPageBreaks
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024405-0001-0000-C000-000000000046}
// *********************************************************************//
  IVPageBreaks = interface(IDispatch)
    ['{00024405-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Count: Integer; stdcall;
    function Get_Item(Index: Integer): VPageBreak; stdcall;
    function Get__Default(Index: Integer): VPageBreak; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
    function Add(const Before: IDispatch): VPageBreak; stdcall;
  end;

// *********************************************************************//
// Interface: IRecentFile
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024407-0001-0000-C000-000000000046}
// *********************************************************************//
  IRecentFile = interface(IDispatch)
    ['{00024407-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Name: WideString; stdcall;
    function Get_Path: WideString; stdcall;
    function Get_Index: Integer; stdcall;
    function Open: Workbook; stdcall;
    function Delete: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IRecentFiles
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024406-0001-0000-C000-000000000046}
// *********************************************************************//
  IRecentFiles = interface(IDispatch)
    ['{00024406-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Maximum: Integer; stdcall;
    function Set_Maximum(RHS: Integer): HResult; stdcall;
    function Get_Count: Integer; stdcall;
    function Get_Item(Index: Integer): RecentFile; stdcall;
    function Get__Default(Index: Integer): RecentFile; stdcall;
    function Add(const Name: WideString): RecentFile; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IDocEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024411-0001-0000-C000-000000000046}
// *********************************************************************//
  IDocEvents = interface(IDispatch)
    ['{00024411-0001-0000-C000-000000000046}']
    function SelectionChange(const Target: Range): HResult; stdcall;
    function BeforeDoubleClick(const Target: Range; var Cancel: WordBool): HResult; stdcall;
    function BeforeRightClick(const Target: Range; var Cancel: WordBool): HResult; stdcall;
    function Activate: HResult; stdcall;
    function Deactivate: HResult; stdcall;
    function Calculate: HResult; stdcall;
    function Change(const Target: Range): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: _Worksheet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000208D8-0000-0000-C000-000000000046}
// *********************************************************************//
  _Worksheet = interface(IDispatch)
    ['{000208D8-0000-0000-C000-000000000046}']
    function Get_Application_: Application_; safecall;
    function Get_Creator: XlCreator; safecall;
    function Get_Parent: IDispatch; safecall;
    procedure Activate(lcid: Integer); safecall;
    procedure Copy(Before: OleVariant; After: OleVariant; lcid: Integer); safecall;
    procedure Delete(lcid: Integer); safecall;
    function Get_CodeName: WideString; safecall;
    function Get__CodeName: WideString; safecall;
    procedure Set__CodeName(const RHS: WideString); safecall;
    function Get_Index(lcid: Integer): Integer; safecall;
    procedure Move(Before: OleVariant; After: OleVariant; lcid: Integer); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const RHS: WideString); safecall;
    function Get_Next: IDispatch; safecall;
    function Get_OnDoubleClick(lcid: Integer): WideString; safecall;
    procedure Set_OnDoubleClick(lcid: Integer; const RHS: WideString); safecall;
    function Get_OnSheetActivate(lcid: Integer): WideString; safecall;
    procedure Set_OnSheetActivate(lcid: Integer; const RHS: WideString); safecall;
    function Get_OnSheetDeactivate(lcid: Integer): WideString; safecall;
    procedure Set_OnSheetDeactivate(lcid: Integer; const RHS: WideString); safecall;
    function Get_PageSetup: PageSetup; safecall;
    function Get_Previous: IDispatch; safecall;
    procedure PrintOut(From: OleVariant; To_: OleVariant; Copies: OleVariant; Preview: OleVariant; 
                       ActivePrinter: OleVariant; PrintToFile: OleVariant; Collate: OleVariant; 
                       lcid: Integer); safecall;
    procedure PrintPreview(EnableChanges: OleVariant; lcid: Integer); safecall;
    procedure Protect(Password: OleVariant; DrawingObjects: OleVariant; Contents: OleVariant; 
                      Scenarios: OleVariant; UserInterfaceOnly: OleVariant; lcid: Integer); safecall;
    function Get_ProtectContents(lcid: Integer): WordBool; safecall;
    function Get_ProtectDrawingObjects(lcid: Integer): WordBool; safecall;
    function Get_ProtectionMode(lcid: Integer): WordBool; safecall;
    function Get_ProtectScenarios(lcid: Integer): WordBool; safecall;
    procedure SaveAs(const Filename: WideString; FileFormat: OleVariant; Password: OleVariant; 
                     WriteResPassword: OleVariant; ReadOnlyRecommended: OleVariant; 
                     CreateBackup: OleVariant; AddToMru: OleVariant; TextCodepage: OleVariant; 
                     TextVisualLayout: OleVariant; lcid: Integer); safecall;
    procedure Select(Replace: OleVariant; lcid: Integer); safecall;
    procedure Unprotect(Password: OleVariant; lcid: Integer); safecall;
    function Get_Visible(lcid: Integer): XlSheetVisibility; safecall;
    procedure Set_Visible(lcid: Integer; RHS: XlSheetVisibility); safecall;
    function Get_Shapes: Shapes; safecall;
    function Get_TransitionExpEval(lcid: Integer): WordBool; safecall;
    procedure Set_TransitionExpEval(lcid: Integer; RHS: WordBool); safecall;
    function Arcs(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_AutoFilterMode(lcid: Integer): WordBool; safecall;
    procedure Set_AutoFilterMode(lcid: Integer; RHS: WordBool); safecall;
    procedure SetBackgroundPicture(const Filename: WideString); safecall;
    function Buttons(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    procedure Calculate(lcid: Integer); safecall;
    function Get_EnableCalculation: WordBool; safecall;
    procedure Set_EnableCalculation(RHS: WordBool); safecall;
    function Get_Cells: Range; safecall;
    function ChartObjects(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function CheckBoxes(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant; lcid: Integer); safecall;
    function Get_CircularReference(lcid: Integer): Range; safecall;
    procedure ClearArrows(lcid: Integer); safecall;
    function Get_Columns: Range; safecall;
    function Get_ConsolidationFunction(lcid: Integer): XlConsolidationFunction; safecall;
    function Get_ConsolidationOptions(lcid: Integer): OleVariant; safecall;
    function Get_ConsolidationSources(lcid: Integer): OleVariant; safecall;
    function Get_DisplayAutomaticPageBreaks(lcid: Integer): WordBool; safecall;
    procedure Set_DisplayAutomaticPageBreaks(lcid: Integer; RHS: WordBool); safecall;
    function Drawings(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function DrawingObjects(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function DropDowns(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_EnableAutoFilter(lcid: Integer): WordBool; safecall;
    procedure Set_EnableAutoFilter(lcid: Integer; RHS: WordBool); safecall;
    function Get_EnableSelection: XlEnableSelection; safecall;
    procedure Set_EnableSelection(RHS: XlEnableSelection); safecall;
    function Get_EnableOutlining(lcid: Integer): WordBool; safecall;
    procedure Set_EnableOutlining(lcid: Integer; RHS: WordBool); safecall;
    function Get_EnablePivotTable(lcid: Integer): WordBool; safecall;
    procedure Set_EnablePivotTable(lcid: Integer; RHS: WordBool); safecall;
    function Evaluate(Name: OleVariant; lcid: Integer): OleVariant; safecall;
    function _Evaluate(Name: OleVariant; lcid: Integer): OleVariant; safecall;
    function Get_FilterMode(lcid: Integer): WordBool; safecall;
    procedure ResetAllPageBreaks; safecall;
    function GroupBoxes(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function GroupObjects(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Labels(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Lines(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function ListBoxes(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_Names: Names; safecall;
    function OLEObjects(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_OnCalculate(lcid: Integer): WideString; safecall;
    procedure Set_OnCalculate(lcid: Integer; const RHS: WideString); safecall;
    function Get_OnData(lcid: Integer): WideString; safecall;
    procedure Set_OnData(lcid: Integer; const RHS: WideString); safecall;
    function Get_OnEntry(lcid: Integer): WideString; safecall;
    procedure Set_OnEntry(lcid: Integer; const RHS: WideString); safecall;
    function OptionButtons(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_Outline: Outline; safecall;
    function Ovals(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    procedure Paste(Destination: OleVariant; Link: OleVariant; lcid: Integer); safecall;
    procedure PasteSpecial(Format: OleVariant; Link: OleVariant; DisplayAsIcon: OleVariant; 
                           IconFileName: OleVariant; IconIndex: OleVariant; IconLabel: OleVariant; 
                           lcid: Integer); safecall;
    function Pictures(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function PivotTables(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function PivotTableWizard(SourceType: OleVariant; SourceData: OleVariant; 
                              TableDestination: OleVariant; TableName: OleVariant; 
                              RowGrand: OleVariant; ColumnGrand: OleVariant; SaveData: OleVariant; 
                              HasAutoFormat: OleVariant; AutoPage: OleVariant; 
                              Reserved: OleVariant; BackgroundQuery: OleVariant; 
                              OptimizeCache: OleVariant; PageFieldOrder: OleVariant; 
                              PageFieldWrapCount: OleVariant; ReadData: OleVariant; 
                              Connection: OleVariant; lcid: Integer): PivotTable; safecall;
    function Get_Range(Cell1: OleVariant; Cell2: OleVariant): Range; safecall;
    function Rectangles(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_Rows: Range; safecall;
    function Scenarios(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_ScrollArea: WideString; safecall;
    procedure Set_ScrollArea(const RHS: WideString); safecall;
    function ScrollBars(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    procedure ShowAllData(lcid: Integer); safecall;
    procedure ShowDataForm(lcid: Integer); safecall;
    function Spinners(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_StandardHeight(lcid: Integer): Double; safecall;
    function Get_StandardWidth(lcid: Integer): Double; safecall;
    procedure Set_StandardWidth(lcid: Integer; RHS: Double); safecall;
    function TextBoxes(Index: OleVariant; lcid: Integer): IDispatch; safecall;
    function Get_TransitionFormEntry(lcid: Integer): WordBool; safecall;
    procedure Set_TransitionFormEntry(lcid: Integer; RHS: WordBool); safecall;
    function Get_Type_(lcid: Integer): XlSheetType; safecall;
    function Get_UsedRange(lcid: Integer): Range; safecall;
    function Get_HPageBreaks: HPageBreaks; safecall;
    function Get_VPageBreaks: VPageBreaks; safecall;
    function Get_QueryTables: QueryTables; safecall;
    function Get_DisplayPageBreaks: WordBool; safecall;
    procedure Set_DisplayPageBreaks(RHS: WordBool); safecall;
    function Get_Comments: Comments; safecall;
    function Get_Hyperlinks: Hyperlinks; safecall;
    procedure ClearCircles; safecall;
    procedure CircleInvalid; safecall;
    function Get_DisplayRightToLeft(lcid: Integer): Integer; safecall;
    procedure Set_DisplayRightToLeft(lcid: Integer; RHS: Integer); safecall;
    function Get_AutoFilter: AutoFilter; safecall;
    property Application_: Application_ read Get_Application_;
    property Creator: XlCreator read Get_Creator;
    property Parent: IDispatch read Get_Parent;
    property CodeName: WideString read Get_CodeName;
    property _CodeName: WideString read Get__CodeName write Set__CodeName;
    property Index[lcid: Integer]: Integer read Get_Index;
    property Name: WideString read Get_Name write Set_Name;
    property Next: IDispatch read Get_Next;
    property OnDoubleClick[lcid: Integer]: WideString read Get_OnDoubleClick write Set_OnDoubleClick;
    property OnSheetActivate[lcid: Integer]: WideString read Get_OnSheetActivate write Set_OnSheetActivate;
    property OnSheetDeactivate[lcid: Integer]: WideString read Get_OnSheetDeactivate write Set_OnSheetDeactivate;
    property PageSetup: PageSetup read Get_PageSetup;
    property Previous: IDispatch read Get_Previous;
    property ProtectContents[lcid: Integer]: WordBool read Get_ProtectContents;
    property ProtectDrawingObjects[lcid: Integer]: WordBool read Get_ProtectDrawingObjects;
    property ProtectionMode[lcid: Integer]: WordBool read Get_ProtectionMode;
    property ProtectScenarios[lcid: Integer]: WordBool read Get_ProtectScenarios;
    property Visible[lcid: Integer]: XlSheetVisibility read Get_Visible write Set_Visible;
    property Shapes: Shapes read Get_Shapes;
    property TransitionExpEval[lcid: Integer]: WordBool read Get_TransitionExpEval write Set_TransitionExpEval;
    property AutoFilterMode[lcid: Integer]: WordBool read Get_AutoFilterMode write Set_AutoFilterMode;
    property EnableCalculation: WordBool read Get_EnableCalculation write Set_EnableCalculation;
    property Cells: Range read Get_Cells;
    property CircularReference[lcid: Integer]: Range read Get_CircularReference;
    property Columns: Range read Get_Columns;
    property ConsolidationFunction[lcid: Integer]: XlConsolidationFunction read Get_ConsolidationFunction;
    property ConsolidationOptions[lcid: Integer]: OleVariant read Get_ConsolidationOptions;
    property ConsolidationSources[lcid: Integer]: OleVariant read Get_ConsolidationSources;
    property DisplayAutomaticPageBreaks[lcid: Integer]: WordBool read Get_DisplayAutomaticPageBreaks write Set_DisplayAutomaticPageBreaks;
    property EnableAutoFilter[lcid: Integer]: WordBool read Get_EnableAutoFilter write Set_EnableAutoFilter;
    property EnableSelection: XlEnableSelection read Get_EnableSelection write Set_EnableSelection;
    property EnableOutlining[lcid: Integer]: WordBool read Get_EnableOutlining write Set_EnableOutlining;
    property EnablePivotTable[lcid: Integer]: WordBool read Get_EnablePivotTable write Set_EnablePivotTable;
    property FilterMode[lcid: Integer]: WordBool read Get_FilterMode;
    property Names: Names read Get_Names;
    property OnCalculate[lcid: Integer]: WideString read Get_OnCalculate write Set_OnCalculate;
    property OnData[lcid: Integer]: WideString read Get_OnData write Set_OnData;
    property OnEntry[lcid: Integer]: WideString read Get_OnEntry write Set_OnEntry;
    property Outline: Outline read Get_Outline;
    property Range[Cell1: OleVariant; Cell2: OleVariant]: Range read Get_Range;
    property Rows: Range read Get_Rows;
    property ScrollArea: WideString read Get_ScrollArea write Set_ScrollArea;
    property StandardHeight[lcid: Integer]: Double read Get_StandardHeight;
    property StandardWidth[lcid: Integer]: Double read Get_StandardWidth write Set_StandardWidth;
    property TransitionFormEntry[lcid: Integer]: WordBool read Get_TransitionFormEntry write Set_TransitionFormEntry;
    property Type_[lcid: Integer]: XlSheetType read Get_Type_;
    property UsedRange[lcid: Integer]: Range read Get_UsedRange;
    property HPageBreaks: HPageBreaks read Get_HPageBreaks;
    property VPageBreaks: VPageBreaks read Get_VPageBreaks;
    property QueryTables: QueryTables read Get_QueryTables;
    property DisplayPageBreaks: WordBool read Get_DisplayPageBreaks write Set_DisplayPageBreaks;
    property Comments: Comments read Get_Comments;
    property Hyperlinks: Hyperlinks read Get_Hyperlinks;
    property DisplayRightToLeft[lcid: Integer]: Integer read Get_DisplayRightToLeft write Set_DisplayRightToLeft;
    property AutoFilter: AutoFilter read Get_AutoFilter;
  end;

// *********************************************************************//
// Interface: IStyle
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020852-0001-0000-C000-000000000046}
// *********************************************************************//
  IStyle = interface(IDispatch)
    ['{00020852-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_AddIndent: WordBool; stdcall;
    function Set_AddIndent(RHS: WordBool): HResult; stdcall;
    function Get_BuiltIn: WordBool; stdcall;
    function Get_Borders: Borders; stdcall;
    function Delete: HResult; stdcall;
    function Get_Font: Font; stdcall;
    function Get_FormulaHidden: WordBool; stdcall;
    function Set_FormulaHidden(RHS: WordBool): HResult; stdcall;
    function Get_HorizontalAlignment: XlHAlign; stdcall;
    function Set_HorizontalAlignment(RHS: XlHAlign): HResult; stdcall;
    function Get_IncludeAlignment: WordBool; stdcall;
    function Set_IncludeAlignment(RHS: WordBool): HResult; stdcall;
    function Get_IncludeBorder: WordBool; stdcall;
    function Set_IncludeBorder(RHS: WordBool): HResult; stdcall;
    function Get_IncludeFont: WordBool; stdcall;
    function Set_IncludeFont(RHS: WordBool): HResult; stdcall;
    function Get_IncludeNumber: WordBool; stdcall;
    function Set_IncludeNumber(RHS: WordBool): HResult; stdcall;
    function Get_IncludePatterns: WordBool; stdcall;
    function Set_IncludePatterns(RHS: WordBool): HResult; stdcall;
    function Get_IncludeProtection: WordBool; stdcall;
    function Set_IncludeProtection(RHS: WordBool): HResult; stdcall;
    function Get_IndentLevel: Integer; stdcall;
    function Set_IndentLevel(RHS: Integer): HResult; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    function Get_MergeCells: OleVariant; stdcall;
    function Set_MergeCells(RHS: OleVariant): HResult; stdcall;
    function Get_Name(lcid: Integer): WideString; stdcall;
    function Get_NameLocal: WideString; stdcall;
    function Get_NumberFormat: WideString; stdcall;
    function Set_NumberFormat(const RHS: WideString): HResult; stdcall;
    function Get_NumberFormatLocal: WideString; stdcall;
    function Set_NumberFormatLocal(const RHS: WideString): HResult; stdcall;
    function Get_Orientation: XlOrientation; stdcall;
    function Set_Orientation(RHS: XlOrientation): HResult; stdcall;
    function Get_ShrinkToFit: WordBool; stdcall;
    function Set_ShrinkToFit(RHS: WordBool): HResult; stdcall;
    function Get_Value(lcid: Integer): WideString; stdcall;
    function Get_VerticalAlignment: XlVAlign; stdcall;
    function Set_VerticalAlignment(RHS: XlVAlign): HResult; stdcall;
    function Get_WrapText: WordBool; stdcall;
    function Set_WrapText(RHS: WordBool): HResult; stdcall;
    function Get__Default(lcid: Integer): WideString; stdcall;
    function Get_ReadingOrder: Integer; stdcall;
    function Set_ReadingOrder(RHS: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IStyles
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020853-0001-0000-C000-000000000046}
// *********************************************************************//
  IStyles = interface(IDispatch)
    ['{00020853-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Add(const Name: WideString; BasedOn: OleVariant): Style; stdcall;
    function Get_Count: Integer; stdcall;
    function Get_Item(Index: OleVariant; lcid: Integer): Style; stdcall;
    function Merge(Workbook: OleVariant): HResult; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
    function Get__Default(Index: OleVariant; lcid: Integer): Style; stdcall;
  end;

// *********************************************************************//
// Interface: IBorders
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020855-0001-0000-C000-000000000046}
// *********************************************************************//
  IBorders = interface(IDispatch)
    ['{00020855-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Color: OleVariant; stdcall;
    function Set_Color(RHS: OleVariant): HResult; stdcall;
    function Get_ColorIndex: OleVariant; stdcall;
    function Set_ColorIndex(RHS: OleVariant): HResult; stdcall;
    function Get_Count: Integer; stdcall;
    function Get_Item(Index: XlBordersIndex): Border; stdcall;
    function Get_LineStyle: OleVariant; stdcall;
    function Set_LineStyle(RHS: OleVariant): HResult; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
    function Get_Value: OleVariant; stdcall;
    function Set_Value(RHS: OleVariant): HResult; stdcall;
    function Get_Weight: OleVariant; stdcall;
    function Set_Weight(RHS: OleVariant): HResult; stdcall;
    function Get__Default(Index: XlBordersIndex): Border; stdcall;
  end;

// *********************************************************************//
// Interface: _Global
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000208D9-0000-0000-C000-000000000046}
// *********************************************************************//
  _Global = interface(IDispatch)
    ['{000208D9-0000-0000-C000-000000000046}']
    function Get_Application_: Application_; safecall;
    function Get_Creator: XlCreator; safecall;
    function Get_Parent: Application_; safecall;
    function Get_ActiveCell: Range; safecall;
    function Get_ActiveChart: Chart; safecall;
    function Get_ActiveDialog: DialogSheet; safecall;
    function Get_ActiveMenuBar: MenuBar; safecall;
    function Get_ActivePrinter(lcid: Integer): WideString; safecall;
    procedure Set_ActivePrinter(lcid: Integer; const RHS: WideString); safecall;
    function Get_ActiveSheet: IDispatch; safecall;
    function Get_ActiveWindow: Window_; safecall;
    function Get_ActiveWorkbook: Workbook; safecall;
    function Get_AddIns: AddIns; safecall;
    function Get_Assistant: Assistant; safecall;
    procedure Calculate(lcid: Integer); safecall;
    function Get_Cells: Range; safecall;
    function Get_Charts: Sheets; safecall;
    function Get_Columns: Range; safecall;
    function Get_CommandBars: CommandBars; safecall;
    function Get_DDEAppReturnCode(lcid: Integer): Integer; safecall;
    procedure DDEExecute(Channel: Integer; const String_: WideString; lcid: Integer); safecall;
    function DDEInitiate(const App: WideString; const Topic: WideString; lcid: Integer): Integer; safecall;
    procedure DDEPoke(Channel: Integer; Item: OleVariant; Data: OleVariant; lcid: Integer); safecall;
    function DDERequest(Channel: Integer; const Item: WideString; lcid: Integer): OleVariant; safecall;
    procedure DDETerminate(Channel: Integer; lcid: Integer); safecall;
    function Get_DialogSheets: Sheets; safecall;
    function Evaluate(Name: OleVariant; lcid: Integer): OleVariant; safecall;
    function _Evaluate(Name: OleVariant; lcid: Integer): OleVariant; safecall;
    function ExecuteExcel4Macro(const String_: WideString; lcid: Integer): OleVariant; safecall;
    function Intersect(const Arg1: Range; const Arg2: Range; Arg3: OleVariant; Arg4: OleVariant; 
                       Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                       Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                       Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                       Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                       Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                       Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                       Arg29: OleVariant; Arg30: OleVariant; lcid: Integer): Range; safecall;
    function Get_MenuBars: MenuBars; safecall;
    function Get_Modules: Modules; safecall;
    function Get_Names: Names; safecall;
    function Get_Range(Cell1: OleVariant; Cell2: OleVariant): Range; safecall;
    function Get_Rows: Range; safecall;
    function Run(Macro: OleVariant; Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; 
                 Arg4: OleVariant; Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; 
                 Arg8: OleVariant; Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; 
                 Arg12: OleVariant; Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; 
                 Arg16: OleVariant; Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; 
                 Arg20: OleVariant; Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; 
                 Arg24: OleVariant; Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; 
                 Arg28: OleVariant; Arg29: OleVariant; Arg30: OleVariant): OleVariant; safecall;
    function _Run2(Macro: OleVariant; Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; 
                   Arg4: OleVariant; Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; 
                   Arg8: OleVariant; Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; 
                   Arg12: OleVariant; Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; 
                   Arg16: OleVariant; Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; 
                   Arg20: OleVariant; Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; 
                   Arg24: OleVariant; Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; 
                   Arg28: OleVariant; Arg29: OleVariant; Arg30: OleVariant; lcid: Integer): OleVariant; safecall;
    function Get_Selection(lcid: Integer): IDispatch; safecall;
    procedure SendKeys(Keys: OleVariant; Wait: OleVariant; lcid: Integer); safecall;
    function Get_Sheets: Sheets; safecall;
    function Get_ShortcutMenus(Index: Integer): Menu; safecall;
    function Get_ThisWorkbook(lcid: Integer): Workbook; safecall;
    function Get_Toolbars: Toolbars; safecall;
    function Union(const Arg1: Range; const Arg2: Range; Arg3: OleVariant; Arg4: OleVariant; 
                   Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                   Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                   Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                   Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                   Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                   Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                   Arg29: OleVariant; Arg30: OleVariant; lcid: Integer): Range; safecall;
    function Get_Windows: DIWindows; safecall;
    function Get_Workbooks: Workbooks; safecall;
    function Get_WorksheetFunction: WorksheetFunction; safecall;
    function Get_Worksheets: Sheets; safecall;
    function Get_Excel4IntlMacroSheets: Sheets; safecall;
    function Get_Excel4MacroSheets: Sheets; safecall;
    property Application_: Application_ read Get_Application_;
    property Creator: XlCreator read Get_Creator;
    property Parent: Application_ read Get_Parent;
    property ActiveCell: Range read Get_ActiveCell;
    property ActiveChart: Chart read Get_ActiveChart;
    property ActiveDialog: DialogSheet read Get_ActiveDialog;
    property ActiveMenuBar: MenuBar read Get_ActiveMenuBar;
    property ActivePrinter[lcid: Integer]: WideString read Get_ActivePrinter write Set_ActivePrinter;
    property ActiveSheet: IDispatch read Get_ActiveSheet;
    property ActiveWindow: Window_ read Get_ActiveWindow;
    property ActiveWorkbook: Workbook read Get_ActiveWorkbook;
    property AddIns: AddIns read Get_AddIns;
    property Assistant: Assistant read Get_Assistant;
    property Cells: Range read Get_Cells;
    property Charts: Sheets read Get_Charts;
    property Columns: Range read Get_Columns;
    property CommandBars: CommandBars read Get_CommandBars;
    property DDEAppReturnCode[lcid: Integer]: Integer read Get_DDEAppReturnCode;
    property DialogSheets: Sheets read Get_DialogSheets;
    property MenuBars: MenuBars read Get_MenuBars;
    property Modules: Modules read Get_Modules;
    property Names: Names read Get_Names;
    property Range[Cell1: OleVariant; Cell2: OleVariant]: Range read Get_Range;
    property Rows: Range read Get_Rows;
    property Selection[lcid: Integer]: IDispatch read Get_Selection;
    property Sheets: Sheets read Get_Sheets;
    property ShortcutMenus[Index: Integer]: Menu read Get_ShortcutMenus;
    property ThisWorkbook[lcid: Integer]: Workbook read Get_ThisWorkbook;
    property Toolbars: Toolbars read Get_Toolbars;
    property Windows: DIWindows read Get_Windows;
    property Workbooks: Workbooks read Get_Workbooks;
    property WorksheetFunction: WorksheetFunction read Get_WorksheetFunction;
    property Worksheets: Sheets read Get_Worksheets;
    property Excel4IntlMacroSheets: Sheets read Get_Excel4IntlMacroSheets;
    property Excel4MacroSheets: Sheets read Get_Excel4MacroSheets;
  end;

// *********************************************************************//
// Interface: IAddIn
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020857-0001-0000-C000-000000000046}
// *********************************************************************//
  IAddIn = interface(IDispatch)
    ['{00020857-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Author: WideString; stdcall;
    function Get_Comments: WideString; stdcall;
    function Get_FullName: WideString; stdcall;
    function Get_Installed: WordBool; stdcall;
    function Set_Installed(RHS: WordBool): HResult; stdcall;
    function Get_Keywords: WideString; stdcall;
    function Get_Name: WideString; stdcall;
    function Get_Path: WideString; stdcall;
    function Get_Subject: WideString; stdcall;
    function Get_Title: WideString; stdcall;
  end;

// *********************************************************************//
// Interface: IAddIns
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020858-0001-0000-C000-000000000046}
// *********************************************************************//
  IAddIns = interface(IDispatch)
    ['{00020858-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Add(const Filename: WideString; CopyFile: OleVariant): AddIn; stdcall;
    function Get_Count: Integer; stdcall;
    function Get_Item(Index: OleVariant): AddIn; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
    function Get__Default(Index: OleVariant): AddIn; stdcall;
  end;

// *********************************************************************//
// Interface: IToolbar
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002085C-0001-0000-C000-000000000046}
// *********************************************************************//
  IToolbar = interface(IDispatch)
    ['{0002085C-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_BuiltIn: WordBool; stdcall;
    function Delete: HResult; stdcall;
    function Get_Height: Integer; stdcall;
    function Set_Height(RHS: Integer): HResult; stdcall;
    function Get_Left: Integer; stdcall;
    function Set_Left(RHS: Integer): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Get_Position: Integer; stdcall;
    function Set_Position(RHS: Integer): HResult; stdcall;
    function Get_Protection: XlToolbarProtection; stdcall;
    function Set_Protection(RHS: XlToolbarProtection): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Get_ToolbarButtons: ToolbarButtons; stdcall;
    function Get_Top: Integer; stdcall;
    function Set_Top(RHS: Integer): HResult; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Integer; stdcall;
    function Set_Width(RHS: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IToolbars
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002085D-0001-0000-C000-000000000046}
// *********************************************************************//
  IToolbars = interface(IDispatch)
    ['{0002085D-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Add(Name: OleVariant): Toolbar; stdcall;
    function Get_Count: Integer; stdcall;
    function Get__Default(Index: OleVariant): Toolbar; stdcall;
    function Get_Item(Index: OleVariant): Toolbar; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IToolbarButton
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002085E-0001-0000-C000-000000000046}
// *********************************************************************//
  IToolbarButton = interface(IDispatch)
    ['{0002085E-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_BuiltIn: WordBool; stdcall;
    function Get_BuiltInFace: WordBool; stdcall;
    function Set_BuiltInFace(RHS: WordBool): HResult; stdcall;
    function Copy(const Toolbar: Toolbar; Before: Integer): HResult; stdcall;
    function CopyFace: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Edit: HResult; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_HelpContextID: Integer; stdcall;
    function Set_HelpContextID(RHS: Integer): HResult; stdcall;
    function Get_HelpFile: WideString; stdcall;
    function Set_HelpFile(const RHS: WideString): HResult; stdcall;
    function Get_Id: Integer; stdcall;
    function Get_IsGap: WordBool; stdcall;
    function Move(const Toolbar: Toolbar; Before: Integer): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function PasteFace: HResult; stdcall;
    function Get_Pushed: WordBool; stdcall;
    function Set_Pushed(RHS: WordBool): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Get_StatusBar: WideString; stdcall;
    function Set_StatusBar(const RHS: WideString): HResult; stdcall;
    function Get_Width: Integer; stdcall;
    function Set_Width(RHS: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IToolbarButtons
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002085F-0001-0000-C000-000000000046}
// *********************************************************************//
  IToolbarButtons = interface(IDispatch)
    ['{0002085F-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Add(Button: OleVariant; Before: OleVariant; OnAction: OleVariant; Pushed: OleVariant; 
                 Enabled: OleVariant; StatusBar: OleVariant; HelpFile: OleVariant; 
                 HelpContextID: OleVariant): ToolbarButton; stdcall;
    function Get_Count: Integer; stdcall;
    function Get_Item(Index: Integer): ToolbarButton; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
    function Get__Default(Index: Integer): ToolbarButton; stdcall;
  end;

// *********************************************************************//
// Interface: IAreas
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020860-0001-0000-C000-000000000046}
// *********************************************************************//
  IAreas = interface(IDispatch)
    ['{00020860-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Count: Integer; stdcall;
    function Get_Item(Index: Integer): Range; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
    function Get__Default(Index: Integer): Range; stdcall;
  end;

// *********************************************************************//
// Interface: IWorkbookEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024412-0001-0000-C000-000000000046}
// *********************************************************************//
  IWorkbookEvents = interface(IDispatch)
    ['{00024412-0001-0000-C000-000000000046}']
    function Open: HResult; stdcall;
    function Activate: HResult; stdcall;
    function Deactivate: HResult; stdcall;
    function BeforeClose(var Cancel: WordBool): HResult; stdcall;
    function BeforeSave(SaveAsUI: WordBool; var Cancel: WordBool): HResult; stdcall;
    function BeforePrint(var Cancel: WordBool): HResult; stdcall;
    function NewSheet(const Sh: IDispatch): HResult; stdcall;
    function AddinInstall: HResult; stdcall;
    function AddinUninstall: HResult; stdcall;
    function WindowResize(const Wn: Window_): HResult; stdcall;
    function WindowActivate(const Wn: Window_): HResult; stdcall;
    function WindowDeactivate(const Wn: Window_): HResult; stdcall;
    function SheetSelectionChange(const Sh: IDispatch; const Target: Range): HResult; stdcall;
    function SheetBeforeDoubleClick(const Sh: IDispatch; const Target: Range; var Cancel: WordBool): HResult; stdcall;
    function SheetBeforeRightClick(const Sh: IDispatch; const Target: Range; var Cancel: WordBool): HResult; stdcall;
    function SheetActivate(const Sh: IDispatch): HResult; stdcall;
    function SheetDeactivate(const Sh: IDispatch): HResult; stdcall;
    function SheetCalculate(const Sh: IDispatch): HResult; stdcall;
    function SheetChange(const Sh: IDispatch; const Target: Range): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: _Workbook
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000208DA-0000-0000-C000-000000000046}
// *********************************************************************//
  _Workbook = interface(IDispatch)
    ['{000208DA-0000-0000-C000-000000000046}']
    function Get_Application_: Application_; safecall;
    function Get_Creator: XlCreator; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_AcceptLabelsInFormulas: WordBool; safecall;
    procedure Set_AcceptLabelsInFormulas(RHS: WordBool); safecall;
    procedure Activate(lcid: Integer); safecall;
    function Get_ActiveChart: Chart; safecall;
    function Get_ActiveSheet: IDispatch; safecall;
    function Get_Author(lcid: Integer): WideString; safecall;
    procedure Set_Author(lcid: Integer; const RHS: WideString); safecall;
    function Get_AutoUpdateFrequency: Integer; safecall;
    procedure Set_AutoUpdateFrequency(RHS: Integer); safecall;
    function Get_AutoUpdateSaveChanges: WordBool; safecall;
    procedure Set_AutoUpdateSaveChanges(RHS: WordBool); safecall;
    function Get_ChangeHistoryDuration: Integer; safecall;
    procedure Set_ChangeHistoryDuration(RHS: Integer); safecall;
    function Get_BuiltinDocumentProperties: IDispatch; safecall;
    procedure ChangeFileAccess(Mode: XlFileAccess; WritePassword: OleVariant; Notify: OleVariant; 
                               lcid: Integer); safecall;
    procedure ChangeLink(const Name: WideString; const NewName: WideString; Type_: XlLinkType; 
                         lcid: Integer); safecall;
    function Get_Charts: Sheets; safecall;
    procedure Close(SaveChanges: OleVariant; Filename: OleVariant; RouteWorkbook: OleVariant; 
                    lcid: Integer); safecall;
    function Get_CodeName: WideString; safecall;
    function Get__CodeName: WideString; safecall;
    procedure Set__CodeName(const RHS: WideString); safecall;
    function Get_Colors(Index: OleVariant; lcid: Integer): OleVariant; safecall;
    procedure Set_Colors(Index: OleVariant; lcid: Integer; RHS: OleVariant); safecall;
    function Get_CommandBars: CommandBars; safecall;
    function Get_Comments(lcid: Integer): WideString; safecall;
    procedure Set_Comments(lcid: Integer; const RHS: WideString); safecall;
    function Get_ConflictResolution: Integer; safecall;
    procedure Set_ConflictResolution(RHS: Integer); safecall;
    function Get_Container: IDispatch; safecall;
    function Get_CreateBackup(lcid: Integer): WordBool; safecall;
    function Get_CustomDocumentProperties: IDispatch; safecall;
    function Get_Date1904(lcid: Integer): WordBool; safecall;
    procedure Set_Date1904(lcid: Integer; RHS: WordBool); safecall;
    procedure DeleteNumberFormat(const NumberFormat: WideString; lcid: Integer); safecall;
    function Get_DialogSheets: Sheets; safecall;
    function Get_DisplayDrawingObjects(lcid: Integer): XlDisplayShapes; safecall;
    procedure Set_DisplayDrawingObjects(lcid: Integer; RHS: XlDisplayShapes); safecall;
    function ExclusiveAccess(lcid: Integer): WordBool; safecall;
    function Get_FileFormat(lcid: Integer): XlFileFormat; safecall;
    procedure ForwardMailer(lcid: Integer); safecall;
    function Get_FullName(lcid: Integer): WideString; safecall;
    function Get_HasMailer(lcid: Integer): WordBool; safecall;
    procedure Set_HasMailer(lcid: Integer; RHS: WordBool); safecall;
    function Get_HasPassword(lcid: Integer): WordBool; safecall;
    function Get_HasRoutingSlip(lcid: Integer): WordBool; safecall;
    procedure Set_HasRoutingSlip(lcid: Integer; RHS: WordBool); safecall;
    function Get_IsAddin: WordBool; safecall;
    procedure Set_IsAddin(RHS: WordBool); safecall;
    function Get_Keywords(lcid: Integer): WideString; safecall;
    procedure Set_Keywords(lcid: Integer; const RHS: WideString); safecall;
    function LinkInfo(const Name: WideString; LinkInfo: XlLinkInfo; Type_: OleVariant; 
                      EditionRef: OleVariant; lcid: Integer): OleVariant; safecall;
    function LinkSources(Type_: OleVariant; lcid: Integer): OleVariant; safecall;
    function Get_Mailer: Mailer; safecall;
    procedure MergeWorkbook(Filename: OleVariant); safecall;
    function Get_Modules: Sheets; safecall;
    function Get_MultiUserEditing(lcid: Integer): WordBool; safecall;
    function Get_Name: WideString; safecall;
    function Get_Names: Names; safecall;
    function NewWindow(lcid: Integer): Window_; safecall;
    function Get_OnSave(lcid: Integer): WideString; safecall;
    procedure Set_OnSave(lcid: Integer; const RHS: WideString); safecall;
    function Get_OnSheetActivate(lcid: Integer): WideString; safecall;
    procedure Set_OnSheetActivate(lcid: Integer; const RHS: WideString); safecall;
    function Get_OnSheetDeactivate(lcid: Integer): WideString; safecall;
    procedure Set_OnSheetDeactivate(lcid: Integer; const RHS: WideString); safecall;
    procedure OpenLinks(const Name: WideString; ReadOnly: OleVariant; Type_: OleVariant; 
                        lcid: Integer); safecall;
    function Get_Path(lcid: Integer): WideString; safecall;
    function Get_PersonalViewListSettings: WordBool; safecall;
    procedure Set_PersonalViewListSettings(RHS: WordBool); safecall;
    function Get_PersonalViewPrintSettings: WordBool; safecall;
    procedure Set_PersonalViewPrintSettings(RHS: WordBool); safecall;
    function PivotCaches: PivotCaches; safecall;
    procedure Post(DestName: OleVariant; lcid: Integer); safecall;
    function Get_PrecisionAsDisplayed(lcid: Integer): WordBool; safecall;
    procedure Set_PrecisionAsDisplayed(lcid: Integer; RHS: WordBool); safecall;
    procedure PrintOut(From: OleVariant; To_: OleVariant; Copies: OleVariant; Preview: OleVariant; 
                       ActivePrinter: OleVariant; PrintToFile: OleVariant; Collate: OleVariant; 
                       lcid: Integer); safecall;
    procedure PrintPreview(EnableChanges: OleVariant; lcid: Integer); safecall;
    procedure Protect(Password: OleVariant; Structure: OleVariant; Windows: OleVariant); safecall;
    procedure ProtectSharing(Filename: OleVariant; Password: OleVariant; 
                             WriteResPassword: OleVariant; ReadOnlyRecommended: OleVariant; 
                             CreateBackup: OleVariant; SharingPassword: OleVariant); safecall;
    function Get_ProtectStructure: WordBool; safecall;
    function Get_ProtectWindows: WordBool; safecall;
    function Get_ReadOnly(lcid: Integer): WordBool; safecall;
    function Get_ReadOnlyRecommended(lcid: Integer): WordBool; safecall;
    procedure RefreshAll; safecall;
    procedure Reply(lcid: Integer); safecall;
    procedure ReplyAll(lcid: Integer); safecall;
    procedure RemoveUser(Index: Integer); safecall;
    function Get_RevisionNumber(lcid: Integer): Integer; safecall;
    procedure Route(lcid: Integer); safecall;
    function Get_Routed(lcid: Integer): WordBool; safecall;
    function Get_RoutingSlip: RoutingSlip; safecall;
    procedure RunAutoMacros(Which: XlRunAutoMacro; lcid: Integer); safecall;
    procedure Save(lcid: Integer); safecall;
    procedure SaveAs(Filename: OleVariant; FileFormat: OleVariant; Password: OleVariant; 
                     WriteResPassword: OleVariant; ReadOnlyRecommended: OleVariant; 
                     CreateBackup: OleVariant; AccessMode: XlSaveAsAccessMode; 
                     ConflictResolution: OleVariant; AddToMru: OleVariant; 
                     TextCodepage: OleVariant; TextVisualLayout: OleVariant; lcid: Integer); safecall;
    procedure SaveCopyAs(Filename: OleVariant; lcid: Integer); safecall;
    function Get_Saved(lcid: Integer): WordBool; safecall;
    procedure Set_Saved(lcid: Integer; RHS: WordBool); safecall;
    function Get_SaveLinkValues(lcid: Integer): WordBool; safecall;
    procedure Set_SaveLinkValues(lcid: Integer; RHS: WordBool); safecall;
    procedure SendMail(Recipients: OleVariant; Subject: OleVariant; ReturnReceipt: OleVariant; 
                       lcid: Integer); safecall;
    procedure SendMailer(FileFormat: OleVariant; Priority: XlPriority; lcid: Integer); safecall;
    procedure SetLinkOnData(const Name: WideString; Procedure_: OleVariant; lcid: Integer); safecall;
    function Get_Sheets: Sheets; safecall;
    function Get_ShowConflictHistory(lcid: Integer): WordBool; safecall;
    procedure Set_ShowConflictHistory(lcid: Integer; RHS: WordBool); safecall;
    function Get_Styles: Styles; safecall;
    function Get_Subject(lcid: Integer): WideString; safecall;
    procedure Set_Subject(lcid: Integer; const RHS: WideString); safecall;
    function Get_Title(lcid: Integer): WideString; safecall;
    procedure Set_Title(lcid: Integer; const RHS: WideString); safecall;
    procedure Unprotect(Password: OleVariant; lcid: Integer); safecall;
    procedure UnprotectSharing(SharingPassword: OleVariant); safecall;
    procedure UpdateFromFile(lcid: Integer); safecall;
    procedure UpdateLink(Name: OleVariant; Type_: OleVariant; lcid: Integer); safecall;
    function Get_UpdateRemoteReferences(lcid: Integer): WordBool; safecall;
    procedure Set_UpdateRemoteReferences(lcid: Integer; RHS: WordBool); safecall;
    function Get_UserControl: WordBool; safecall;
    procedure Set_UserControl(RHS: WordBool); safecall;
    function Get_UserStatus(lcid: Integer): OleVariant; safecall;
    function Get_CustomViews: CustomViews; safecall;
    function Get_Windows: DIWindows; safecall;
    function Get_Worksheets: Sheets; safecall;
    function Get_WriteReserved(lcid: Integer): WordBool; safecall;
    function Get_WriteReservedBy(lcid: Integer): WideString; safecall;
    function Get_Excel4IntlMacroSheets: Sheets; safecall;
    function Get_Excel4MacroSheets: Sheets; safecall;
    function Get_TemplateRemoveExtData: WordBool; safecall;
    procedure Set_TemplateRemoveExtData(RHS: WordBool); safecall;
    procedure HighlightChangesOptions(When: OleVariant; Who: OleVariant; Where: OleVariant); safecall;
    function Get_HighlightChangesOnScreen: WordBool; safecall;
    procedure Set_HighlightChangesOnScreen(RHS: WordBool); safecall;
    function Get_KeepChangeHistory: WordBool; safecall;
    procedure Set_KeepChangeHistory(RHS: WordBool); safecall;
    function Get_ListChangesOnNewSheet: WordBool; safecall;
    procedure Set_ListChangesOnNewSheet(RHS: WordBool); safecall;
    procedure PurgeChangeHistoryNow(Days: Integer; SharingPassword: OleVariant); safecall;
    procedure AcceptAllChanges(When: OleVariant; Who: OleVariant; Where: OleVariant); safecall;
    procedure RejectAllChanges(When: OleVariant; Who: OleVariant; Where: OleVariant); safecall;
    procedure PivotTableWizard(SourceType: OleVariant; SourceData: OleVariant; 
                               TableDestination: OleVariant; TableName: OleVariant; 
                               RowGrand: OleVariant; ColumnGrand: OleVariant; SaveData: OleVariant; 
                               HasAutoFormat: OleVariant; AutoPage: OleVariant; 
                               Reserved: OleVariant; BackgroundQuery: OleVariant; 
                               OptimizeCache: OleVariant; PageFieldOrder: OleVariant; 
                               PageFieldWrapCount: OleVariant; ReadData: OleVariant; 
                               Connection: OleVariant; lcid: Integer); safecall;
    procedure ResetColors; safecall;
    function Get_VBProject: VBProject; safecall;
    procedure FollowHyperlink(const Address: WideString; SubAddress: OleVariant; 
                              NewWindow: OleVariant; AddHistory: OleVariant; ExtraInfo: OleVariant; 
                              Method: OleVariant; HeaderInfo: OleVariant); safecall;
    procedure AddToFavorites; safecall;
    function Get_IsInplace: WordBool; safecall;
    property Application_: Application_ read Get_Application_;
    property Creator: XlCreator read Get_Creator;
    property Parent: IDispatch read Get_Parent;
    property AcceptLabelsInFormulas: WordBool read Get_AcceptLabelsInFormulas write Set_AcceptLabelsInFormulas;
    property ActiveChart: Chart read Get_ActiveChart;
    property ActiveSheet: IDispatch read Get_ActiveSheet;
    property Author[lcid: Integer]: WideString read Get_Author write Set_Author;
    property AutoUpdateFrequency: Integer read Get_AutoUpdateFrequency write Set_AutoUpdateFrequency;
    property AutoUpdateSaveChanges: WordBool read Get_AutoUpdateSaveChanges write Set_AutoUpdateSaveChanges;
    property ChangeHistoryDuration: Integer read Get_ChangeHistoryDuration write Set_ChangeHistoryDuration;
    property BuiltinDocumentProperties: IDispatch read Get_BuiltinDocumentProperties;
    property Charts: Sheets read Get_Charts;
    property CodeName: WideString read Get_CodeName;
    property _CodeName: WideString read Get__CodeName write Set__CodeName;
    property Colors[Index: OleVariant; lcid: Integer]: OleVariant read Get_Colors write Set_Colors;
    property CommandBars: CommandBars read Get_CommandBars;
    property Comments[lcid: Integer]: WideString read Get_Comments write Set_Comments;
    property ConflictResolution: Integer read Get_ConflictResolution write Set_ConflictResolution;
    property Container: IDispatch read Get_Container;
    property CreateBackup[lcid: Integer]: WordBool read Get_CreateBackup;
    property CustomDocumentProperties: IDispatch read Get_CustomDocumentProperties;
    property Date1904[lcid: Integer]: WordBool read Get_Date1904 write Set_Date1904;
    property DialogSheets: Sheets read Get_DialogSheets;
    property DisplayDrawingObjects[lcid: Integer]: XlDisplayShapes read Get_DisplayDrawingObjects write Set_DisplayDrawingObjects;
    property FileFormat[lcid: Integer]: XlFileFormat read Get_FileFormat;
    property FullName[lcid: Integer]: WideString read Get_FullName;
    property HasMailer[lcid: Integer]: WordBool read Get_HasMailer write Set_HasMailer;
    property HasPassword[lcid: Integer]: WordBool read Get_HasPassword;
    property HasRoutingSlip[lcid: Integer]: WordBool read Get_HasRoutingSlip write Set_HasRoutingSlip;
    property IsAddin: WordBool read Get_IsAddin write Set_IsAddin;
    property Keywords[lcid: Integer]: WideString read Get_Keywords write Set_Keywords;
    property Mailer: Mailer read Get_Mailer;
    property Modules: Sheets read Get_Modules;
    property MultiUserEditing[lcid: Integer]: WordBool read Get_MultiUserEditing;
    property Name: WideString read Get_Name;
    property Names: Names read Get_Names;
    property OnSave[lcid: Integer]: WideString read Get_OnSave write Set_OnSave;
    property OnSheetActivate[lcid: Integer]: WideString read Get_OnSheetActivate write Set_OnSheetActivate;
    property OnSheetDeactivate[lcid: Integer]: WideString read Get_OnSheetDeactivate write Set_OnSheetDeactivate;
    property Path[lcid: Integer]: WideString read Get_Path;
    property PersonalViewListSettings: WordBool read Get_PersonalViewListSettings write Set_PersonalViewListSettings;
    property PersonalViewPrintSettings: WordBool read Get_PersonalViewPrintSettings write Set_PersonalViewPrintSettings;
    property PrecisionAsDisplayed[lcid: Integer]: WordBool read Get_PrecisionAsDisplayed write Set_PrecisionAsDisplayed;
    property ProtectStructure: WordBool read Get_ProtectStructure;
    property ProtectWindows: WordBool read Get_ProtectWindows;
    property ReadOnly[lcid: Integer]: WordBool read Get_ReadOnly;
    property ReadOnlyRecommended[lcid: Integer]: WordBool read Get_ReadOnlyRecommended;
    property RevisionNumber[lcid: Integer]: Integer read Get_RevisionNumber;
    property Routed[lcid: Integer]: WordBool read Get_Routed;
    property RoutingSlip: RoutingSlip read Get_RoutingSlip;
    property Saved[lcid: Integer]: WordBool read Get_Saved write Set_Saved;
    property SaveLinkValues[lcid: Integer]: WordBool read Get_SaveLinkValues write Set_SaveLinkValues;
    property Sheets: Sheets read Get_Sheets;
    property ShowConflictHistory[lcid: Integer]: WordBool read Get_ShowConflictHistory write Set_ShowConflictHistory;
    property Styles: Styles read Get_Styles;
    property Subject[lcid: Integer]: WideString read Get_Subject write Set_Subject;
    property Title[lcid: Integer]: WideString read Get_Title write Set_Title;
    property UpdateRemoteReferences[lcid: Integer]: WordBool read Get_UpdateRemoteReferences write Set_UpdateRemoteReferences;
    property UserControl: WordBool read Get_UserControl write Set_UserControl;
    property UserStatus[lcid: Integer]: OleVariant read Get_UserStatus;
    property CustomViews: CustomViews read Get_CustomViews;
    property Windows: DIWindows read Get_Windows;
    property Worksheets: Sheets read Get_Worksheets;
    property WriteReserved[lcid: Integer]: WordBool read Get_WriteReserved;
    property WriteReservedBy[lcid: Integer]: WideString read Get_WriteReservedBy;
    property Excel4IntlMacroSheets: Sheets read Get_Excel4IntlMacroSheets;
    property Excel4MacroSheets: Sheets read Get_Excel4MacroSheets;
    property TemplateRemoveExtData: WordBool read Get_TemplateRemoveExtData write Set_TemplateRemoveExtData;
    property HighlightChangesOnScreen: WordBool read Get_HighlightChangesOnScreen write Set_HighlightChangesOnScreen;
    property KeepChangeHistory: WordBool read Get_KeepChangeHistory write Set_KeepChangeHistory;
    property ListChangesOnNewSheet: WordBool read Get_ListChangesOnNewSheet write Set_ListChangesOnNewSheet;
    property VBProject: VBProject read Get_VBProject;
    property IsInplace: WordBool read Get_IsInplace;
  end;

// *********************************************************************//
// Interface: Workbooks
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000208DB-0000-0000-C000-000000000046}
// *********************************************************************//
  Workbooks = interface(IDispatch)
    ['{000208DB-0000-0000-C000-000000000046}']
    function Get_Application_: Application_; safecall;
    function Get_Creator: XlCreator; safecall;
    function Get_Parent: IDispatch; safecall;
    function Add(Template: OleVariant; lcid: Integer): Workbook; safecall;
    procedure Close(lcid: Integer); safecall;
    function Get_Count: Integer; safecall;
    function Get_Item(Index: OleVariant): Workbook; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Open(const Filename: WideString; UpdateLinks: OleVariant; ReadOnly: OleVariant; 
                  Format: OleVariant; Password: OleVariant; WriteResPassword: OleVariant; 
                  IgnoreReadOnlyRecommended: OleVariant; Origin: OleVariant; Delimiter: OleVariant; 
                  Editable: OleVariant; Notify: OleVariant; Converter: OleVariant; 
                  AddToMru: OleVariant; lcid: Integer): Workbook; safecall;
    procedure OpenText(const Filename: WideString; Origin: OleVariant; StartRow: OleVariant; 
                       DataType: OleVariant; TextQualifier: XlTextQualifier; 
                       ConsecutiveDelimiter: OleVariant; Tab: OleVariant; Semicolon: OleVariant; 
                       Comma: OleVariant; Space: OleVariant; Other: OleVariant; 
                       OtherChar: OleVariant; FieldInfo: OleVariant; TextVisualLayout: OleVariant; 
                       lcid: Integer); safecall;
    function Get__Default(Index: OleVariant): Workbook; safecall;
    property Application_: Application_ read Get_Application_;
    property Creator: XlCreator read Get_Creator;
    property Parent: IDispatch read Get_Parent;
    property Count: Integer read Get_Count;
    property Item[Index: OleVariant]: Workbook read Get_Item;
    property _NewEnum: IUnknown read Get__NewEnum;
    property _Default[Index: OleVariant]: Workbook read Get__Default;
  end;

// *********************************************************************//
// Interface: IMenuBars
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020863-0001-0000-C000-000000000046}
// *********************************************************************//
  IMenuBars = interface(IDispatch)
    ['{00020863-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Add(Name: OleVariant): MenuBar; stdcall;
    function Get_Count: Integer; stdcall;
    function Get__Default(Index: OleVariant): MenuBar; stdcall;
    function Get_Item(Index: OleVariant): MenuBar; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IMenuBar
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020864-0001-0000-C000-000000000046}
// *********************************************************************//
  IMenuBar = interface(IDispatch)
    ['{00020864-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Activate: HResult; stdcall;
    function Get_BuiltIn: WordBool; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_Menus: MenusDisp; stdcall;
    function Reset: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IMenus
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020865-0001-0000-C000-000000000046}
// *********************************************************************//
  IMenus = interface(IDispatch)
    ['{00020865-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Add(const Caption: WideString; Before: OleVariant; Restore: OleVariant): Menu; stdcall;
    function Get_Count: Integer; stdcall;
    function Get__Default(Index: OleVariant): Menu; stdcall;
    function Get_Item(Index: OleVariant): Menu; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IMenu
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020866-0001-0000-C000-000000000046}
// *********************************************************************//
  IMenu = interface(IDispatch)
    ['{00020866-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_MenuItems: MenuItems; stdcall;
  end;

// *********************************************************************//
// Interface: IMenuItems
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020867-0001-0000-C000-000000000046}
// *********************************************************************//
  IMenuItems = interface(IDispatch)
    ['{00020867-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Add(const Caption: WideString; OnAction: OleVariant; ShortcutKey: OleVariant; 
                 Before: OleVariant; Restore: OleVariant; StatusBar: OleVariant; 
                 HelpFile: OleVariant; HelpContextID: OleVariant): MenuItem; stdcall;
    function AddMenu(const Caption: WideString; Before: OleVariant; Restore: OleVariant): Menu; stdcall;
    function Get_Count: Integer; stdcall;
    function Get__Default(Index: OleVariant): IDispatch; stdcall;
    function Get_Item(Index: OleVariant): IDispatch; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IMenuItem
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020868-0001-0000-C000-000000000046}
// *********************************************************************//
  IMenuItem = interface(IDispatch)
    ['{00020868-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Checked: WordBool; stdcall;
    function Set_Checked(RHS: WordBool): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_HelpContextID: Integer; stdcall;
    function Set_HelpContextID(RHS: Integer): HResult; stdcall;
    function Get_HelpFile: WideString; stdcall;
    function Set_HelpFile(const RHS: WideString): HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_StatusBar: WideString; stdcall;
    function Set_StatusBar(const RHS: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ICharts
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002086D-0001-0000-C000-000000000046}
// *********************************************************************//
  ICharts = interface(IDispatch)
    ['{0002086D-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Add(Before: OleVariant; After: OleVariant; Count: OleVariant): Chart; stdcall;
    function Copy(Before: OleVariant; After: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_Count: Integer; stdcall;
    function Delete(lcid: Integer): HResult; stdcall;
    procedure _Dummy7; stdcall;
    function Get_Item(Index: OleVariant): IDispatch; stdcall;
    function Move(Before: OleVariant; After: OleVariant; lcid: Integer): HResult; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
    function PrintOut(From: OleVariant; To_: OleVariant; Copies: OleVariant; Preview: OleVariant; 
                      ActivePrinter: OleVariant; PrintToFile: OleVariant; Collate: OleVariant; 
                      lcid: Integer): HResult; stdcall;
    function PrintPreview(EnableChanges: OleVariant; lcid: Integer): HResult; stdcall;
    function Select(Replace: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_HPageBreaks: HPageBreaks; stdcall;
    function Get_VPageBreaks: VPageBreaks; stdcall;
    function Get_Visible(lcid: Integer): OleVariant; stdcall;
    function Set_Visible(lcid: Integer; RHS: OleVariant): HResult; stdcall;
    function Get__Default(Index: OleVariant): IDispatch; stdcall;
  end;

// *********************************************************************//
// Interface: IDrawingObjects
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002086F-0001-0000-C000-000000000046}
// *********************************************************************//
  IDrawingObjects = interface(IDispatch)
    ['{0002086F-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_Accelerator: OleVariant; stdcall;
    function Set_Accelerator(RHS: OleVariant): HResult; stdcall;
    procedure _Dummy28; stdcall;
    function Get_AddIndent: WordBool; stdcall;
    function Set_AddIndent(RHS: WordBool): HResult; stdcall;
    function AddItem(Text: OleVariant; Index: OleVariant): HResult; stdcall;
    function Get_ArrowHeadLength: OleVariant; stdcall;
    function Set_ArrowHeadLength(RHS: OleVariant): HResult; stdcall;
    function Get_ArrowHeadStyle: OleVariant; stdcall;
    function Set_ArrowHeadStyle(RHS: OleVariant): HResult; stdcall;
    function Get_ArrowHeadWidth: OleVariant; stdcall;
    function Set_ArrowHeadWidth(RHS: OleVariant): HResult; stdcall;
    function Get_AutoSize: WordBool; stdcall;
    function Set_AutoSize(RHS: WordBool): HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Get_CancelButton: WordBool; stdcall;
    function Set_CancelButton(RHS: WordBool): HResult; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant): HResult; stdcall;
    function Get__Default: Integer; stdcall;
    function Set__Default(RHS: Integer): HResult; stdcall;
    function Get_DefaultButton: WordBool; stdcall;
    function Set_DefaultButton(RHS: WordBool): HResult; stdcall;
    function Get_DismissButton: WordBool; stdcall;
    function Set_DismissButton(RHS: WordBool): HResult; stdcall;
    function Get_Display3DShading: WordBool; stdcall;
    function Set_Display3DShading(RHS: WordBool): HResult; stdcall;
    function Get_DisplayVerticalScrollBar: WordBool; stdcall;
    function Set_DisplayVerticalScrollBar(RHS: WordBool): HResult; stdcall;
    function Get_DropDownLines: Integer; stdcall;
    function Set_DropDownLines(RHS: Integer): HResult; stdcall;
    function Get_Font: Font; stdcall;
    procedure _Dummy47; stdcall;
    function Get_HelpButton: WordBool; stdcall;
    function Set_HelpButton(RHS: WordBool): HResult; stdcall;
    function Get_HorizontalAlignment: OleVariant; stdcall;
    function Set_HorizontalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_InputType: Integer; stdcall;
    function Set_InputType(RHS: Integer): HResult; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_LargeChange: Integer; stdcall;
    function Set_LargeChange(RHS: Integer): HResult; stdcall;
    function Get_LinkedCell: WideString; stdcall;
    function Set_LinkedCell(const RHS: WideString): HResult; stdcall;
    procedure _Dummy54; stdcall;
    function List(Index: OleVariant): OleVariant; stdcall;
    procedure _Dummy56; stdcall;
    function Get_ListFillRange: WideString; stdcall;
    function Set_ListFillRange(const RHS: WideString): HResult; stdcall;
    function Get_ListIndex: Integer; stdcall;
    function Set_ListIndex(RHS: Integer): HResult; stdcall;
    function Get_LockedText: WordBool; stdcall;
    function Set_LockedText(RHS: WordBool): HResult; stdcall;
    function Get_Max: Integer; stdcall;
    function Set_Max(RHS: Integer): HResult; stdcall;
    function Get_Min: Integer; stdcall;
    function Set_Min(RHS: Integer): HResult; stdcall;
    function Get_MultiLine: WordBool; stdcall;
    function Set_MultiLine(RHS: WordBool): HResult; stdcall;
    function Get_MultiSelect: WordBool; stdcall;
    function Set_MultiSelect(RHS: WordBool): HResult; stdcall;
    function Get_Orientation: OleVariant; stdcall;
    function Set_Orientation(RHS: OleVariant): HResult; stdcall;
    function Get_PhoneticAccelerator: OleVariant; stdcall;
    function Set_PhoneticAccelerator(RHS: OleVariant): HResult; stdcall;
    function RemoveAllItems: HResult; stdcall;
    function RemoveItem(Index: Integer; Count: OleVariant): HResult; stdcall;
    function Reshape(Vertex: Integer; Insert: OleVariant; Left: OleVariant; Top: OleVariant): HResult; stdcall;
    function Get_RoundedCorners: WordBool; stdcall;
    function Set_RoundedCorners(RHS: WordBool): HResult; stdcall;
    function Selected(Index: OleVariant): OleVariant; stdcall;
    function Get_Shadow: WordBool; stdcall;
    function Set_Shadow(RHS: WordBool): HResult; stdcall;
    function Get_SmallChange: Integer; stdcall;
    function Set_SmallChange(RHS: Integer): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Ungroup: IDispatch; stdcall;
    function Get_Value: Integer; stdcall;
    function Set_Value(RHS: Integer): HResult; stdcall;
    function Get_VerticalAlignment: OleVariant; stdcall;
    function Set_VerticalAlignment(RHS: OleVariant): HResult; stdcall;
    function Vertices(Index1: OleVariant; Index2: OleVariant): OleVariant; stdcall;
    function Get_ReadingOrder: Integer; stdcall;
    function Set_ReadingOrder(RHS: Integer): HResult; stdcall;
    function Get_Count: Integer; stdcall;
    function Item(Index: OleVariant): IDispatch; stdcall;
    function Group: GroupObject; stdcall;
    function LinkCombo(Link: OleVariant): HResult; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IPivotCache
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002441C-0001-0000-C000-000000000046}
// *********************************************************************//
  IPivotCache = interface(IDispatch)
    ['{0002441C-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_BackgroundQuery: WordBool; stdcall;
    function Set_BackgroundQuery(RHS: WordBool): HResult; stdcall;
    function Get_Connection: OleVariant; stdcall;
    function Set_Connection(RHS: OleVariant): HResult; stdcall;
    function Get_EnableRefresh: WordBool; stdcall;
    function Set_EnableRefresh(RHS: WordBool): HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_MemoryUsed: Integer; stdcall;
    function Get_OptimizeCache: WordBool; stdcall;
    function Set_OptimizeCache(RHS: WordBool): HResult; stdcall;
    function Get_RecordCount: Integer; stdcall;
    function Refresh: HResult; stdcall;
    function Get_RefreshDate: TDateTime; stdcall;
    function Get_RefreshName: WideString; stdcall;
    function Get_RefreshOnFileOpen: WordBool; stdcall;
    function Set_RefreshOnFileOpen(RHS: WordBool): HResult; stdcall;
    function Get_Sql: OleVariant; stdcall;
    function Set_Sql(RHS: OleVariant): HResult; stdcall;
    function Get_SavePassword: WordBool; stdcall;
    function Set_SavePassword(RHS: WordBool): HResult; stdcall;
    function Get_SourceData: OleVariant; stdcall;
    function Set_SourceData(RHS: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPivotCaches
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002441D-0001-0000-C000-000000000046}
// *********************************************************************//
  IPivotCaches = interface(IDispatch)
    ['{0002441D-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Count: Integer; stdcall;
    function Item(Index: OleVariant): PivotCache; stdcall;
    function Get__Default(Index: OleVariant): PivotCache; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IPivotFormula
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002441E-0001-0000-C000-000000000046}
// *********************************************************************//
  IPivotFormula = interface(IDispatch)
    ['{0002441E-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Delete: HResult; stdcall;
    function Get__Default: WideString; stdcall;
    function Set__Default(const RHS: WideString): HResult; stdcall;
    function Get_Formula: WideString; stdcall;
    function Set_Formula(const RHS: WideString): HResult; stdcall;
    function Get_Value: WideString; stdcall;
    function Set_Value(const RHS: WideString): HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function Set_Index(RHS: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPivotFormulas
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002441F-0001-0000-C000-000000000046}
// *********************************************************************//
  IPivotFormulas = interface(IDispatch)
    ['{0002441F-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Count: Integer; stdcall;
    function Add(const Formula: WideString): PivotFormula; stdcall;
    function Item(Index: OleVariant): PivotFormula; stdcall;
    function Get__Default(Index: OleVariant): PivotFormula; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IPivotTable
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020872-0001-0000-C000-000000000046}
// *********************************************************************//
  IPivotTable = interface(IDispatch)
    ['{00020872-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function AddFields(RowFields: OleVariant; ColumnFields: OleVariant; PageFields: OleVariant; 
                       AddToTable: OleVariant): HResult; stdcall;
    function Get_ColumnFields(Index: OleVariant): IDispatch; stdcall;
    function Get_ColumnGrand: WordBool; stdcall;
    function Set_ColumnGrand(RHS: WordBool): HResult; stdcall;
    function Get_ColumnRange: Range; stdcall;
    function ShowPages(PageField: OleVariant): HResult; stdcall;
    function Get_DataBodyRange: Range; stdcall;
    function Get_DataFields(Index: OleVariant): IDispatch; stdcall;
    function Get_DataLabelRange: Range; stdcall;
    function Get__Default: WideString; stdcall;
    function Set__Default(const RHS: WideString): HResult; stdcall;
    function Get_HasAutoFormat: WordBool; stdcall;
    function Set_HasAutoFormat(RHS: WordBool): HResult; stdcall;
    function Get_HiddenFields(Index: OleVariant): IDispatch; stdcall;
    function Get_InnerDetail: WideString; stdcall;
    function Set_InnerDetail(const RHS: WideString): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_PageFields(Index: OleVariant): IDispatch; stdcall;
    function Get_PageRange: Range; stdcall;
    function Get_PageRangeCells: Range; stdcall;
    function PivotFields(Index: OleVariant): IDispatch; stdcall;
    function Get_RefreshDate: TDateTime; stdcall;
    function Get_RefreshName: WideString; stdcall;
    function RefreshTable: WordBool; stdcall;
    function Get_RowFields(Index: OleVariant): IDispatch; stdcall;
    function Get_RowGrand: WordBool; stdcall;
    function Set_RowGrand(RHS: WordBool): HResult; stdcall;
    function Get_RowRange: Range; stdcall;
    function Get_SaveData: WordBool; stdcall;
    function Set_SaveData(RHS: WordBool): HResult; stdcall;
    function Get_SourceData: OleVariant; stdcall;
    function Set_SourceData(RHS: OleVariant): HResult; stdcall;
    function Get_TableRange1: Range; stdcall;
    function Get_TableRange2: Range; stdcall;
    function Get_Value: WideString; stdcall;
    function Set_Value(const RHS: WideString): HResult; stdcall;
    function Get_VisibleFields(Index: OleVariant): IDispatch; stdcall;
    function Get_CacheIndex: Integer; stdcall;
    function Set_CacheIndex(RHS: Integer): HResult; stdcall;
    function CalculatedFields: CalculatedFields; stdcall;
    function Get_DisplayErrorString: WordBool; stdcall;
    function Set_DisplayErrorString(RHS: WordBool): HResult; stdcall;
    function Get_DisplayNullString: WordBool; stdcall;
    function Set_DisplayNullString(RHS: WordBool): HResult; stdcall;
    function Get_EnableDrilldown: WordBool; stdcall;
    function Set_EnableDrilldown(RHS: WordBool): HResult; stdcall;
    function Get_EnableFieldDialog: WordBool; stdcall;
    function Set_EnableFieldDialog(RHS: WordBool): HResult; stdcall;
    function Get_EnableWizard: WordBool; stdcall;
    function Set_EnableWizard(RHS: WordBool): HResult; stdcall;
    function Get_ErrorString: WideString; stdcall;
    function Set_ErrorString(const RHS: WideString): HResult; stdcall;
    function GetData(const Name: WideString): Double; stdcall;
    function ListFormulas: HResult; stdcall;
    function Get_ManualUpdate: WordBool; stdcall;
    function Set_ManualUpdate(RHS: WordBool): HResult; stdcall;
    function Get_MergeLabels: WordBool; stdcall;
    function Set_MergeLabels(RHS: WordBool): HResult; stdcall;
    function Get_NullString: WideString; stdcall;
    function Set_NullString(const RHS: WideString): HResult; stdcall;
    function PivotCache: PivotCache; stdcall;
    function PivotFormulas: PivotFormulas; stdcall;
    function PivotTableWizard(SourceType: OleVariant; SourceData: OleVariant; 
                              TableDestination: OleVariant; TableName: OleVariant; 
                              RowGrand: OleVariant; ColumnGrand: OleVariant; SaveData: OleVariant; 
                              HasAutoFormat: OleVariant; AutoPage: OleVariant; 
                              Reserved: OleVariant; BackgroundQuery: OleVariant; 
                              OptimizeCache: OleVariant; PageFieldOrder: OleVariant; 
                              PageFieldWrapCount: OleVariant; ReadData: OleVariant; 
                              Connection: OleVariant): HResult; stdcall;
    function Get_SubtotalHiddenPageItems: WordBool; stdcall;
    function Set_SubtotalHiddenPageItems(RHS: WordBool): HResult; stdcall;
    function Get_PageFieldOrder: Integer; stdcall;
    function Set_PageFieldOrder(RHS: Integer): HResult; stdcall;
    function Get_PageFieldStyle: WideString; stdcall;
    function Set_PageFieldStyle(const RHS: WideString): HResult; stdcall;
    function Get_PageFieldWrapCount: Integer; stdcall;
    function Set_PageFieldWrapCount(RHS: Integer): HResult; stdcall;
    function Get_PreserveFormatting: WordBool; stdcall;
    function Set_PreserveFormatting(RHS: WordBool): HResult; stdcall;
    function PivotSelect(const Name: WideString; Mode: XlPTSelectionMode): HResult; stdcall;
    function Get_PivotSelection: WideString; stdcall;
    function Set_PivotSelection(const RHS: WideString): HResult; stdcall;
    function Get_SelectionMode: XlPTSelectionMode; stdcall;
    function Set_SelectionMode(RHS: XlPTSelectionMode): HResult; stdcall;
    function Get_TableStyle: WideString; stdcall;
    function Set_TableStyle(const RHS: WideString): HResult; stdcall;
    function Get_Tag: WideString; stdcall;
    function Set_Tag(const RHS: WideString): HResult; stdcall;
    function Update: HResult; stdcall;
    function Get_VacatedStyle: WideString; stdcall;
    function Set_VacatedStyle(const RHS: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPivotTables
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020873-0001-0000-C000-000000000046}
// *********************************************************************//
  IPivotTables = interface(IDispatch)
    ['{00020873-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Count: Integer; stdcall;
    function Item(Index: OleVariant): PivotTable; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IPivotField
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020874-0001-0000-C000-000000000046}
// *********************************************************************//
  IPivotField = interface(IDispatch)
    ['{00020874-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: PivotTable; stdcall;
    function Get_Calculation: XlPivotFieldCalculation; stdcall;
    function Set_Calculation(RHS: XlPivotFieldCalculation): HResult; stdcall;
    function Get_ChildField: PivotField; stdcall;
    function Get_ChildItems(Index: OleVariant): OleVariant; stdcall;
    function Get_CurrentPage: WideString; stdcall;
    function Set_CurrentPage(const RHS: WideString): HResult; stdcall;
    function Get_DataRange: Range; stdcall;
    function Get_DataType: XlPivotFieldDataType; stdcall;
    function Get__Default: WideString; stdcall;
    function Set__Default(const RHS: WideString): HResult; stdcall;
    function Get_Function_: XlConsolidationFunction; stdcall;
    function Set_Function_(RHS: XlConsolidationFunction): HResult; stdcall;
    function Get_GroupLevel: OleVariant; stdcall;
    function Get_HiddenItems(Index: OleVariant): OleVariant; stdcall;
    function Get_LabelRange: Range; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_NumberFormat: WideString; stdcall;
    function Set_NumberFormat(const RHS: WideString): HResult; stdcall;
    function Get_Orientation: XlPivotFieldOrientation; stdcall;
    function Set_Orientation(RHS: XlPivotFieldOrientation): HResult; stdcall;
    function Get_ShowAllItems: WordBool; stdcall;
    function Set_ShowAllItems(RHS: WordBool): HResult; stdcall;
    function Get_ParentField: PivotField; stdcall;
    function Get_ParentItems(Index: OleVariant): OleVariant; stdcall;
    function PivotItems(Index: OleVariant): OleVariant; stdcall;
    function Get_Position: OleVariant; stdcall;
    function Set_Position(RHS: OleVariant): HResult; stdcall;
    function Get_SourceName: WideString; stdcall;
    function Subtotals(Index: OleVariant): OleVariant; stdcall;
    function Get_BaseField: OleVariant; stdcall;
    function Set_BaseField(RHS: OleVariant): HResult; stdcall;
    function Get_BaseItem: OleVariant; stdcall;
    function Set_BaseItem(RHS: OleVariant): HResult; stdcall;
    function Get_TotalLevels: OleVariant; stdcall;
    function Get_Value: WideString; stdcall;
    function Set_Value(const RHS: WideString): HResult; stdcall;
    function Get_VisibleItems(Index: OleVariant): OleVariant; stdcall;
    function CalculatedItems: CalculatedItems; stdcall;
    function Delete: HResult; stdcall;
    function Get_DragToColumn: WordBool; stdcall;
    function Set_DragToColumn(RHS: WordBool): HResult; stdcall;
    function Get_DragToHide: WordBool; stdcall;
    function Set_DragToHide(RHS: WordBool): HResult; stdcall;
    function Get_DragToPage: WordBool; stdcall;
    function Set_DragToPage(RHS: WordBool): HResult; stdcall;
    function Get_DragToRow: WordBool; stdcall;
    function Set_DragToRow(RHS: WordBool): HResult; stdcall;
    function Get_Formula: WideString; stdcall;
    function Set_Formula(const RHS: WideString): HResult; stdcall;
    function Get_IsCalculated: WordBool; stdcall;
    function Get_MemoryUsed: Integer; stdcall;
    function Get_ServerBased: WordBool; stdcall;
    function Set_ServerBased(RHS: WordBool): HResult; stdcall;
    function AutoSort(Order: Integer; const Field: WideString): HResult; stdcall;
    function AutoShow(Type_: Integer; Range: Integer; Count: Integer; const Field: WideString): HResult; stdcall;
    function Get_AutoSortOrder: Integer; stdcall;
    function Get_AutoSortField: WideString; stdcall;
    function Get_AutoShowType: Integer; stdcall;
    function Get_AutoShowRange: Integer; stdcall;
    function Get_AutoShowCount: Integer; stdcall;
    function Get_AutoShowField: WideString; stdcall;
  end;

// *********************************************************************//
// Interface: IPivotFields
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020875-0001-0000-C000-000000000046}
// *********************************************************************//
  IPivotFields = interface(IDispatch)
    ['{00020875-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: PivotTable; stdcall;
    function Get_Count: Integer; stdcall;
    function Item(Index: OleVariant): IDispatch; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: ICalculatedFields
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024420-0001-0000-C000-000000000046}
// *********************************************************************//
  ICalculatedFields = interface(IDispatch)
    ['{00024420-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Count: Integer; stdcall;
    function Add(const Name: WideString; const Formula: WideString): PivotField; stdcall;
    function Item(Index: OleVariant): PivotField; stdcall;
    function Get__Default(Field: OleVariant): PivotField; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IPivotItem
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020876-0001-0000-C000-000000000046}
// *********************************************************************//
  IPivotItem = interface(IDispatch)
    ['{00020876-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: PivotField; stdcall;
    function Get_ChildItems(Index: OleVariant): OleVariant; stdcall;
    function Get_DataRange: Range; stdcall;
    function Get__Default: WideString; stdcall;
    function Set__Default(const RHS: WideString): HResult; stdcall;
    function Get_LabelRange: Range; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_ParentItem: PivotItem; stdcall;
    function Get_ParentShowDetail: WordBool; stdcall;
    function Get_Position: Integer; stdcall;
    function Set_Position(RHS: Integer): HResult; stdcall;
    function Get_ShowDetail: WordBool; stdcall;
    function Set_ShowDetail(RHS: WordBool): HResult; stdcall;
    function Get_SourceName: OleVariant; stdcall;
    function Get_Value: WideString; stdcall;
    function Set_Value(const RHS: WideString): HResult; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_IsCalculated: WordBool; stdcall;
    function Get_RecordCount: Integer; stdcall;
    function Get_Formula: WideString; stdcall;
    function Set_Formula(const RHS: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPivotItems
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020877-0001-0000-C000-000000000046}
// *********************************************************************//
  IPivotItems = interface(IDispatch)
    ['{00020877-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: PivotField; stdcall;
    function Add(const Name: WideString): HResult; stdcall;
    function Get_Count: Integer; stdcall;
    function Item(Index: OleVariant): IDispatch; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: ICalculatedItems
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024421-0001-0000-C000-000000000046}
// *********************************************************************//
  ICalculatedItems = interface(IDispatch)
    ['{00024421-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Count: Integer; stdcall;
    function Add(const Name: WideString; const Formula: WideString): PivotItem; stdcall;
    function Item(Index: OleVariant): PivotItem; stdcall;
    function Get__Default(Field: OleVariant): PivotItem; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: ICharacters
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020878-0001-0000-C000-000000000046}
// *********************************************************************//
  ICharacters = interface(IDispatch)
    ['{00020878-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Count: Integer; stdcall;
    function Delete: HResult; stdcall;
    function Get_Font: Font; stdcall;
    function Insert(const String_: WideString): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Get_PhoneticCharacters: WideString; stdcall;
    function Set_PhoneticCharacters(const RHS: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDialogs
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020879-0001-0000-C000-000000000046}
// *********************************************************************//
  IDialogs = interface(IDispatch)
    ['{00020879-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Count: Integer; stdcall;
    function Get_Item(Index: XlBuiltInDialog): Dialog; stdcall;
    function Get__Default(Index: XlBuiltInDialog): Dialog; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IDialog
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002087A-0001-0000-C000-000000000046}
// *********************************************************************//
  IDialog = interface(IDispatch)
    ['{0002087A-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Show(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                  Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                  Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                  Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                  Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                  Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                  Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                  Arg29: OleVariant; Arg30: OleVariant): WordBool; stdcall;
  end;

// *********************************************************************//
// Interface: ISoundNote
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002087B-0001-0000-C000-000000000046}
// *********************************************************************//
  ISoundNote = interface(IDispatch)
    ['{0002087B-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Delete: HResult; stdcall;
    function Import(const Filename: WideString): HResult; stdcall;
    function Play: HResult; stdcall;
    function Record_: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IButton
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002087D-0001-0000-C000-000000000046}
// *********************************************************************//
  IButton = interface(IDispatch)
    ['{0002087D-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_BottomRightCell: Range; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    function Get_TopLeftCell: Range; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_AddIndent: WordBool; stdcall;
    function Set_AddIndent(RHS: WordBool): HResult; stdcall;
    function Get_AutoScaleFont: OleVariant; stdcall;
    function Set_AutoScaleFont(RHS: OleVariant): HResult; stdcall;
    function Get_AutoSize: WordBool; stdcall;
    function Set_AutoSize(RHS: WordBool): HResult; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant): HResult; stdcall;
    function Get_Font: Font; stdcall;
    function Get_Formula: WideString; stdcall;
    function Set_Formula(const RHS: WideString): HResult; stdcall;
    function Get_HorizontalAlignment: OleVariant; stdcall;
    function Set_HorizontalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_LockedText: WordBool; stdcall;
    function Set_LockedText(RHS: WordBool): HResult; stdcall;
    function Get_Orientation: OleVariant; stdcall;
    function Set_Orientation(RHS: OleVariant): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Get_VerticalAlignment: OleVariant; stdcall;
    function Set_VerticalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_ReadingOrder: Integer; stdcall;
    function Set_ReadingOrder(RHS: Integer): HResult; stdcall;
    function Get_Accelerator: OleVariant; stdcall;
    function Set_Accelerator(RHS: OleVariant): HResult; stdcall;
    function Get_CancelButton: WordBool; stdcall;
    function Set_CancelButton(RHS: WordBool): HResult; stdcall;
    function Get_DefaultButton: WordBool; stdcall;
    function Set_DefaultButton(RHS: WordBool): HResult; stdcall;
    function Get_DismissButton: WordBool; stdcall;
    function Set_DismissButton(RHS: WordBool): HResult; stdcall;
    function Get_HelpButton: WordBool; stdcall;
    function Set_HelpButton(RHS: WordBool): HResult; stdcall;
    function Get_PhoneticAccelerator: OleVariant; stdcall;
    function Set_PhoneticAccelerator(RHS: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IButtons
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002087E-0001-0000-C000-000000000046}
// *********************************************************************//
  IButtons = interface(IDispatch)
    ['{0002087E-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_AddIndent: WordBool; stdcall;
    function Set_AddIndent(RHS: WordBool): HResult; stdcall;
    function Get_AutoScaleFont: OleVariant; stdcall;
    function Set_AutoScaleFont(RHS: OleVariant): HResult; stdcall;
    function Get_AutoSize: WordBool; stdcall;
    function Set_AutoSize(RHS: WordBool): HResult; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant): HResult; stdcall;
    function Get_Font: Font; stdcall;
    function Get_Formula: WideString; stdcall;
    function Set_Formula(const RHS: WideString): HResult; stdcall;
    function Get_HorizontalAlignment: OleVariant; stdcall;
    function Set_HorizontalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_LockedText: WordBool; stdcall;
    function Set_LockedText(RHS: WordBool): HResult; stdcall;
    function Get_Orientation: OleVariant; stdcall;
    function Set_Orientation(RHS: OleVariant): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Get_VerticalAlignment: OleVariant; stdcall;
    function Set_VerticalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_ReadingOrder: Integer; stdcall;
    function Set_ReadingOrder(RHS: Integer): HResult; stdcall;
    function Get_Accelerator: OleVariant; stdcall;
    function Set_Accelerator(RHS: OleVariant): HResult; stdcall;
    function Get_CancelButton: WordBool; stdcall;
    function Set_CancelButton(RHS: WordBool): HResult; stdcall;
    function Get_DefaultButton: WordBool; stdcall;
    function Set_DefaultButton(RHS: WordBool): HResult; stdcall;
    function Get_DismissButton: WordBool; stdcall;
    function Set_DismissButton(RHS: WordBool): HResult; stdcall;
    function Get_HelpButton: WordBool; stdcall;
    function Set_HelpButton(RHS: WordBool): HResult; stdcall;
    function Get_PhoneticAccelerator: OleVariant; stdcall;
    function Set_PhoneticAccelerator(RHS: OleVariant): HResult; stdcall;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): Button; stdcall;
    function Get_Count: Integer; stdcall;
    function Group: GroupObject; stdcall;
    function Item(Index: OleVariant): IDispatch; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: ICheckBox
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002087F-0001-0000-C000-000000000046}
// *********************************************************************//
  ICheckBox = interface(IDispatch)
    ['{0002087F-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_BottomRightCell: Range; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    function Get_TopLeftCell: Range; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant): HResult; stdcall;
    function Get_LockedText: WordBool; stdcall;
    function Set_LockedText(RHS: WordBool): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Get_Accelerator: OleVariant; stdcall;
    function Set_Accelerator(RHS: OleVariant): HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Get__Default: Integer; stdcall;
    function Set__Default(RHS: Integer): HResult; stdcall;
    function Get_Display3DShading: WordBool; stdcall;
    function Set_Display3DShading(RHS: WordBool): HResult; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_LinkedCell: WideString; stdcall;
    function Set_LinkedCell(const RHS: WideString): HResult; stdcall;
    function Get_PhoneticAccelerator: OleVariant; stdcall;
    function Set_PhoneticAccelerator(RHS: OleVariant): HResult; stdcall;
    function Get_Value: OleVariant; stdcall;
    function Set_Value(RHS: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ICheckBoxes
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020880-0001-0000-C000-000000000046}
// *********************************************************************//
  ICheckBoxes = interface(IDispatch)
    ['{00020880-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant): HResult; stdcall;
    function Get_LockedText: WordBool; stdcall;
    function Set_LockedText(RHS: WordBool): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Get_Accelerator: OleVariant; stdcall;
    function Set_Accelerator(RHS: OleVariant): HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Get__Default: Integer; stdcall;
    function Set__Default(RHS: Integer): HResult; stdcall;
    function Get_Display3DShading: WordBool; stdcall;
    function Set_Display3DShading(RHS: WordBool): HResult; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_LinkedCell: WideString; stdcall;
    function Set_LinkedCell(const RHS: WideString): HResult; stdcall;
    function Get_PhoneticAccelerator: OleVariant; stdcall;
    function Set_PhoneticAccelerator(RHS: OleVariant): HResult; stdcall;
    function Get_Value: OleVariant; stdcall;
    function Set_Value(RHS: OleVariant): HResult; stdcall;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): CheckBox; stdcall;
    function Get_Count: Integer; stdcall;
    function Group: GroupObject; stdcall;
    function Item(Index: OleVariant): IDispatch; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IOptionButton
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020881-0001-0000-C000-000000000046}
// *********************************************************************//
  IOptionButton = interface(IDispatch)
    ['{00020881-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_BottomRightCell: Range; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    function Get_TopLeftCell: Range; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant): HResult; stdcall;
    function Get_LockedText: WordBool; stdcall;
    function Set_LockedText(RHS: WordBool): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Get_Accelerator: OleVariant; stdcall;
    function Set_Accelerator(RHS: OleVariant): HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Get__Default: Integer; stdcall;
    function Set__Default(RHS: Integer): HResult; stdcall;
    function Get_Display3DShading: WordBool; stdcall;
    function Set_Display3DShading(RHS: WordBool): HResult; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_LinkedCell: WideString; stdcall;
    function Set_LinkedCell(const RHS: WideString): HResult; stdcall;
    function Get_PhoneticAccelerator: OleVariant; stdcall;
    function Set_PhoneticAccelerator(RHS: OleVariant): HResult; stdcall;
    function Get_Value: OleVariant; stdcall;
    function Set_Value(RHS: OleVariant): HResult; stdcall;
    function Get_GroupBox: GroupBox; stdcall;
  end;

// *********************************************************************//
// Interface: IOptionButtons
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020882-0001-0000-C000-000000000046}
// *********************************************************************//
  IOptionButtons = interface(IDispatch)
    ['{00020882-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant): HResult; stdcall;
    function Get_LockedText: WordBool; stdcall;
    function Set_LockedText(RHS: WordBool): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Get_Accelerator: OleVariant; stdcall;
    function Set_Accelerator(RHS: OleVariant): HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Get__Default: Integer; stdcall;
    function Set__Default(RHS: Integer): HResult; stdcall;
    function Get_Display3DShading: WordBool; stdcall;
    function Set_Display3DShading(RHS: WordBool): HResult; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_LinkedCell: WideString; stdcall;
    function Set_LinkedCell(const RHS: WideString): HResult; stdcall;
    function Get_PhoneticAccelerator: OleVariant; stdcall;
    function Set_PhoneticAccelerator(RHS: OleVariant): HResult; stdcall;
    function Get_Value: OleVariant; stdcall;
    function Set_Value(RHS: OleVariant): HResult; stdcall;
    function Get_GroupBox: GroupBox; stdcall;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): OptionButton; stdcall;
    function Get_Count: Integer; stdcall;
    function Group: GroupObject; stdcall;
    function Item(Index: OleVariant): IDispatch; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IEditBox
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020883-0001-0000-C000-000000000046}
// *********************************************************************//
  IEditBox = interface(IDispatch)
    ['{00020883-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_BottomRightCell: Range; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    function Get_TopLeftCell: Range; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant): HResult; stdcall;
    function Get_LockedText: WordBool; stdcall;
    function Set_LockedText(RHS: WordBool): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Get_DisplayVerticalScrollBar: WordBool; stdcall;
    function Set_DisplayVerticalScrollBar(RHS: WordBool): HResult; stdcall;
    function Get_InputType: Integer; stdcall;
    function Set_InputType(RHS: Integer): HResult; stdcall;
    function Get_LinkedObject: WideString; stdcall;
    function Get_MultiLine: WordBool; stdcall;
    function Set_MultiLine(RHS: WordBool): HResult; stdcall;
    function Get_PasswordEdit: WordBool; stdcall;
    function Set_PasswordEdit(RHS: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IEditBoxes
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020884-0001-0000-C000-000000000046}
// *********************************************************************//
  IEditBoxes = interface(IDispatch)
    ['{00020884-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant): HResult; stdcall;
    function Get_LockedText: WordBool; stdcall;
    function Set_LockedText(RHS: WordBool): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Get_DisplayVerticalScrollBar: WordBool; stdcall;
    function Set_DisplayVerticalScrollBar(RHS: WordBool): HResult; stdcall;
    function Get_InputType: Integer; stdcall;
    function Set_InputType(RHS: Integer): HResult; stdcall;
    procedure _Dummy34; stdcall;
    function Get_MultiLine: WordBool; stdcall;
    function Set_MultiLine(RHS: WordBool): HResult; stdcall;
    function Get_PasswordEdit: WordBool; stdcall;
    function Set_PasswordEdit(RHS: WordBool): HResult; stdcall;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): EditBox; stdcall;
    function Get_Count: Integer; stdcall;
    function Group: GroupObject; stdcall;
    function Item(Index: OleVariant): OleVariant; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IScrollBar
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020885-0001-0000-C000-000000000046}
// *********************************************************************//
  IScrollBar = interface(IDispatch)
    ['{00020885-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_BottomRightCell: Range; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    function Get_TopLeftCell: Range; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get__Default: Integer; stdcall;
    function Set__Default(RHS: Integer): HResult; stdcall;
    function Get_Display3DShading: WordBool; stdcall;
    function Set_Display3DShading(RHS: WordBool): HResult; stdcall;
    function Get_LinkedCell: WideString; stdcall;
    function Set_LinkedCell(const RHS: WideString): HResult; stdcall;
    function Get_Max: Integer; stdcall;
    function Set_Max(RHS: Integer): HResult; stdcall;
    function Get_Min: Integer; stdcall;
    function Set_Min(RHS: Integer): HResult; stdcall;
    function Get_SmallChange: Integer; stdcall;
    function Set_SmallChange(RHS: Integer): HResult; stdcall;
    function Get_Value: Integer; stdcall;
    function Set_Value(RHS: Integer): HResult; stdcall;
    function Get_LargeChange: Integer; stdcall;
    function Set_LargeChange(RHS: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IScrollBars
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020886-0001-0000-C000-000000000046}
// *********************************************************************//
  IScrollBars = interface(IDispatch)
    ['{00020886-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get__Default: Integer; stdcall;
    function Set__Default(RHS: Integer): HResult; stdcall;
    function Get_Display3DShading: WordBool; stdcall;
    function Set_Display3DShading(RHS: WordBool): HResult; stdcall;
    function Get_LinkedCell: WideString; stdcall;
    function Set_LinkedCell(const RHS: WideString): HResult; stdcall;
    function Get_Max: Integer; stdcall;
    function Set_Max(RHS: Integer): HResult; stdcall;
    function Get_Min: Integer; stdcall;
    function Set_Min(RHS: Integer): HResult; stdcall;
    function Get_SmallChange: Integer; stdcall;
    function Set_SmallChange(RHS: Integer): HResult; stdcall;
    function Get_Value: Integer; stdcall;
    function Set_Value(RHS: Integer): HResult; stdcall;
    function Get_LargeChange: Integer; stdcall;
    function Set_LargeChange(RHS: Integer): HResult; stdcall;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): ScrollBar; stdcall;
    function Get_Count: Integer; stdcall;
    function Group: GroupObject; stdcall;
    function Item(Index: OleVariant): IDispatch; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IListBox
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020887-0001-0000-C000-000000000046}
// *********************************************************************//
  IListBox = interface(IDispatch)
    ['{00020887-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_BottomRightCell: Range; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    function Get_TopLeftCell: Range; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function AddItem(Text: OleVariant; Index: OleVariant): HResult; stdcall;
    function Get_Display3DShading: WordBool; stdcall;
    function Set_Display3DShading(RHS: WordBool): HResult; stdcall;
    function Get__Default: Integer; stdcall;
    function Set__Default(RHS: Integer): HResult; stdcall;
    function Get_LinkedCell: WideString; stdcall;
    function Set_LinkedCell(const RHS: WideString): HResult; stdcall;
    function Get_LinkedObject: OleVariant; stdcall;
    function List(Index: OleVariant): OleVariant; stdcall;
    function Get_ListCount: Integer; stdcall;
    function Get_ListFillRange: WideString; stdcall;
    function Set_ListFillRange(const RHS: WideString): HResult; stdcall;
    function Get_ListIndex: Integer; stdcall;
    function Set_ListIndex(RHS: Integer): HResult; stdcall;
    function Get_MultiSelect: Integer; stdcall;
    function Set_MultiSelect(RHS: Integer): HResult; stdcall;
    function RemoveAllItems: HResult; stdcall;
    function RemoveItem(Index: Integer; Count: OleVariant): HResult; stdcall;
    function Selected(Index: OleVariant): OleVariant; stdcall;
    function Get_Value: Integer; stdcall;
    function Set_Value(RHS: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IListBoxes
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020888-0001-0000-C000-000000000046}
// *********************************************************************//
  IListBoxes = interface(IDispatch)
    ['{00020888-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function AddItem(Text: OleVariant; Index: OleVariant): HResult; stdcall;
    function Get_Display3DShading: WordBool; stdcall;
    function Set_Display3DShading(RHS: WordBool): HResult; stdcall;
    function Get__Default: Integer; stdcall;
    function Set__Default(RHS: Integer): HResult; stdcall;
    function Get_LinkedCell: WideString; stdcall;
    function Set_LinkedCell(const RHS: WideString): HResult; stdcall;
    procedure _Dummy31; stdcall;
    function List(Index: OleVariant): OleVariant; stdcall;
    procedure _Dummy33; stdcall;
    function Get_ListFillRange: WideString; stdcall;
    function Set_ListFillRange(const RHS: WideString): HResult; stdcall;
    function Get_ListIndex: Integer; stdcall;
    function Set_ListIndex(RHS: Integer): HResult; stdcall;
    function Get_MultiSelect: Integer; stdcall;
    function Set_MultiSelect(RHS: Integer): HResult; stdcall;
    function RemoveAllItems: HResult; stdcall;
    function RemoveItem(Index: Integer; Count: OleVariant): HResult; stdcall;
    function Selected(Index: OleVariant): OleVariant; stdcall;
    function Get_Value: Integer; stdcall;
    function Set_Value(RHS: Integer): HResult; stdcall;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): ListBox; stdcall;
    function Get_Count: Integer; stdcall;
    function Group: GroupObject; stdcall;
    function Item(Index: OleVariant): IDispatch; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IGroupBox
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020889-0001-0000-C000-000000000046}
// *********************************************************************//
  IGroupBox = interface(IDispatch)
    ['{00020889-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_BottomRightCell: Range; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    function Get_TopLeftCell: Range; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant): HResult; stdcall;
    function Get_LockedText: WordBool; stdcall;
    function Set_LockedText(RHS: WordBool): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Get_Accelerator: OleVariant; stdcall;
    function Set_Accelerator(RHS: OleVariant): HResult; stdcall;
    function Get_Display3DShading: WordBool; stdcall;
    function Set_Display3DShading(RHS: WordBool): HResult; stdcall;
    function Get_PhoneticAccelerator: OleVariant; stdcall;
    function Set_PhoneticAccelerator(RHS: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IGroupBoxes
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002088A-0001-0000-C000-000000000046}
// *********************************************************************//
  IGroupBoxes = interface(IDispatch)
    ['{0002088A-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant): HResult; stdcall;
    function Get_LockedText: WordBool; stdcall;
    function Set_LockedText(RHS: WordBool): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Get_Accelerator: OleVariant; stdcall;
    function Set_Accelerator(RHS: OleVariant): HResult; stdcall;
    function Get_Display3DShading: WordBool; stdcall;
    function Set_Display3DShading(RHS: WordBool): HResult; stdcall;
    function Get_PhoneticAccelerator: OleVariant; stdcall;
    function Set_PhoneticAccelerator(RHS: OleVariant): HResult; stdcall;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): GroupBox; stdcall;
    function Get_Count: Integer; stdcall;
    function Group: GroupObject; stdcall;
    function Item(Index: OleVariant): IDispatch; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IDropDown
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002088B-0001-0000-C000-000000000046}
// *********************************************************************//
  IDropDown = interface(IDispatch)
    ['{0002088B-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_BottomRightCell: Range; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    function Get_TopLeftCell: Range; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function AddItem(Text: OleVariant; Index: OleVariant): HResult; stdcall;
    function Get_Display3DShading: WordBool; stdcall;
    function Set_Display3DShading(RHS: WordBool): HResult; stdcall;
    function Get__Default: Integer; stdcall;
    function Set__Default(RHS: Integer): HResult; stdcall;
    function Get_LinkedCell: WideString; stdcall;
    function Set_LinkedCell(const RHS: WideString): HResult; stdcall;
    function Get_LinkedObject: OleVariant; stdcall;
    function List(Index: OleVariant): OleVariant; stdcall;
    function Get_ListCount: Integer; stdcall;
    function Get_ListFillRange: WideString; stdcall;
    function Set_ListFillRange(const RHS: WideString): HResult; stdcall;
    function Get_ListIndex: Integer; stdcall;
    function Set_ListIndex(RHS: Integer): HResult; stdcall;
    procedure _Dummy36; stdcall;
    function RemoveAllItems: HResult; stdcall;
    function RemoveItem(Index: Integer; Count: OleVariant): HResult; stdcall;
    function Selected(Index: OleVariant): OleVariant; stdcall;
    function Get_Value: Integer; stdcall;
    function Set_Value(RHS: Integer): HResult; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function Get_DropDownLines: Integer; stdcall;
    function Set_DropDownLines(RHS: Integer): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDropDowns
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002088C-0001-0000-C000-000000000046}
// *********************************************************************//
  IDropDowns = interface(IDispatch)
    ['{0002088C-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function AddItem(Text: OleVariant; Index: OleVariant): HResult; stdcall;
    function Get_Display3DShading: WordBool; stdcall;
    function Set_Display3DShading(RHS: WordBool): HResult; stdcall;
    function Get__Default: Integer; stdcall;
    function Set__Default(RHS: Integer): HResult; stdcall;
    function Get_LinkedCell: WideString; stdcall;
    function Set_LinkedCell(const RHS: WideString): HResult; stdcall;
    procedure _Dummy31; stdcall;
    function List(Index: OleVariant): OleVariant; stdcall;
    procedure _Dummy33; stdcall;
    function Get_ListFillRange: WideString; stdcall;
    function Set_ListFillRange(const RHS: WideString): HResult; stdcall;
    function Get_ListIndex: Integer; stdcall;
    function Set_ListIndex(RHS: Integer): HResult; stdcall;
    procedure _Dummy36; stdcall;
    function RemoveAllItems: HResult; stdcall;
    function RemoveItem(Index: Integer; Count: OleVariant): HResult; stdcall;
    function Selected(Index: OleVariant): OleVariant; stdcall;
    function Get_Value: Integer; stdcall;
    function Set_Value(RHS: Integer): HResult; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function Get_DropDownLines: Integer; stdcall;
    function Set_DropDownLines(RHS: Integer): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double; Editable: OleVariant): DropDown; stdcall;
    function Get_Count: Integer; stdcall;
    function Group: GroupObject; stdcall;
    function Item(Index: OleVariant): IDispatch; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: ISpinner
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002088D-0001-0000-C000-000000000046}
// *********************************************************************//
  ISpinner = interface(IDispatch)
    ['{0002088D-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_BottomRightCell: Range; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    function Get_TopLeftCell: Range; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get__Default: Integer; stdcall;
    function Set__Default(RHS: Integer): HResult; stdcall;
    function Get_Display3DShading: WordBool; stdcall;
    function Set_Display3DShading(RHS: WordBool): HResult; stdcall;
    function Get_LinkedCell: WideString; stdcall;
    function Set_LinkedCell(const RHS: WideString): HResult; stdcall;
    function Get_Max: Integer; stdcall;
    function Set_Max(RHS: Integer): HResult; stdcall;
    function Get_Min: Integer; stdcall;
    function Set_Min(RHS: Integer): HResult; stdcall;
    function Get_SmallChange: Integer; stdcall;
    function Set_SmallChange(RHS: Integer): HResult; stdcall;
    function Get_Value: Integer; stdcall;
    function Set_Value(RHS: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISpinners
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002088E-0001-0000-C000-000000000046}
// *********************************************************************//
  ISpinners = interface(IDispatch)
    ['{0002088E-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get__Default: Integer; stdcall;
    function Set__Default(RHS: Integer): HResult; stdcall;
    function Get_Display3DShading: WordBool; stdcall;
    function Set_Display3DShading(RHS: WordBool): HResult; stdcall;
    function Get_LinkedCell: WideString; stdcall;
    function Set_LinkedCell(const RHS: WideString): HResult; stdcall;
    function Get_Max: Integer; stdcall;
    function Set_Max(RHS: Integer): HResult; stdcall;
    function Get_Min: Integer; stdcall;
    function Set_Min(RHS: Integer): HResult; stdcall;
    function Get_SmallChange: Integer; stdcall;
    function Set_SmallChange(RHS: Integer): HResult; stdcall;
    function Get_Value: Integer; stdcall;
    function Set_Value(RHS: Integer): HResult; stdcall;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): Spinner; stdcall;
    function Get_Count: Integer; stdcall;
    function Group: GroupObject; stdcall;
    function Item(Index: OleVariant): IDispatch; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IDialogFrame
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002088F-0001-0000-C000-000000000046}
// *********************************************************************//
  IDialogFrame = interface(IDispatch)
    ['{0002088F-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    procedure _Dummy3; stdcall;
    procedure _Dummy4; stdcall;
    procedure _Dummy5; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    procedure _Dummy7; stdcall;
    procedure _Dummy8; stdcall;
    procedure _Dummy9; stdcall;
    procedure _Dummy10; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    procedure _Dummy17; stdcall;
    procedure _Dummy18; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    procedure _Dummy20; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    procedure _Dummy23; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    procedure _Dummy25; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant): HResult; stdcall;
    function Get_LockedText: WordBool; stdcall;
    function Set_LockedText(RHS: WordBool): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ILabel
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020890-0001-0000-C000-000000000046}
// *********************************************************************//
  ILabel = interface(IDispatch)
    ['{00020890-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_BottomRightCell: Range; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    function Get_TopLeftCell: Range; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant): HResult; stdcall;
    function Get_LockedText: WordBool; stdcall;
    function Set_LockedText(RHS: WordBool): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Get_Accelerator: OleVariant; stdcall;
    function Set_Accelerator(RHS: OleVariant): HResult; stdcall;
    procedure _Dummy33; stdcall;
    function Get_PhoneticAccelerator: OleVariant; stdcall;
    function Set_PhoneticAccelerator(RHS: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ILabels
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020891-0001-0000-C000-000000000046}
// *********************************************************************//
  ILabels = interface(IDispatch)
    ['{00020891-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant): HResult; stdcall;
    function Get_LockedText: WordBool; stdcall;
    function Set_LockedText(RHS: WordBool): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Get_Accelerator: OleVariant; stdcall;
    function Set_Accelerator(RHS: OleVariant): HResult; stdcall;
    procedure _Dummy33; stdcall;
    function Get_PhoneticAccelerator: OleVariant; stdcall;
    function Set_PhoneticAccelerator(RHS: OleVariant): HResult; stdcall;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): Label_; stdcall;
    function Get_Count: Integer; stdcall;
    function Group: GroupObject; stdcall;
    function Item(Index: OleVariant): IDispatch; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IPanes
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020894-0001-0000-C000-000000000046}
// *********************************************************************//
  IPanes = interface(IDispatch)
    ['{00020894-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Count: Integer; stdcall;
    function Get_Item(Index: Integer): Pane; stdcall;
    function Get__Default(Index: Integer): Pane; stdcall;
  end;

// *********************************************************************//
// Interface: IPane
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020895-0001-0000-C000-000000000046}
// *********************************************************************//
  IPane = interface(IDispatch)
    ['{00020895-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Activate: HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function LargeScroll(Down: OleVariant; Up: OleVariant; ToRight: OleVariant; ToLeft: OleVariant): HResult; stdcall;
    function Get_ScrollColumn: Integer; stdcall;
    function Set_ScrollColumn(RHS: Integer): HResult; stdcall;
    function Get_ScrollRow: Integer; stdcall;
    function Set_ScrollRow(RHS: Integer): HResult; stdcall;
    function SmallScroll(Down: OleVariant; Up: OleVariant; ToRight: OleVariant; ToLeft: OleVariant): HResult; stdcall;
    function Get_VisibleRange: Range; stdcall;
  end;

// *********************************************************************//
// Interface: IScenarios
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020896-0001-0000-C000-000000000046}
// *********************************************************************//
  IScenarios = interface(IDispatch)
    ['{00020896-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Add(const Name: WideString; ChangingCells: OleVariant; Values: OleVariant; 
                 Comment: OleVariant; Locked: OleVariant; Hidden: OleVariant): Scenario; stdcall;
    function Get_Count: Integer; stdcall;
    function CreateSummary(ReportType: XlSummaryReportType; ResultCells: OleVariant): HResult; stdcall;
    function Item(Index: OleVariant): Scenario; stdcall;
    function Merge(Source: OleVariant): HResult; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IScenario
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020897-0001-0000-C000-000000000046}
// *********************************************************************//
  IScenario = interface(IDispatch)
    ['{00020897-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function ChangeScenario(ChangingCells: OleVariant; Values: OleVariant): HResult; stdcall;
    function Get_ChangingCells: Range; stdcall;
    function Get_Comment: WideString; stdcall;
    function Set_Comment(const RHS: WideString): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_Hidden: WordBool; stdcall;
    function Set_Hidden(RHS: WordBool): HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Show: HResult; stdcall;
    function Get_Values(Index: OleVariant): OleVariant; stdcall;
  end;

// *********************************************************************//
// Interface: IGroupObject
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020898-0001-0000-C000-000000000046}
// *********************************************************************//
  IGroupObject = interface(IDispatch)
    ['{00020898-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_BottomRightCell: Range; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    function Get_TopLeftCell: Range; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    procedure _Dummy27; stdcall;
    procedure _Dummy28; stdcall;
    function Get_AddIndent: WordBool; stdcall;
    function Set_AddIndent(RHS: WordBool): HResult; stdcall;
    procedure _Dummy30; stdcall;
    function Get_ArrowHeadLength: OleVariant; stdcall;
    function Set_ArrowHeadLength(RHS: OleVariant): HResult; stdcall;
    function Get_ArrowHeadStyle: OleVariant; stdcall;
    function Set_ArrowHeadStyle(RHS: OleVariant): HResult; stdcall;
    function Get_ArrowHeadWidth: OleVariant; stdcall;
    function Set_ArrowHeadWidth(RHS: OleVariant): HResult; stdcall;
    function Get_AutoSize: WordBool; stdcall;
    function Set_AutoSize(RHS: WordBool): HResult; stdcall;
    function Get_Border: Border; stdcall;
    procedure _Dummy36; stdcall;
    procedure _Dummy37; stdcall;
    procedure _Dummy38; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant): HResult; stdcall;
    function Get__Default: Integer; stdcall;
    function Set__Default(RHS: Integer): HResult; stdcall;
    procedure _Dummy41; stdcall;
    procedure _Dummy42; stdcall;
    procedure _Dummy43; stdcall;
    procedure _Dummy44; stdcall;
    procedure _Dummy45; stdcall;
    function Get_Font: Font; stdcall;
    procedure _Dummy47; stdcall;
    procedure _Dummy48; stdcall;
    function Get_HorizontalAlignment: OleVariant; stdcall;
    function Set_HorizontalAlignment(RHS: OleVariant): HResult; stdcall;
    procedure _Dummy50; stdcall;
    function Get_Interior: Interior; stdcall;
    procedure _Dummy52; stdcall;
    procedure _Dummy53; stdcall;
    procedure _Dummy54; stdcall;
    procedure _Dummy55; stdcall;
    procedure _Dummy56; stdcall;
    procedure _Dummy57; stdcall;
    procedure _Dummy58; stdcall;
    procedure _Dummy59; stdcall;
    procedure _Dummy60; stdcall;
    procedure _Dummy61; stdcall;
    procedure _Dummy62; stdcall;
    procedure _Dummy63; stdcall;
    function Get_Orientation: OleVariant; stdcall;
    function Set_Orientation(RHS: OleVariant): HResult; stdcall;
    procedure _Dummy65; stdcall;
    procedure _Dummy66; stdcall;
    procedure _Dummy67; stdcall;
    procedure _Dummy68; stdcall;
    function Get_RoundedCorners: WordBool; stdcall;
    function Set_RoundedCorners(RHS: WordBool): HResult; stdcall;
    procedure _Dummy70; stdcall;
    function Get_Shadow: WordBool; stdcall;
    function Set_Shadow(RHS: WordBool): HResult; stdcall;
    procedure _Dummy72; stdcall;
    procedure _Dummy73; stdcall;
    function Ungroup: IDispatch; stdcall;
    procedure _Dummy75; stdcall;
    function Get_VerticalAlignment: OleVariant; stdcall;
    function Set_VerticalAlignment(RHS: OleVariant): HResult; stdcall;
    procedure _Dummy77; stdcall;
    function Get_ReadingOrder: Integer; stdcall;
    function Set_ReadingOrder(RHS: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IGroupObjects
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020899-0001-0000-C000-000000000046}
// *********************************************************************//
  IGroupObjects = interface(IDispatch)
    ['{00020899-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    procedure _Dummy27; stdcall;
    procedure _Dummy28; stdcall;
    function Get_AddIndent: WordBool; stdcall;
    function Set_AddIndent(RHS: WordBool): HResult; stdcall;
    procedure _Dummy30; stdcall;
    function Get_ArrowHeadLength: OleVariant; stdcall;
    function Set_ArrowHeadLength(RHS: OleVariant): HResult; stdcall;
    function Get_ArrowHeadStyle: OleVariant; stdcall;
    function Set_ArrowHeadStyle(RHS: OleVariant): HResult; stdcall;
    function Get_ArrowHeadWidth: OleVariant; stdcall;
    function Set_ArrowHeadWidth(RHS: OleVariant): HResult; stdcall;
    function Get_AutoSize: WordBool; stdcall;
    function Set_AutoSize(RHS: WordBool): HResult; stdcall;
    function Get_Border: Border; stdcall;
    procedure _Dummy36; stdcall;
    procedure _Dummy37; stdcall;
    procedure _Dummy38; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant): HResult; stdcall;
    function Get__Default: Integer; stdcall;
    function Set__Default(RHS: Integer): HResult; stdcall;
    procedure _Dummy41; stdcall;
    procedure _Dummy42; stdcall;
    procedure _Dummy43; stdcall;
    procedure _Dummy44; stdcall;
    procedure _Dummy45; stdcall;
    function Get_Font: Font; stdcall;
    procedure _Dummy47; stdcall;
    procedure _Dummy48; stdcall;
    function Get_HorizontalAlignment: OleVariant; stdcall;
    function Set_HorizontalAlignment(RHS: OleVariant): HResult; stdcall;
    procedure _Dummy50; stdcall;
    function Get_Interior: Interior; stdcall;
    procedure _Dummy52; stdcall;
    procedure _Dummy53; stdcall;
    procedure _Dummy54; stdcall;
    procedure _Dummy55; stdcall;
    procedure _Dummy56; stdcall;
    procedure _Dummy57; stdcall;
    procedure _Dummy58; stdcall;
    procedure _Dummy59; stdcall;
    procedure _Dummy60; stdcall;
    procedure _Dummy61; stdcall;
    procedure _Dummy62; stdcall;
    procedure _Dummy63; stdcall;
    function Get_Orientation: OleVariant; stdcall;
    function Set_Orientation(RHS: OleVariant): HResult; stdcall;
    procedure _Dummy65; stdcall;
    procedure _Dummy66; stdcall;
    procedure _Dummy67; stdcall;
    procedure _Dummy68; stdcall;
    function Get_RoundedCorners: WordBool; stdcall;
    function Set_RoundedCorners(RHS: WordBool): HResult; stdcall;
    procedure _Dummy70; stdcall;
    function Get_Shadow: WordBool; stdcall;
    function Set_Shadow(RHS: WordBool): HResult; stdcall;
    procedure _Dummy72; stdcall;
    procedure _Dummy73; stdcall;
    function Ungroup: IDispatch; stdcall;
    procedure _Dummy75; stdcall;
    function Get_VerticalAlignment: OleVariant; stdcall;
    function Set_VerticalAlignment(RHS: OleVariant): HResult; stdcall;
    procedure _Dummy77; stdcall;
    function Get_ReadingOrder: Integer; stdcall;
    function Set_ReadingOrder(RHS: Integer): HResult; stdcall;
    function Get_Count: Integer; stdcall;
    function Group: GroupObject; stdcall;
    function Item(Index: OleVariant): IDispatch; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: ILine
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002089A-0001-0000-C000-000000000046}
// *********************************************************************//
  ILine = interface(IDispatch)
    ['{0002089A-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_BottomRightCell: Range; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    function Get_TopLeftCell: Range; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_ArrowHeadLength: OleVariant; stdcall;
    function Set_ArrowHeadLength(RHS: OleVariant): HResult; stdcall;
    function Get_ArrowHeadStyle: OleVariant; stdcall;
    function Set_ArrowHeadStyle(RHS: OleVariant): HResult; stdcall;
    function Get_ArrowHeadWidth: OleVariant; stdcall;
    function Set_ArrowHeadWidth(RHS: OleVariant): HResult; stdcall;
    function Get_Border: Border; stdcall;
  end;

// *********************************************************************//
// Interface: ILines
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002089B-0001-0000-C000-000000000046}
// *********************************************************************//
  ILines = interface(IDispatch)
    ['{0002089B-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_ArrowHeadLength: OleVariant; stdcall;
    function Set_ArrowHeadLength(RHS: OleVariant): HResult; stdcall;
    function Get_ArrowHeadStyle: OleVariant; stdcall;
    function Set_ArrowHeadStyle(RHS: OleVariant): HResult; stdcall;
    function Get_ArrowHeadWidth: OleVariant; stdcall;
    function Set_ArrowHeadWidth(RHS: OleVariant): HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Add(X1: Double; Y1: Double; X2: Double; Y2: Double): Line; stdcall;
    function Get_Count: Integer; stdcall;
    function Group: GroupObject; stdcall;
    function Item(Index: OleVariant): IDispatch; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IRectangle
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002089C-0001-0000-C000-000000000046}
// *********************************************************************//
  IRectangle = interface(IDispatch)
    ['{0002089C-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_BottomRightCell: Range; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    function Get_TopLeftCell: Range; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_AddIndent: WordBool; stdcall;
    function Set_AddIndent(RHS: WordBool): HResult; stdcall;
    function Get_AutoScaleFont: OleVariant; stdcall;
    function Set_AutoScaleFont(RHS: OleVariant): HResult; stdcall;
    function Get_AutoSize: WordBool; stdcall;
    function Set_AutoSize(RHS: WordBool): HResult; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant): HResult; stdcall;
    function Get_Font: Font; stdcall;
    function Get_Formula: WideString; stdcall;
    function Set_Formula(const RHS: WideString): HResult; stdcall;
    function Get_HorizontalAlignment: OleVariant; stdcall;
    function Set_HorizontalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_LockedText: WordBool; stdcall;
    function Set_LockedText(RHS: WordBool): HResult; stdcall;
    function Get_Orientation: OleVariant; stdcall;
    function Set_Orientation(RHS: OleVariant): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Get_VerticalAlignment: OleVariant; stdcall;
    function Set_VerticalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_ReadingOrder: Integer; stdcall;
    function Set_ReadingOrder(RHS: Integer): HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Shadow: WordBool; stdcall;
    function Set_Shadow(RHS: WordBool): HResult; stdcall;
    function Get_RoundedCorners: WordBool; stdcall;
    function Set_RoundedCorners(RHS: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IRectangles
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002089D-0001-0000-C000-000000000046}
// *********************************************************************//
  IRectangles = interface(IDispatch)
    ['{0002089D-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_AddIndent: WordBool; stdcall;
    function Set_AddIndent(RHS: WordBool): HResult; stdcall;
    function Get_AutoScaleFont: OleVariant; stdcall;
    function Set_AutoScaleFont(RHS: OleVariant): HResult; stdcall;
    function Get_AutoSize: WordBool; stdcall;
    function Set_AutoSize(RHS: WordBool): HResult; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant): HResult; stdcall;
    function Get_Font: Font; stdcall;
    function Get_Formula: WideString; stdcall;
    function Set_Formula(const RHS: WideString): HResult; stdcall;
    function Get_HorizontalAlignment: OleVariant; stdcall;
    function Set_HorizontalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_LockedText: WordBool; stdcall;
    function Set_LockedText(RHS: WordBool): HResult; stdcall;
    function Get_Orientation: OleVariant; stdcall;
    function Set_Orientation(RHS: OleVariant): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Get_VerticalAlignment: OleVariant; stdcall;
    function Set_VerticalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_ReadingOrder: Integer; stdcall;
    function Set_ReadingOrder(RHS: Integer): HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Shadow: WordBool; stdcall;
    function Set_Shadow(RHS: WordBool): HResult; stdcall;
    function Get_RoundedCorners: WordBool; stdcall;
    function Set_RoundedCorners(RHS: WordBool): HResult; stdcall;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): Rectangle; stdcall;
    function Get_Count: Integer; stdcall;
    function Group: GroupObject; stdcall;
    function Item(Index: OleVariant): IDispatch; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IOval
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002089E-0001-0000-C000-000000000046}
// *********************************************************************//
  IOval = interface(IDispatch)
    ['{0002089E-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_BottomRightCell: Range; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    function Get_TopLeftCell: Range; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_AddIndent: WordBool; stdcall;
    function Set_AddIndent(RHS: WordBool): HResult; stdcall;
    function Get_AutoScaleFont: OleVariant; stdcall;
    function Set_AutoScaleFont(RHS: OleVariant): HResult; stdcall;
    function Get_AutoSize: WordBool; stdcall;
    function Set_AutoSize(RHS: WordBool): HResult; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant): HResult; stdcall;
    function Get_Font: Font; stdcall;
    function Get_Formula: WideString; stdcall;
    function Set_Formula(const RHS: WideString): HResult; stdcall;
    function Get_HorizontalAlignment: OleVariant; stdcall;
    function Set_HorizontalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_LockedText: WordBool; stdcall;
    function Set_LockedText(RHS: WordBool): HResult; stdcall;
    function Get_Orientation: OleVariant; stdcall;
    function Set_Orientation(RHS: OleVariant): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Get_VerticalAlignment: OleVariant; stdcall;
    function Set_VerticalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_ReadingOrder: Integer; stdcall;
    function Set_ReadingOrder(RHS: Integer): HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Shadow: WordBool; stdcall;
    function Set_Shadow(RHS: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IOvals
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002089F-0001-0000-C000-000000000046}
// *********************************************************************//
  IOvals = interface(IDispatch)
    ['{0002089F-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_AddIndent: WordBool; stdcall;
    function Set_AddIndent(RHS: WordBool): HResult; stdcall;
    function Get_AutoScaleFont: OleVariant; stdcall;
    function Set_AutoScaleFont(RHS: OleVariant): HResult; stdcall;
    function Get_AutoSize: WordBool; stdcall;
    function Set_AutoSize(RHS: WordBool): HResult; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant): HResult; stdcall;
    function Get_Font: Font; stdcall;
    function Get_Formula: WideString; stdcall;
    function Set_Formula(const RHS: WideString): HResult; stdcall;
    function Get_HorizontalAlignment: OleVariant; stdcall;
    function Set_HorizontalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_LockedText: WordBool; stdcall;
    function Set_LockedText(RHS: WordBool): HResult; stdcall;
    function Get_Orientation: OleVariant; stdcall;
    function Set_Orientation(RHS: OleVariant): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Get_VerticalAlignment: OleVariant; stdcall;
    function Set_VerticalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_ReadingOrder: Integer; stdcall;
    function Set_ReadingOrder(RHS: Integer): HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Shadow: WordBool; stdcall;
    function Set_Shadow(RHS: WordBool): HResult; stdcall;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): Oval; stdcall;
    function Get_Count: Integer; stdcall;
    function Group: GroupObject; stdcall;
    function Item(Index: OleVariant): IDispatch; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IArc
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208A0-0001-0000-C000-000000000046}
// *********************************************************************//
  IArc = interface(IDispatch)
    ['{000208A0-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_BottomRightCell: Range; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    function Get_TopLeftCell: Range; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_AddIndent: WordBool; stdcall;
    function Set_AddIndent(RHS: WordBool): HResult; stdcall;
    function Get_AutoScaleFont: OleVariant; stdcall;
    function Set_AutoScaleFont(RHS: OleVariant): HResult; stdcall;
    function Get_AutoSize: WordBool; stdcall;
    function Set_AutoSize(RHS: WordBool): HResult; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant): HResult; stdcall;
    function Get_Font: Font; stdcall;
    function Get_Formula: WideString; stdcall;
    function Set_Formula(const RHS: WideString): HResult; stdcall;
    function Get_HorizontalAlignment: OleVariant; stdcall;
    function Set_HorizontalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_LockedText: WordBool; stdcall;
    function Set_LockedText(RHS: WordBool): HResult; stdcall;
    function Get_Orientation: OleVariant; stdcall;
    function Set_Orientation(RHS: OleVariant): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Get_VerticalAlignment: OleVariant; stdcall;
    function Set_VerticalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_ReadingOrder: Integer; stdcall;
    function Set_ReadingOrder(RHS: Integer): HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Get_Interior: Interior; stdcall;
    procedure _Dummy43; stdcall;
  end;

// *********************************************************************//
// Interface: IArcs
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208A1-0001-0000-C000-000000000046}
// *********************************************************************//
  IArcs = interface(IDispatch)
    ['{000208A1-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_AddIndent: WordBool; stdcall;
    function Set_AddIndent(RHS: WordBool): HResult; stdcall;
    function Get_AutoScaleFont: OleVariant; stdcall;
    function Set_AutoScaleFont(RHS: OleVariant): HResult; stdcall;
    function Get_AutoSize: WordBool; stdcall;
    function Set_AutoSize(RHS: WordBool): HResult; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant): HResult; stdcall;
    function Get_Font: Font; stdcall;
    function Get_Formula: WideString; stdcall;
    function Set_Formula(const RHS: WideString): HResult; stdcall;
    function Get_HorizontalAlignment: OleVariant; stdcall;
    function Set_HorizontalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_LockedText: WordBool; stdcall;
    function Set_LockedText(RHS: WordBool): HResult; stdcall;
    function Get_Orientation: OleVariant; stdcall;
    function Set_Orientation(RHS: OleVariant): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Get_VerticalAlignment: OleVariant; stdcall;
    function Set_VerticalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_ReadingOrder: Integer; stdcall;
    function Set_ReadingOrder(RHS: Integer): HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Get_Interior: Interior; stdcall;
    procedure _Dummy43; stdcall;
    function Add(X1: Double; Y1: Double; X2: Double; Y2: Double): Arc; stdcall;
    function Get_Count: Integer; stdcall;
    function Group: GroupObject; stdcall;
    function Item(Index: OleVariant): IDispatch; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IOLEObjectEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024410-0001-0000-C000-000000000046}
// *********************************************************************//
  IOLEObjectEvents = interface(IDispatch)
    ['{00024410-0001-0000-C000-000000000046}']
    function GotFocus: HResult; stdcall;
    function LostFocus: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: _IOLEObject
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208A2-0001-0000-C000-000000000046}
// *********************************************************************//
  _IOLEObject = interface(IDispatch)
    ['{000208A2-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_BottomRightCell: Range; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    function Get_TopLeftCell: Range; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_Border: Border; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Shadow: WordBool; stdcall;
    function Set_Shadow(RHS: WordBool): HResult; stdcall;
    function Activate: HResult; stdcall;
    function Get_AutoLoad: WordBool; stdcall;
    function Set_AutoLoad(RHS: WordBool): HResult; stdcall;
    function Get_AutoUpdate: WordBool; stdcall;
    function Set_AutoUpdate(RHS: WordBool): HResult; stdcall;
    function Get_Object_: IDispatch; stdcall;
    function Get_OLEType: OleVariant; stdcall;
    function Get_SourceName: WideString; stdcall;
    function Set_SourceName(const RHS: WideString): HResult; stdcall;
    function Update: HResult; stdcall;
    function Verb(Verb: XlOLEVerb): HResult; stdcall;
    function Get_LinkedCell: WideString; stdcall;
    function Set_LinkedCell(const RHS: WideString): HResult; stdcall;
    function Get_ListFillRange: WideString; stdcall;
    function Set_ListFillRange(const RHS: WideString): HResult; stdcall;
    function Get_ProgId: WideString; stdcall;
  end;

// *********************************************************************//
// Interface: IOLEObjects
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208A3-0001-0000-C000-000000000046}
// *********************************************************************//
  IOLEObjects = interface(IDispatch)
    ['{000208A3-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_Border: Border; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Shadow: WordBool; stdcall;
    function Set_Shadow(RHS: WordBool): HResult; stdcall;
    procedure _Dummy30; stdcall;
    function Get_AutoLoad: WordBool; stdcall;
    function Set_AutoLoad(RHS: WordBool): HResult; stdcall;
    procedure _Dummy32; stdcall;
    procedure _Dummy33; stdcall;
    procedure _Dummy34; stdcall;
    function Get_SourceName: WideString; stdcall;
    function Set_SourceName(const RHS: WideString): HResult; stdcall;
    procedure _Dummy36; stdcall;
    procedure _Dummy37; stdcall;
    procedure _Dummy38; stdcall;
    procedure _Dummy39; stdcall;
    procedure _Dummy40; stdcall;
    function Add(ClassType: OleVariant; Filename: OleVariant; Link: OleVariant; 
                 DisplayAsIcon: OleVariant; IconFileName: OleVariant; IconIndex: OleVariant; 
                 IconLabel: OleVariant; Left: OleVariant; Top: OleVariant; Width: OleVariant; 
                 Height: OleVariant): OLEObject; stdcall;
    function Get_Count: Integer; stdcall;
    function Group: GroupObject; stdcall;
    function Item(Index: OleVariant): IDispatch; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: ITextBox
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208A4-0001-0000-C000-000000000046}
// *********************************************************************//
  ITextBox = interface(IDispatch)
    ['{000208A4-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_BottomRightCell: Range; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    function Get_TopLeftCell: Range; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_AddIndent: WordBool; stdcall;
    function Set_AddIndent(RHS: WordBool): HResult; stdcall;
    function Get_AutoScaleFont: OleVariant; stdcall;
    function Set_AutoScaleFont(RHS: OleVariant): HResult; stdcall;
    function Get_AutoSize: WordBool; stdcall;
    function Set_AutoSize(RHS: WordBool): HResult; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant): HResult; stdcall;
    function Get_Font: Font; stdcall;
    function Get_Formula: WideString; stdcall;
    function Set_Formula(const RHS: WideString): HResult; stdcall;
    function Get_HorizontalAlignment: OleVariant; stdcall;
    function Set_HorizontalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_LockedText: WordBool; stdcall;
    function Set_LockedText(RHS: WordBool): HResult; stdcall;
    function Get_Orientation: OleVariant; stdcall;
    function Set_Orientation(RHS: OleVariant): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Get_VerticalAlignment: OleVariant; stdcall;
    function Set_VerticalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_ReadingOrder: Integer; stdcall;
    function Set_ReadingOrder(RHS: Integer): HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_RoundedCorners: WordBool; stdcall;
    function Set_RoundedCorners(RHS: WordBool): HResult; stdcall;
    function Get_Shadow: WordBool; stdcall;
    function Set_Shadow(RHS: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ITextBoxes
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208A5-0001-0000-C000-000000000046}
// *********************************************************************//
  ITextBoxes = interface(IDispatch)
    ['{000208A5-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_AddIndent: WordBool; stdcall;
    function Set_AddIndent(RHS: WordBool): HResult; stdcall;
    function Get_AutoScaleFont: OleVariant; stdcall;
    function Set_AutoScaleFont(RHS: OleVariant): HResult; stdcall;
    function Get_AutoSize: WordBool; stdcall;
    function Set_AutoSize(RHS: WordBool): HResult; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant): HResult; stdcall;
    function Get_Font: Font; stdcall;
    function Get_Formula: WideString; stdcall;
    function Set_Formula(const RHS: WideString): HResult; stdcall;
    function Get_HorizontalAlignment: OleVariant; stdcall;
    function Set_HorizontalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_LockedText: WordBool; stdcall;
    function Set_LockedText(RHS: WordBool): HResult; stdcall;
    function Get_Orientation: OleVariant; stdcall;
    function Set_Orientation(RHS: OleVariant): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Get_VerticalAlignment: OleVariant; stdcall;
    function Set_VerticalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_ReadingOrder: Integer; stdcall;
    function Set_ReadingOrder(RHS: Integer): HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_RoundedCorners: WordBool; stdcall;
    function Set_RoundedCorners(RHS: WordBool): HResult; stdcall;
    function Get_Shadow: WordBool; stdcall;
    function Set_Shadow(RHS: WordBool): HResult; stdcall;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): TextBox; stdcall;
    function Get_Count: Integer; stdcall;
    function Group: GroupObject; stdcall;
    function Item(Index: OleVariant): IDispatch; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IPicture
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208A6-0001-0000-C000-000000000046}
// *********************************************************************//
  IPicture = interface(IDispatch)
    ['{000208A6-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_BottomRightCell: Range; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    function Get_TopLeftCell: Range; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_Border: Border; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Shadow: WordBool; stdcall;
    function Set_Shadow(RHS: WordBool): HResult; stdcall;
    function Get_Formula: WideString; stdcall;
    function Set_Formula(const RHS: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPictures
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208A7-0001-0000-C000-000000000046}
// *********************************************************************//
  IPictures = interface(IDispatch)
    ['{000208A7-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_Border: Border; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Shadow: WordBool; stdcall;
    function Set_Shadow(RHS: WordBool): HResult; stdcall;
    function Get_Formula: WideString; stdcall;
    function Set_Formula(const RHS: WideString): HResult; stdcall;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): Picture; stdcall;
    function Get_Count: Integer; stdcall;
    function Group: GroupObject; stdcall;
    function Insert(const Filename: WideString; Converter: OleVariant): Picture; stdcall;
    function Item(Index: OleVariant): IDispatch; stdcall;
    function _NewEnum: IUnknown; stdcall;
    function Paste(Link: OleVariant): Picture; stdcall;
  end;

// *********************************************************************//
// Interface: IDrawing
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208A8-0001-0000-C000-000000000046}
// *********************************************************************//
  IDrawing = interface(IDispatch)
    ['{000208A8-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_BottomRightCell: Range; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    function Get_TopLeftCell: Range; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_AddIndent: WordBool; stdcall;
    function Set_AddIndent(RHS: WordBool): HResult; stdcall;
    function Get_AutoScaleFont: OleVariant; stdcall;
    function Set_AutoScaleFont(RHS: OleVariant): HResult; stdcall;
    function Get_AutoSize: WordBool; stdcall;
    function Set_AutoSize(RHS: WordBool): HResult; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant): HResult; stdcall;
    function Get_Font: Font; stdcall;
    function Get_Formula: WideString; stdcall;
    function Set_Formula(const RHS: WideString): HResult; stdcall;
    function Get_HorizontalAlignment: OleVariant; stdcall;
    function Set_HorizontalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_LockedText: WordBool; stdcall;
    function Set_LockedText(RHS: WordBool): HResult; stdcall;
    function Get_Orientation: OleVariant; stdcall;
    function Set_Orientation(RHS: OleVariant): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Get_VerticalAlignment: OleVariant; stdcall;
    function Set_VerticalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_ReadingOrder: Integer; stdcall;
    function Set_ReadingOrder(RHS: Integer): HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Shadow: WordBool; stdcall;
    function Set_Shadow(RHS: WordBool): HResult; stdcall;
    function AddVertex(Left: Double; Top: Double): HResult; stdcall;
    function Reshape(Vertex: Integer; Insert: WordBool; Left: OleVariant; Top: OleVariant): HResult; stdcall;
    function Get_Vertices(Index1: OleVariant; Index2: OleVariant): OleVariant; stdcall;
  end;

// *********************************************************************//
// Interface: IDrawings
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208A9-0001-0000-C000-000000000046}
// *********************************************************************//
  IDrawings = interface(IDispatch)
    ['{000208A9-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Get_AddIndent: WordBool; stdcall;
    function Set_AddIndent(RHS: WordBool): HResult; stdcall;
    function Get_AutoScaleFont: OleVariant; stdcall;
    function Set_AutoScaleFont(RHS: OleVariant): HResult; stdcall;
    function Get_AutoSize: WordBool; stdcall;
    function Set_AutoSize(RHS: WordBool): HResult; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant): HResult; stdcall;
    function Get_Font: Font; stdcall;
    function Get_Formula: WideString; stdcall;
    function Set_Formula(const RHS: WideString): HResult; stdcall;
    function Get_HorizontalAlignment: OleVariant; stdcall;
    function Set_HorizontalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_LockedText: WordBool; stdcall;
    function Set_LockedText(RHS: WordBool): HResult; stdcall;
    function Get_Orientation: OleVariant; stdcall;
    function Set_Orientation(RHS: OleVariant): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Get_VerticalAlignment: OleVariant; stdcall;
    function Set_VerticalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_ReadingOrder: Integer; stdcall;
    function Set_ReadingOrder(RHS: Integer): HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Shadow: WordBool; stdcall;
    function Set_Shadow(RHS: WordBool): HResult; stdcall;
    procedure _Dummy44; stdcall;
    function Reshape(Vertex: Integer; Insert: WordBool; Left: OleVariant; Top: OleVariant): HResult; stdcall;
    procedure _Dummy46; stdcall;
    function Add(X1: Double; Y1: Double; X2: Double; Y2: Double; Closed: WordBool): Drawing; stdcall;
    function Get_Count: Integer; stdcall;
    function Group: GroupObject; stdcall;
    function Item(Index: OleVariant): IDispatch; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IRoutingSlip
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208AA-0001-0000-C000-000000000046}
// *********************************************************************//
  IRoutingSlip = interface(IDispatch)
    ['{000208AA-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Delivery: XlRoutingSlipDelivery; stdcall;
    function Set_Delivery(RHS: XlRoutingSlipDelivery): HResult; stdcall;
    function Get_Message: OleVariant; stdcall;
    function Set_Message(RHS: OleVariant): HResult; stdcall;
    function Recipients(Index: OleVariant): OleVariant; stdcall;
    function Reset: HResult; stdcall;
    function Get_ReturnWhenDone: WordBool; stdcall;
    function Set_ReturnWhenDone(RHS: WordBool): HResult; stdcall;
    function Get_Status: XlRoutingSlipStatus; stdcall;
    function Get_Subject: OleVariant; stdcall;
    function Set_Subject(RHS: OleVariant): HResult; stdcall;
    function Get_TrackStatus: WordBool; stdcall;
    function Set_TrackStatus(RHS: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IOutline
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208AB-0001-0000-C000-000000000046}
// *********************************************************************//
  IOutline = interface(IDispatch)
    ['{000208AB-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_AutomaticStyles: WordBool; stdcall;
    function Set_AutomaticStyles(RHS: WordBool): HResult; stdcall;
    function ShowLevels(RowLevels: OleVariant; ColumnLevels: OleVariant): HResult; stdcall;
    function Get_SummaryColumn: XlSummaryColumn; stdcall;
    function Set_SummaryColumn(RHS: XlSummaryColumn): HResult; stdcall;
    function Get_SummaryRow: XlSummaryRow; stdcall;
    function Set_SummaryRow(RHS: XlSummaryRow): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IModule
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208AD-0001-0000-C000-000000000046}
// *********************************************************************//
  IModule = interface(IDispatch)
    ['{000208AD-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Activate(lcid: Integer): HResult; stdcall;
    function Copy(Before: OleVariant; After: OleVariant; lcid: Integer): HResult; stdcall;
    function Delete(lcid: Integer): HResult; stdcall;
    function Get_CodeName: WideString; stdcall;
    function Get__CodeName: WideString; stdcall;
    function Set__CodeName(const RHS: WideString): HResult; stdcall;
    function Get_Index(lcid: Integer): Integer; stdcall;
    function Move(Before: OleVariant; After: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_Next: IDispatch; stdcall;
    function Get_OnDoubleClick(lcid: Integer): WideString; stdcall;
    function Set_OnDoubleClick(lcid: Integer; const RHS: WideString): HResult; stdcall;
    function Get_OnSheetActivate(lcid: Integer): WideString; stdcall;
    function Set_OnSheetActivate(lcid: Integer; const RHS: WideString): HResult; stdcall;
    function Get_OnSheetDeactivate(lcid: Integer): WideString; stdcall;
    function Set_OnSheetDeactivate(lcid: Integer; const RHS: WideString): HResult; stdcall;
    function Get_PageSetup: PageSetup; stdcall;
    function Get_Previous: IDispatch; stdcall;
    function PrintOut(From: OleVariant; To_: OleVariant; Copies: OleVariant; Preview: OleVariant; 
                      ActivePrinter: OleVariant; PrintToFile: OleVariant; Collate: OleVariant; 
                      lcid: Integer): HResult; stdcall;
    procedure _Dummy18; stdcall;
    function Protect(Password: OleVariant; DrawingObjects: OleVariant; Contents: OleVariant; 
                     Scenarios: OleVariant; UserInterfaceOnly: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_ProtectContents(lcid: Integer): WordBool; stdcall;
    procedure _Dummy21; stdcall;
    function Get_ProtectionMode(lcid: Integer): WordBool; stdcall;
    procedure _Dummy23; stdcall;
    function SaveAs(const Filename: WideString; FileFormat: OleVariant; Password: OleVariant; 
                    WriteResPassword: OleVariant; ReadOnlyRecommended: OleVariant; 
                    CreateBackup: OleVariant; AddToMru: OleVariant; TextCodepage: OleVariant; 
                    TextVisualLayout: OleVariant; lcid: Integer): HResult; stdcall;
    function Select(Replace: OleVariant; lcid: Integer): HResult; stdcall;
    function Unprotect(Password: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_Visible(lcid: Integer): XlSheetVisibility; stdcall;
    function Set_Visible(lcid: Integer; RHS: XlSheetVisibility): HResult; stdcall;
    function Get_Shapes: Shapes; stdcall;
    function InsertFile(Filename: OleVariant; Merge: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IModules
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208AE-0001-0000-C000-000000000046}
// *********************************************************************//
  IModules = interface(IDispatch)
    ['{000208AE-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Add(Before: OleVariant; After: OleVariant; Count: OleVariant): Module; stdcall;
    function Copy(Before: OleVariant; After: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_Count: Integer; stdcall;
    function Delete(lcid: Integer): HResult; stdcall;
    procedure _Dummy7; stdcall;
    function Get_Item(Index: OleVariant): IDispatch; stdcall;
    function Move(Before: OleVariant; After: OleVariant; lcid: Integer): HResult; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
    function PrintOut(From: OleVariant; To_: OleVariant; Copies: OleVariant; Preview: OleVariant; 
                      ActivePrinter: OleVariant; PrintToFile: OleVariant; Collate: OleVariant; 
                      lcid: Integer): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Select(Replace: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_HPageBreaks: HPageBreaks; stdcall;
    function Get_VPageBreaks: VPageBreaks; stdcall;
    function Get_Visible(lcid: Integer): OleVariant; stdcall;
    function Set_Visible(lcid: Integer; RHS: OleVariant): HResult; stdcall;
    function Get__Default(Index: OleVariant): IDispatch; stdcall;
  end;

// *********************************************************************//
// Interface: IDialogSheet
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208AF-0001-0000-C000-000000000046}
// *********************************************************************//
  IDialogSheet = interface(IDispatch)
    ['{000208AF-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Activate(lcid: Integer): HResult; stdcall;
    function Copy(Before: OleVariant; After: OleVariant; lcid: Integer): HResult; stdcall;
    function Delete(lcid: Integer): HResult; stdcall;
    function Get_CodeName: WideString; stdcall;
    function Get__CodeName: WideString; stdcall;
    function Set__CodeName(const RHS: WideString): HResult; stdcall;
    function Get_Index(lcid: Integer): Integer; stdcall;
    function Move(Before: OleVariant; After: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_Next: IDispatch; stdcall;
    function Get_OnDoubleClick(lcid: Integer): WideString; stdcall;
    function Set_OnDoubleClick(lcid: Integer; const RHS: WideString): HResult; stdcall;
    function Get_OnSheetActivate(lcid: Integer): WideString; stdcall;
    function Set_OnSheetActivate(lcid: Integer; const RHS: WideString): HResult; stdcall;
    function Get_OnSheetDeactivate(lcid: Integer): WideString; stdcall;
    function Set_OnSheetDeactivate(lcid: Integer; const RHS: WideString): HResult; stdcall;
    function Get_PageSetup: PageSetup; stdcall;
    function Get_Previous: IDispatch; stdcall;
    function PrintOut(From: OleVariant; To_: OleVariant; Copies: OleVariant; Preview: OleVariant; 
                      ActivePrinter: OleVariant; PrintToFile: OleVariant; Collate: OleVariant; 
                      lcid: Integer): HResult; stdcall;
    function PrintPreview(EnableChanges: OleVariant; lcid: Integer): HResult; stdcall;
    function Protect(Password: OleVariant; DrawingObjects: OleVariant; Contents: OleVariant; 
                     Scenarios: OleVariant; UserInterfaceOnly: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_ProtectContents(lcid: Integer): WordBool; stdcall;
    function Get_ProtectDrawingObjects(lcid: Integer): WordBool; stdcall;
    function Get_ProtectionMode(lcid: Integer): WordBool; stdcall;
    function Get_ProtectScenarios(lcid: Integer): WordBool; stdcall;
    function SaveAs(const Filename: WideString; FileFormat: OleVariant; Password: OleVariant; 
                    WriteResPassword: OleVariant; ReadOnlyRecommended: OleVariant; 
                    CreateBackup: OleVariant; AddToMru: OleVariant; TextCodepage: OleVariant; 
                    TextVisualLayout: OleVariant; lcid: Integer): HResult; stdcall;
    function Select(Replace: OleVariant; lcid: Integer): HResult; stdcall;
    function Unprotect(Password: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_Visible(lcid: Integer): XlSheetVisibility; stdcall;
    function Set_Visible(lcid: Integer; RHS: XlSheetVisibility): HResult; stdcall;
    function Get_Shapes: Shapes; stdcall;
    procedure _Dummy29; stdcall;
    function Arcs(Index: OleVariant; lcid: Integer): IDispatch; stdcall;
    procedure _Dummy31; stdcall;
    procedure _Dummy32; stdcall;
    function Buttons(Index: OleVariant; lcid: Integer): IDispatch; stdcall;
    procedure _Dummy34; stdcall;
    function Get_EnableCalculation: WordBool; stdcall;
    function Set_EnableCalculation(RHS: WordBool): HResult; stdcall;
    procedure _Dummy36; stdcall;
    function ChartObjects(Index: OleVariant; lcid: Integer): IDispatch; stdcall;
    function CheckBoxes(Index: OleVariant; lcid: Integer): IDispatch; stdcall;
    function CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                           AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                           IgnoreFinalYaa: OleVariant; SpellScript: OleVariant; lcid: Integer): HResult; stdcall;
    procedure _Dummy40; stdcall;
    procedure _Dummy41; stdcall;
    procedure _Dummy42; stdcall;
    procedure _Dummy43; stdcall;
    procedure _Dummy44; stdcall;
    procedure _Dummy45; stdcall;
    function Get_DisplayAutomaticPageBreaks(lcid: Integer): WordBool; stdcall;
    function Set_DisplayAutomaticPageBreaks(lcid: Integer; RHS: WordBool): HResult; stdcall;
    function Drawings(Index: OleVariant; lcid: Integer): IDispatch; stdcall;
    function DrawingObjects(Index: OleVariant; lcid: Integer): IDispatch; stdcall;
    function DropDowns(Index: OleVariant; lcid: Integer): IDispatch; stdcall;
    function Get_EnableAutoFilter(lcid: Integer): WordBool; stdcall;
    function Set_EnableAutoFilter(lcid: Integer; RHS: WordBool): HResult; stdcall;
    function Get_EnableSelection: XlEnableSelection; stdcall;
    function Set_EnableSelection(RHS: XlEnableSelection): HResult; stdcall;
    function Get_EnableOutlining(lcid: Integer): WordBool; stdcall;
    function Set_EnableOutlining(lcid: Integer; RHS: WordBool): HResult; stdcall;
    function Get_EnablePivotTable(lcid: Integer): WordBool; stdcall;
    function Set_EnablePivotTable(lcid: Integer; RHS: WordBool): HResult; stdcall;
    function Evaluate(Name: OleVariant; lcid: Integer): OleVariant; stdcall;
    function _Evaluate(Name: OleVariant; lcid: Integer): OleVariant; stdcall;
    procedure _Dummy56; stdcall;
    function ResetAllPageBreaks: HResult; stdcall;
    function GroupBoxes(Index: OleVariant; lcid: Integer): IDispatch; stdcall;
    function GroupObjects(Index: OleVariant; lcid: Integer): IDispatch; stdcall;
    function Labels(Index: OleVariant; lcid: Integer): IDispatch; stdcall;
    function Lines(Index: OleVariant; lcid: Integer): IDispatch; stdcall;
    function ListBoxes(Index: OleVariant; lcid: Integer): IDispatch; stdcall;
    function Get_Names: Names; stdcall;
    function OLEObjects(Index: OleVariant; lcid: Integer): IDispatch; stdcall;
    procedure _Dummy65; stdcall;
    procedure _Dummy66; stdcall;
    procedure _Dummy67; stdcall;
    function OptionButtons(Index: OleVariant; lcid: Integer): IDispatch; stdcall;
    procedure _Dummy69; stdcall;
    function Ovals(Index: OleVariant; lcid: Integer): IDispatch; stdcall;
    function Paste(Destination: OleVariant; Link: OleVariant; lcid: Integer): HResult; stdcall;
    function PasteSpecial(Format: OleVariant; Link: OleVariant; DisplayAsIcon: OleVariant; 
                          IconFileName: OleVariant; IconIndex: OleVariant; IconLabel: OleVariant; 
                          lcid: Integer): HResult; stdcall;
    function Pictures(Index: OleVariant; lcid: Integer): IDispatch; stdcall;
    procedure _Dummy74; stdcall;
    procedure _Dummy75; stdcall;
    procedure _Dummy76; stdcall;
    function Rectangles(Index: OleVariant; lcid: Integer): IDispatch; stdcall;
    procedure _Dummy78; stdcall;
    procedure _Dummy79; stdcall;
    function Get_ScrollArea: WideString; stdcall;
    function Set_ScrollArea(const RHS: WideString): HResult; stdcall;
    function ScrollBars(Index: OleVariant; lcid: Integer): IDispatch; stdcall;
    procedure _Dummy82; stdcall;
    procedure _Dummy83; stdcall;
    function Spinners(Index: OleVariant; lcid: Integer): IDispatch; stdcall;
    procedure _Dummy85; stdcall;
    procedure _Dummy86; stdcall;
    function TextBoxes(Index: OleVariant; lcid: Integer): IDispatch; stdcall;
    procedure _Dummy88; stdcall;
    procedure _Dummy89; stdcall;
    procedure _Dummy90; stdcall;
    function Get_HPageBreaks: HPageBreaks; stdcall;
    function Get_VPageBreaks: VPageBreaks; stdcall;
    function Get_QueryTables: QueryTables; stdcall;
    function Get_DisplayPageBreaks: WordBool; stdcall;
    function Set_DisplayPageBreaks(RHS: WordBool): HResult; stdcall;
    function Get_Comments: Comments; stdcall;
    function Get_Hyperlinks: Hyperlinks; stdcall;
    function ClearCircles: HResult; stdcall;
    function CircleInvalid: HResult; stdcall;
    function Get_DisplayRightToLeft(lcid: Integer): Integer; stdcall;
    function Set_DisplayRightToLeft(lcid: Integer; RHS: Integer): HResult; stdcall;
    function Get_AutoFilter: AutoFilter; stdcall;
    function Get_DefaultButton: OleVariant; stdcall;
    function Set_DefaultButton(RHS: OleVariant): HResult; stdcall;
    function Get_DialogFrame: DialogFrame; stdcall;
    function EditBoxes(Index: OleVariant): IDispatch; stdcall;
    function Get_Focus: OleVariant; stdcall;
    function Set_Focus(RHS: OleVariant): HResult; stdcall;
    function Hide(Cancel: OleVariant): WordBool; stdcall;
    function Show: WordBool; stdcall;
  end;

// *********************************************************************//
// Interface: IDialogSheets
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208B0-0001-0000-C000-000000000046}
// *********************************************************************//
  IDialogSheets = interface(IDispatch)
    ['{000208B0-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Add(Before: OleVariant; After: OleVariant; Count: OleVariant): DialogSheet; stdcall;
    function Copy(Before: OleVariant; After: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_Count: Integer; stdcall;
    function Delete(lcid: Integer): HResult; stdcall;
    procedure _Dummy7; stdcall;
    function Get_Item(Index: OleVariant): IDispatch; stdcall;
    function Move(Before: OleVariant; After: OleVariant; lcid: Integer): HResult; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
    function PrintOut(From: OleVariant; To_: OleVariant; Copies: OleVariant; Preview: OleVariant; 
                      ActivePrinter: OleVariant; PrintToFile: OleVariant; Collate: OleVariant; 
                      lcid: Integer): HResult; stdcall;
    function PrintPreview(EnableChanges: OleVariant; lcid: Integer): HResult; stdcall;
    function Select(Replace: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_HPageBreaks: HPageBreaks; stdcall;
    function Get_VPageBreaks: VPageBreaks; stdcall;
    function Get_Visible(lcid: Integer): OleVariant; stdcall;
    function Set_Visible(lcid: Integer; RHS: OleVariant): HResult; stdcall;
    function Get__Default(Index: OleVariant): IDispatch; stdcall;
  end;

// *********************************************************************//
// Interface: IWorksheets
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208B1-0001-0000-C000-000000000046}
// *********************************************************************//
  IWorksheets = interface(IDispatch)
    ['{000208B1-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Add(Before: OleVariant; After: OleVariant; Count: OleVariant; Type_: OleVariant;
                 lcid: Integer): IDispatch; stdcall;
    function Copy(Before: OleVariant; After: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_Count: Integer; stdcall;
    function Delete(lcid: Integer): HResult; stdcall;
    function FillAcrossSheets(const Range: Range; Type_: XlFillWith; lcid: Integer): HResult; stdcall;
    function Get_Item(Index: OleVariant): IDispatch; stdcall;
    function Move(Before: OleVariant; After: OleVariant; lcid: Integer): HResult; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
    function PrintOut(From: OleVariant; To_: OleVariant; Copies: OleVariant; Preview: OleVariant;
                      ActivePrinter: OleVariant; PrintToFile: OleVariant; Collate: OleVariant;
                      lcid: Integer): HResult; stdcall;
    function PrintPreview(EnableChanges: OleVariant; lcid: Integer): HResult; stdcall;
    function Select(Replace: OleVariant; lcid: Integer): HResult; stdcall;
    function Get_HPageBreaks: HPageBreaks; stdcall;
    function Get_VPageBreaks: VPageBreaks; stdcall;
    function Get_Visible(lcid: Integer): OleVariant; stdcall;
    function Set_Visible(lcid: Integer; RHS: OleVariant): HResult; stdcall;
    function Get__Default(Index: OleVariant): IDispatch; stdcall;
  end;

// *********************************************************************//
// Interface: IPageSetup
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208B4-0001-0000-C000-000000000046}
// *********************************************************************//
  IPageSetup = interface(IDispatch)
    ['{000208B4-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_BlackAndWhite: WordBool; stdcall;
    function Set_BlackAndWhite(RHS: WordBool): HResult; stdcall;
    function Get_BottomMargin: Double; stdcall;
    function Set_BottomMargin(RHS: Double): HResult; stdcall;
    function Get_CenterFooter: WideString; stdcall;
    function Set_CenterFooter(const RHS: WideString): HResult; stdcall;
    function Get_CenterHeader: WideString; stdcall;
    function Set_CenterHeader(const RHS: WideString): HResult; stdcall;
    function Get_CenterHorizontally: WordBool; stdcall;
    function Set_CenterHorizontally(RHS: WordBool): HResult; stdcall;
    function Get_CenterVertically: WordBool; stdcall;
    function Set_CenterVertically(RHS: WordBool): HResult; stdcall;
    function Get_ChartSize: XlObjectSize; stdcall;
    function Set_ChartSize(RHS: XlObjectSize): HResult; stdcall;
    function Get_Draft: WordBool; stdcall;
    function Set_Draft(RHS: WordBool): HResult; stdcall;
    function Get_FirstPageNumber: Integer; stdcall;
    function Set_FirstPageNumber(RHS: Integer): HResult; stdcall;
    function Get_FitToPagesTall: OleVariant; stdcall;
    function Set_FitToPagesTall(RHS: OleVariant): HResult; stdcall;
    function Get_FitToPagesWide: OleVariant; stdcall;
    function Set_FitToPagesWide(RHS: OleVariant): HResult; stdcall;
    function Get_FooterMargin: Double; stdcall;
    function Set_FooterMargin(RHS: Double): HResult; stdcall;
    function Get_HeaderMargin: Double; stdcall;
    function Set_HeaderMargin(RHS: Double): HResult; stdcall;
    function Get_LeftFooter: WideString; stdcall;
    function Set_LeftFooter(const RHS: WideString): HResult; stdcall;
    function Get_LeftHeader: WideString; stdcall;
    function Set_LeftHeader(const RHS: WideString): HResult; stdcall;
    function Get_LeftMargin: Double; stdcall;
    function Set_LeftMargin(RHS: Double): HResult; stdcall;
    function Get_Order: XlOrder; stdcall;
    function Set_Order(RHS: XlOrder): HResult; stdcall;
    function Get_Orientation: XlPageOrientation; stdcall;
    function Set_Orientation(RHS: XlPageOrientation): HResult; stdcall;
    function Get_PaperSize: XlPaperSize; stdcall;
    function Set_PaperSize(RHS: XlPaperSize): HResult; stdcall;
    function Get_PrintArea: WideString; stdcall;
    function Set_PrintArea(const RHS: WideString): HResult; stdcall;
    function Get_PrintGridlines: WordBool; stdcall;
    function Set_PrintGridlines(RHS: WordBool): HResult; stdcall;
    function Get_PrintHeadings: WordBool; stdcall;
    function Set_PrintHeadings(RHS: WordBool): HResult; stdcall;
    function Get_PrintNotes: WordBool; stdcall;
    function Set_PrintNotes(RHS: WordBool): HResult; stdcall;
    function PrintQuality(Index: OleVariant): OleVariant; stdcall;
    function Get_PrintTitleColumns: WideString; stdcall;
    function Set_PrintTitleColumns(const RHS: WideString): HResult; stdcall;
    function Get_PrintTitleRows: WideString; stdcall;
    function Set_PrintTitleRows(const RHS: WideString): HResult; stdcall;
    function Get_RightFooter: WideString; stdcall;
    function Set_RightFooter(const RHS: WideString): HResult; stdcall;
    function Get_RightHeader: WideString; stdcall;
    function Set_RightHeader(const RHS: WideString): HResult; stdcall;
    function Get_RightMargin: Double; stdcall;
    function Set_RightMargin(RHS: Double): HResult; stdcall;
    function Get_TopMargin: Double; stdcall;
    function Set_TopMargin(RHS: Double): HResult; stdcall;
    function Get_Zoom: OleVariant; stdcall;
    function Set_Zoom(RHS: OleVariant): HResult; stdcall;
    function Get_PrintComments: XlPrintLocation; stdcall;
    function Set_PrintComments(RHS: XlPrintLocation): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: INames
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208B8-0001-0000-C000-000000000046}
// *********************************************************************//
  INames = interface(IDispatch)
    ['{000208B8-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Add(Name: OleVariant; RefersTo: OleVariant; Visible: OleVariant; 
                 MacroType: OleVariant; ShortcutKey: OleVariant; Category: OleVariant; 
                 NameLocal: OleVariant; RefersToLocal: OleVariant; CategoryLocal: OleVariant; 
                 RefersToR1C1: OleVariant; RefersToR1C1Local: OleVariant): Name; stdcall;
    function Item(Index: OleVariant; IndexLocal: OleVariant; RefersTo: OleVariant; lcid: Integer): Name; stdcall;
    function _Default(Index: OleVariant; IndexLocal: OleVariant; RefersTo: OleVariant; lcid: Integer): Name; stdcall;
    function Get_Count: Integer; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IName
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208B9-0001-0000-C000-000000000046}
// *********************************************************************//
  IName = interface(IDispatch)
    ['{000208B9-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get__Default: WideString; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_Category(lcidIn: Integer): WideString; stdcall;
    function Set_Category(lcidIn: Integer; const RHS: WideString): HResult; stdcall;
    function Get_CategoryLocal: WideString; stdcall;
    function Set_CategoryLocal(const RHS: WideString): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_MacroType: XlXLMMacroType; stdcall;
    function Set_MacroType(RHS: XlXLMMacroType): HResult; stdcall;
    function Get_Name(lcidIn: Integer): WideString; stdcall;
    function Set_Name(lcidIn: Integer; const RHS: WideString): HResult; stdcall;
    function Get_RefersTo(lcidIn: Integer): OleVariant; stdcall;
    function Set_RefersTo(lcidIn: Integer; RHS: OleVariant): HResult; stdcall;
    function Get_ShortcutKey: WideString; stdcall;
    function Set_ShortcutKey(const RHS: WideString): HResult; stdcall;
    function Get_Value: WideString; stdcall;
    function Set_Value(const RHS: WideString): HResult; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_NameLocal: WideString; stdcall;
    function Set_NameLocal(const RHS: WideString): HResult; stdcall;
    function Get_RefersToLocal: OleVariant; stdcall;
    function Set_RefersToLocal(RHS: OleVariant): HResult; stdcall;
    function Get_RefersToR1C1(lcidIn: Integer): OleVariant; stdcall;
    function Set_RefersToR1C1(lcidIn: Integer; RHS: OleVariant): HResult; stdcall;
    function Get_RefersToR1C1Local: OleVariant; stdcall;
    function Set_RefersToR1C1Local(RHS: OleVariant): HResult; stdcall;
    function Get_RefersToRange: Range; stdcall;
  end;

// *********************************************************************//
// Interface: IChartObject
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208CF-0001-0000-C000-000000000046}
// *********************************************************************//
  IChartObject = interface(IDispatch)
    ['{000208CF-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_BottomRightCell: Range; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    function Get_TopLeftCell: Range; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_ZOrder: Integer; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    function Activate: HResult; stdcall;
    function Get_Chart: Chart; stdcall;
    function Get_ProtectChartObject: WordBool; stdcall;
    function Set_ProtectChartObject(RHS: WordBool): HResult; stdcall;
    function Get_RoundedCorners: WordBool; stdcall;
    function Set_RoundedCorners(RHS: WordBool): HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Shadow: WordBool; stdcall;
    function Set_Shadow(RHS: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IChartObjects
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208D0-0001-0000-C000-000000000046}
// *********************************************************************//
  IChartObjects = interface(IDispatch)
    ['{000208D0-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    procedure _Dummy3; stdcall;
    function BringToFront: HResult; stdcall;
    function Copy: HResult; stdcall;
    function CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat): HResult; stdcall;
    function Cut: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: IDispatch; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    procedure _Dummy12; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    procedure _Dummy15; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Placement: OleVariant; stdcall;
    function Set_Placement(RHS: OleVariant): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SendToBack: HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    procedure _Dummy22; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    procedure _Dummy25; stdcall;
    function Get_ShapeRange: ShapeRange; stdcall;
    procedure _Dummy27; stdcall;
    procedure _Dummy28; stdcall;
    procedure _Dummy29; stdcall;
    function Get_RoundedCorners: WordBool; stdcall;
    function Set_RoundedCorners(RHS: WordBool): HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Shadow: WordBool; stdcall;
    function Set_Shadow(RHS: WordBool): HResult; stdcall;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): ChartObject; stdcall;
    function Get_Count: Integer; stdcall;
    function Group: GroupObject; stdcall;
    function Item(Index: OleVariant): IDispatch; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IMailer
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208D1-0001-0000-C000-000000000046}
// *********************************************************************//
  IMailer = interface(IDispatch)
    ['{000208D1-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_BCCRecipients: OleVariant; stdcall;
    function Set_BCCRecipients(RHS: OleVariant): HResult; stdcall;
    function Get_CCRecipients: OleVariant; stdcall;
    function Set_CCRecipients(RHS: OleVariant): HResult; stdcall;
    function Get_Enclosures: OleVariant; stdcall;
    function Set_Enclosures(RHS: OleVariant): HResult; stdcall;
    function Get_Received: WordBool; stdcall;
    function Get_SendDateTime: TDateTime; stdcall;
    function Get_Sender: WideString; stdcall;
    function Get_Subject: WideString; stdcall;
    function Set_Subject(const RHS: WideString): HResult; stdcall;
    function Get_ToRecipients: OleVariant; stdcall;
    function Set_ToRecipients(RHS: OleVariant): HResult; stdcall;
    function Get_WhichAddress: OleVariant; stdcall;
    function Set_WhichAddress(RHS: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ICustomViews
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024422-0001-0000-C000-000000000046}
// *********************************************************************//
  ICustomViews = interface(IDispatch)
    ['{00024422-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Count: Integer; stdcall;
    function Item(ViewName: OleVariant): CustomView; stdcall;
    function Add(const ViewName: WideString; PrintSettings: OleVariant; RowColSettings: OleVariant): CustomView; stdcall;
    function Get__Default(ViewName: OleVariant): CustomView; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: ICustomView
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024423-0001-0000-C000-000000000046}
// *********************************************************************//
  ICustomView = interface(IDispatch)
    ['{00024423-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Name: WideString; stdcall;
    function Get_PrintSettings: WordBool; stdcall;
    function Get_RowColSettings: WordBool; stdcall;
    function Show: HResult; stdcall;
    function Delete: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IFormatConditions
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024424-0001-0000-C000-000000000046}
// *********************************************************************//
  IFormatConditions = interface(IDispatch)
    ['{00024424-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Count: Integer; stdcall;
    function Item(Index: OleVariant): FormatCondition; stdcall;
    function Add(Type_: XlFormatConditionType; Operator: OleVariant; Formula1: OleVariant; 
                 Formula2: OleVariant): FormatCondition; stdcall;
    function Get__Default(Index: OleVariant): FormatCondition; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
    function Delete: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IFormatCondition
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024425-0001-0000-C000-000000000046}
// *********************************************************************//
  IFormatCondition = interface(IDispatch)
    ['{00024425-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Modify(Type_: XlFormatConditionType; Operator: OleVariant; Formula1: OleVariant; 
                    Formula2: OleVariant): HResult; stdcall;
    function Get_Type_: Integer; stdcall;
    function Get_Operator: Integer; stdcall;
    function Get_Formula1: WideString; stdcall;
    function Get_Formula2: WideString; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Borders: Borders; stdcall;
    function Get_Font: Font; stdcall;
    function Delete: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IComments
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024426-0001-0000-C000-000000000046}
// *********************************************************************//
  IComments = interface(IDispatch)
    ['{00024426-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Count: Integer; stdcall;
    function Item(Index: Integer): Comment; stdcall;
    function Get__Default(Index: Integer): Comment; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IComment
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024427-0001-0000-C000-000000000046}
// *********************************************************************//
  IComment = interface(IDispatch)
    ['{00024427-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Author: WideString; stdcall;
    function Get_Shape: Shape; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Text(Text: OleVariant; Start: OleVariant; Overwrite: OleVariant): WideString; stdcall;
    function Delete: HResult; stdcall;
    function Next: Comment; stdcall;
    function Previous: Comment; stdcall;
  end;

// *********************************************************************//
// Interface: IRefreshEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002441B-0001-0000-C000-000000000046}
// *********************************************************************//
  IRefreshEvents = interface(IDispatch)
    ['{0002441B-0001-0000-C000-000000000046}']
    function BeforeRefresh(var Cancel: WordBool): HResult; stdcall;
    function AfterRefresh(Success: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: _IQueryTable
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024428-0001-0000-C000-000000000046}
// *********************************************************************//
  _IQueryTable = interface(IDispatch)
    ['{00024428-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_FieldNames: WordBool; stdcall;
    function Set_FieldNames(RHS: WordBool): HResult; stdcall;
    function Get_RowNumbers: WordBool; stdcall;
    function Set_RowNumbers(RHS: WordBool): HResult; stdcall;
    function Get_FillAdjacentFormulas: WordBool; stdcall;
    function Set_FillAdjacentFormulas(RHS: WordBool): HResult; stdcall;
    function Get_HasAutoFormat: WordBool; stdcall;
    function Set_HasAutoFormat(RHS: WordBool): HResult; stdcall;
    function Get_RefreshOnFileOpen: WordBool; stdcall;
    function Set_RefreshOnFileOpen(RHS: WordBool): HResult; stdcall;
    function Get_Refreshing: WordBool; stdcall;
    function Get_FetchedRowOverflow: WordBool; stdcall;
    function Get_BackgroundQuery: WordBool; stdcall;
    function Set_BackgroundQuery(RHS: WordBool): HResult; stdcall;
    function CancelRefresh: HResult; stdcall;
    function Get_RefreshStyle: XlCellInsertionMode; stdcall;
    function Set_RefreshStyle(RHS: XlCellInsertionMode): HResult; stdcall;
    function Get_EnableRefresh: WordBool; stdcall;
    function Set_EnableRefresh(RHS: WordBool): HResult; stdcall;
    function Get_SavePassword: WordBool; stdcall;
    function Set_SavePassword(RHS: WordBool): HResult; stdcall;
    function Get_Destination: Range; stdcall;
    function Get_Connection: OleVariant; stdcall;
    function Set_Connection(RHS: OleVariant): HResult; stdcall;
    function Get_Sql: OleVariant; stdcall;
    function Set_Sql(RHS: OleVariant): HResult; stdcall;
    function Get_PostText: WideString; stdcall;
    function Set_PostText(const RHS: WideString): HResult; stdcall;
    function Get_ResultRange: Range; stdcall;
    function Delete: HResult; stdcall;
    function Refresh(BackgroundQuery: OleVariant): WordBool; stdcall;
    function Get_Parameters: Parameters; stdcall;
    function Get_Recordset: IDispatch; stdcall;
    function Set_Recordset(const RHS: IDispatch): HResult; stdcall;
    function Get_SaveData: WordBool; stdcall;
    function Set_SaveData(RHS: WordBool): HResult; stdcall;
    function Get_TablesOnlyFromHTML: WordBool; stdcall;
    function Set_TablesOnlyFromHTML(RHS: WordBool): HResult; stdcall;
    function Get_EnableEditing: WordBool; stdcall;
    function Set_EnableEditing(RHS: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IQueryTables
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024429-0001-0000-C000-000000000046}
// *********************************************************************//
  IQueryTables = interface(IDispatch)
    ['{00024429-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Count: Integer; stdcall;
    function Add(Connection: OleVariant; const Destination: Range; Sql: OleVariant): QueryTable; stdcall;
    function Item(Index: OleVariant): QueryTable; stdcall;
    function Get__Default(Index: OleVariant): QueryTable; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IParameter
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002442A-0001-0000-C000-000000000046}
// *********************************************************************//
  IParameter = interface(IDispatch)
    ['{0002442A-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_DataType: XlParameterDataType; stdcall;
    function Set_DataType(RHS: XlParameterDataType): HResult; stdcall;
    function Get_Type_: XlParameterType; stdcall;
    function Get_PromptString: WideString; stdcall;
    function Get_Value: OleVariant; stdcall;
    function Get_SourceRange: Range; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function SetParam(Type_: XlParameterType; Value: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IParameters
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002442B-0001-0000-C000-000000000046}
// *********************************************************************//
  IParameters = interface(IDispatch)
    ['{0002442B-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Add(const Name: WideString; iDataType: OleVariant): Parameter; stdcall;
    function Get_Count: Integer; stdcall;
    function Item(Index: OleVariant): Parameter; stdcall;
    function Get__Default(Index: OleVariant): Parameter; stdcall;
    function Delete: HResult; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IODBCError
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002442C-0001-0000-C000-000000000046}
// *********************************************************************//
  IODBCError = interface(IDispatch)
    ['{0002442C-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_SqlState: WideString; stdcall;
    function Get_ErrorString: WideString; stdcall;
  end;

// *********************************************************************//
// Interface: IODBCErrors
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002442D-0001-0000-C000-000000000046}
// *********************************************************************//
  IODBCErrors = interface(IDispatch)
    ['{0002442D-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Count: Integer; stdcall;
    function Item(Index: Integer): ODBCError; stdcall;
    function Get__Default(Index: Integer): ODBCError; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IValidation
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002442F-0001-0000-C000-000000000046}
// *********************************************************************//
  IValidation = interface(IDispatch)
    ['{0002442F-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Add(Type_: XlDVType; AlertStyle: OleVariant; Operator: OleVariant; 
                 Formula1: OleVariant; Formula2: OleVariant): HResult; stdcall;
    function Get_AlertStyle: Integer; stdcall;
    function Get_IgnoreBlank: WordBool; stdcall;
    function Set_IgnoreBlank(RHS: WordBool): HResult; stdcall;
    function Get_IMEMode: Integer; stdcall;
    function Set_IMEMode(RHS: Integer): HResult; stdcall;
    function Get_InCellDropdown: WordBool; stdcall;
    function Set_InCellDropdown(RHS: WordBool): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_ErrorMessage: WideString; stdcall;
    function Set_ErrorMessage(const RHS: WideString): HResult; stdcall;
    function Get_ErrorTitle: WideString; stdcall;
    function Set_ErrorTitle(const RHS: WideString): HResult; stdcall;
    function Get_InputMessage: WideString; stdcall;
    function Set_InputMessage(const RHS: WideString): HResult; stdcall;
    function Get_InputTitle: WideString; stdcall;
    function Set_InputTitle(const RHS: WideString): HResult; stdcall;
    function Get_Formula1: WideString; stdcall;
    function Get_Formula2: WideString; stdcall;
    function Modify(Type_: OleVariant; AlertStyle: OleVariant; Operator: OleVariant; 
                    Formula1: OleVariant; Formula2: OleVariant): HResult; stdcall;
    function Get_Operator: Integer; stdcall;
    function Get_ShowError: WordBool; stdcall;
    function Set_ShowError(RHS: WordBool): HResult; stdcall;
    function Get_ShowInput: WordBool; stdcall;
    function Set_ShowInput(RHS: WordBool): HResult; stdcall;
    function Get_Type_: Integer; stdcall;
    function Get_Value: WordBool; stdcall;
  end;

// *********************************************************************//
// Interface: IHyperlinks
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024430-0001-0000-C000-000000000046}
// *********************************************************************//
  IHyperlinks = interface(IDispatch)
    ['{00024430-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Add(const Anchor: IDispatch; const Address: WideString; SubAddress: OleVariant): IDispatch; stdcall;
    function Get_Count: Integer; stdcall;
    function Get_Item(Index: OleVariant): Hyperlink; stdcall;
    function Get__Default(Index: OleVariant): Hyperlink; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
    function Delete: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IHyperlink
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024431-0001-0000-C000-000000000046}
// *********************************************************************//
  IHyperlink = interface(IDispatch)
    ['{00024431-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Name: WideString; stdcall;
    function Get_Range: Range; stdcall;
    function Get_Shape: Shape; stdcall;
    function Get_SubAddress: WideString; stdcall;
    function Set_SubAddress(const RHS: WideString): HResult; stdcall;
    function Get_Address: WideString; stdcall;
    function Set_Address(const RHS: WideString): HResult; stdcall;
    function Get_Type_: Integer; stdcall;
    function AddToFavorites: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Follow(NewWindow: OleVariant; AddHistory: OleVariant; ExtraInfo: OleVariant; 
                    Method: OleVariant; HeaderInfo: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IAutoFilter
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024432-0001-0000-C000-000000000046}
// *********************************************************************//
  IAutoFilter = interface(IDispatch)
    ['{00024432-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Range: Range; stdcall;
    function Get_Filters: Filters; stdcall;
  end;

// *********************************************************************//
// Interface: IFilters
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024433-0001-0000-C000-000000000046}
// *********************************************************************//
  IFilters = interface(IDispatch)
    ['{00024433-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Count: Integer; stdcall;
    function Get__Default(Index: Integer): Filter; stdcall;
    function Get_Item(Index: Integer): Filter; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IFilter
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024434-0001-0000-C000-000000000046}
// *********************************************************************//
  IFilter = interface(IDispatch)
    ['{00024434-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_On_: WordBool; stdcall;
    function Get_Criteria1: OleVariant; stdcall;
    function Get_Operator: XlAutoFilterOperator; stdcall;
    function Get_Criteria2: OleVariant; stdcall;
  end;

// *********************************************************************//
// Interface: IAutoCorrect
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208D4-0001-0000-C000-000000000046}
// *********************************************************************//
  IAutoCorrect = interface(IDispatch)
    ['{000208D4-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function AddReplacement(const What: WideString; const Replacement: WideString): HResult; stdcall;
    function Get_CapitalizeNamesOfDays: WordBool; stdcall;
    function Set_CapitalizeNamesOfDays(RHS: WordBool): HResult; stdcall;
    function DeleteReplacement(const What: WideString): HResult; stdcall;
    function ReplacementList(Index: OleVariant): OleVariant; stdcall;
    function Get_ReplaceText: WordBool; stdcall;
    function Set_ReplaceText(RHS: WordBool): HResult; stdcall;
    function Get_TwoInitialCapitals: WordBool; stdcall;
    function Set_TwoInitialCapitals(RHS: WordBool): HResult; stdcall;
    function Get_CorrectSentenceCap: WordBool; stdcall;
    function Set_CorrectSentenceCap(RHS: WordBool): HResult; stdcall;
    function Get_CorrectCapsLock: WordBool; stdcall;
    function Set_CorrectCapsLock(RHS: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IBorder
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020854-0001-0000-C000-000000000046}
// *********************************************************************//
  IBorder = interface(IDispatch)
    ['{00020854-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Color: OleVariant; stdcall;
    function Set_Color(RHS: OleVariant): HResult; stdcall;
    function Get_ColorIndex: OleVariant; stdcall;
    function Set_ColorIndex(RHS: OleVariant): HResult; stdcall;
    function Get_LineStyle: OleVariant; stdcall;
    function Set_LineStyle(RHS: OleVariant): HResult; stdcall;
    function Get_Weight: OleVariant; stdcall;
    function Set_Weight(RHS: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IInterior
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020870-0001-0000-C000-000000000046}
// *********************************************************************//
  IInterior = interface(IDispatch)
    ['{00020870-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Color: OleVariant; stdcall;
    function Set_Color(RHS: OleVariant): HResult; stdcall;
    function Get_ColorIndex: OleVariant; stdcall;
    function Set_ColorIndex(RHS: OleVariant): HResult; stdcall;
    function Get_InvertIfNegative: OleVariant; stdcall;
    function Set_InvertIfNegative(RHS: OleVariant): HResult; stdcall;
    function Get_Pattern: OleVariant; stdcall;
    function Set_Pattern(RHS: OleVariant): HResult; stdcall;
    function Get_PatternColor: OleVariant; stdcall;
    function Set_PatternColor(RHS: OleVariant): HResult; stdcall;
    function Get_PatternColorIndex: OleVariant; stdcall;
    function Set_PatternColorIndex(RHS: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IChartFillFormat
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024435-0001-0000-C000-000000000046}
// *********************************************************************//
  IChartFillFormat = interface(IDispatch)
    ['{00024435-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function OneColorGradient(Style: MsoGradientStyle; Variant: Integer; Degree: Single): HResult; stdcall;
    function TwoColorGradient(Style: MsoGradientStyle; Variant: Integer): HResult; stdcall;
    function PresetTextured(PresetTexture: MsoPresetTexture): HResult; stdcall;
    function Solid: HResult; stdcall;
    function Patterned(Pattern: MsoPatternType): HResult; stdcall;
    function UserPicture(PictureFile: OleVariant; PictureFormat: OleVariant; 
                         PictureStackUnit: OleVariant; PicturePlacement: OleVariant): HResult; stdcall;
    function UserTextured(const TextureFile: WideString): HResult; stdcall;
    function PresetGradient(Style: MsoGradientStyle; Variant: Integer; 
                            PresetGradientType: MsoPresetGradientType): HResult; stdcall;
    function Get_BackColor: ChartColorFormat; stdcall;
    function Get_ForeColor: ChartColorFormat; stdcall;
    function Get_GradientColorType: MsoGradientColorType; stdcall;
    function Get_GradientDegree: Single; stdcall;
    function Get_GradientStyle: MsoGradientStyle; stdcall;
    function Get_GradientVariant: Integer; stdcall;
    function Get_Pattern: MsoPatternType; stdcall;
    function Get_PresetGradientType: MsoPresetGradientType; stdcall;
    function Get_PresetTexture: MsoPresetTexture; stdcall;
    function Get_TextureName: WideString; stdcall;
    function Get_TextureType: MsoTextureType; stdcall;
    function Get_Type_: MsoFillType; stdcall;
    function Get_Visible: MsoTriState; stdcall;
    function Set_Visible(RHS: MsoTriState): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IChartColorFormat
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024436-0001-0000-C000-000000000046}
// *********************************************************************//
  IChartColorFormat = interface(IDispatch)
    ['{00024436-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_SchemeColor: Integer; stdcall;
    function Set_SchemeColor(RHS: Integer): HResult; stdcall;
    function Get_RGB_: Integer; stdcall;
    function Get__Default: Integer; stdcall;
    function Get_Type_: Integer; stdcall;
  end;

// *********************************************************************//
// Interface: IAxis
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020848-0001-0000-C000-000000000046}
// *********************************************************************//
  IAxis = interface(IDispatch)
    ['{00020848-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_AxisBetweenCategories: WordBool; stdcall;
    function Set_AxisBetweenCategories(RHS: WordBool): HResult; stdcall;
    function Get_AxisGroup: XlAxisGroup; stdcall;
    function Get_AxisTitle: AxisTitle; stdcall;
    function Get_Border: Border; stdcall;
    function Get_CategoryNames: OleVariant; stdcall;
    function Set_CategoryNames(RHS: OleVariant): HResult; stdcall;
    function Get_Crosses: XlAxisCrosses; stdcall;
    function Set_Crosses(RHS: XlAxisCrosses): HResult; stdcall;
    function Get_CrossesAt: Double; stdcall;
    function Set_CrossesAt(RHS: Double): HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_HasMajorGridlines: WordBool; stdcall;
    function Set_HasMajorGridlines(RHS: WordBool): HResult; stdcall;
    function Get_HasMinorGridlines: WordBool; stdcall;
    function Set_HasMinorGridlines(RHS: WordBool): HResult; stdcall;
    function Get_HasTitle: WordBool; stdcall;
    function Set_HasTitle(RHS: WordBool): HResult; stdcall;
    function Get_MajorGridlines: Gridlines; stdcall;
    function Get_MajorTickMark: XlTickMark; stdcall;
    function Set_MajorTickMark(RHS: XlTickMark): HResult; stdcall;
    function Get_MajorUnit: Double; stdcall;
    function Set_MajorUnit(RHS: Double): HResult; stdcall;
    function Get_MajorUnitIsAuto: WordBool; stdcall;
    function Set_MajorUnitIsAuto(RHS: WordBool): HResult; stdcall;
    function Get_MaximumScale: Double; stdcall;
    function Set_MaximumScale(RHS: Double): HResult; stdcall;
    function Get_MaximumScaleIsAuto: WordBool; stdcall;
    function Set_MaximumScaleIsAuto(RHS: WordBool): HResult; stdcall;
    function Get_MinimumScale: Double; stdcall;
    function Set_MinimumScale(RHS: Double): HResult; stdcall;
    function Get_MinimumScaleIsAuto: WordBool; stdcall;
    function Set_MinimumScaleIsAuto(RHS: WordBool): HResult; stdcall;
    function Get_MinorGridlines: Gridlines; stdcall;
    function Get_MinorTickMark: XlTickMark; stdcall;
    function Set_MinorTickMark(RHS: XlTickMark): HResult; stdcall;
    function Get_MinorUnit: Double; stdcall;
    function Set_MinorUnit(RHS: Double): HResult; stdcall;
    function Get_MinorUnitIsAuto: WordBool; stdcall;
    function Set_MinorUnitIsAuto(RHS: WordBool): HResult; stdcall;
    function Get_ReversePlotOrder: WordBool; stdcall;
    function Set_ReversePlotOrder(RHS: WordBool): HResult; stdcall;
    function Get_ScaleType: XlScaleType; stdcall;
    function Set_ScaleType(RHS: XlScaleType): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_TickLabelPosition: XlTickLabelPosition; stdcall;
    function Set_TickLabelPosition(RHS: XlTickLabelPosition): HResult; stdcall;
    function Get_TickLabels: TickLabels; stdcall;
    function Get_TickLabelSpacing: Integer; stdcall;
    function Set_TickLabelSpacing(RHS: Integer): HResult; stdcall;
    function Get_TickMarkSpacing: Integer; stdcall;
    function Set_TickMarkSpacing(RHS: Integer): HResult; stdcall;
    function Get_Type_: XlAxisType; stdcall;
    function Set_Type_(RHS: XlAxisType): HResult; stdcall;
    function Get_BaseUnit: XlTimeUnit; stdcall;
    function Set_BaseUnit(RHS: XlTimeUnit): HResult; stdcall;
    function Get_BaseUnitIsAuto: WordBool; stdcall;
    function Set_BaseUnitIsAuto(RHS: WordBool): HResult; stdcall;
    function Get_MajorUnitScale: XlTimeUnit; stdcall;
    function Set_MajorUnitScale(RHS: XlTimeUnit): HResult; stdcall;
    function Get_MinorUnitScale: XlTimeUnit; stdcall;
    function Set_MinorUnitScale(RHS: XlTimeUnit): HResult; stdcall;
    function Get_CategoryType: XlCategoryType; stdcall;
    function Set_CategoryType(RHS: XlCategoryType): HResult; stdcall;
    function Get_Left: Double; stdcall;
    function Get_Top: Double; stdcall;
    function Get_Width: Double; stdcall;
    function Get_Height: Double; stdcall;
  end;

// *********************************************************************//
// Interface: IChartTitle
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020849-0001-0000-C000-000000000046}
// *********************************************************************//
  IChartTitle = interface(IDispatch)
    ['{00020849-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Name: WideString; stdcall;
    function Select: HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Delete: HResult; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Fill: ChartFillFormat; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function Get_Font: Font; stdcall;
    function Get_HorizontalAlignment: OleVariant; stdcall;
    function Set_HorizontalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Orientation: OleVariant; stdcall;
    function Set_Orientation(RHS: OleVariant): HResult; stdcall;
    function Get_Shadow: WordBool; stdcall;
    function Set_Shadow(RHS: WordBool): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    function Get_VerticalAlignment: OleVariant; stdcall;
    function Set_VerticalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_ReadingOrder: Integer; stdcall;
    function Set_ReadingOrder(RHS: Integer): HResult; stdcall;
    function Get_AutoScaleFont: OleVariant; stdcall;
    function Set_AutoScaleFont(RHS: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IAxisTitle
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002084A-0001-0000-C000-000000000046}
// *********************************************************************//
  IAxisTitle = interface(IDispatch)
    ['{0002084A-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Name: WideString; stdcall;
    function Select: HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Delete: HResult; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Fill: ChartFillFormat; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function Get_Font: Font; stdcall;
    function Get_HorizontalAlignment: OleVariant; stdcall;
    function Set_HorizontalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Orientation: OleVariant; stdcall;
    function Set_Orientation(RHS: OleVariant): HResult; stdcall;
    function Get_Shadow: WordBool; stdcall;
    function Set_Shadow(RHS: WordBool): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    function Get_VerticalAlignment: OleVariant; stdcall;
    function Set_VerticalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_ReadingOrder: Integer; stdcall;
    function Set_ReadingOrder(RHS: Integer): HResult; stdcall;
    function Get_AutoScaleFont: OleVariant; stdcall;
    function Set_AutoScaleFont(RHS: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IChartGroup
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020859-0001-0000-C000-000000000046}
// *********************************************************************//
  IChartGroup = interface(IDispatch)
    ['{00020859-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_AxisGroup: XlAxisGroup; stdcall;
    function Set_AxisGroup(RHS: XlAxisGroup): HResult; stdcall;
    function Get_DoughnutHoleSize: Integer; stdcall;
    function Set_DoughnutHoleSize(RHS: Integer): HResult; stdcall;
    function Get_DownBars: DownBars; stdcall;
    function Get_DropLines: DropLines; stdcall;
    function Get_FirstSliceAngle: Integer; stdcall;
    function Set_FirstSliceAngle(RHS: Integer): HResult; stdcall;
    function Get_GapWidth: Integer; stdcall;
    function Set_GapWidth(RHS: Integer): HResult; stdcall;
    function Get_HasDropLines: WordBool; stdcall;
    function Set_HasDropLines(RHS: WordBool): HResult; stdcall;
    function Get_HasHiLoLines: WordBool; stdcall;
    function Set_HasHiLoLines(RHS: WordBool): HResult; stdcall;
    function Get_HasRadarAxisLabels: WordBool; stdcall;
    function Set_HasRadarAxisLabels(RHS: WordBool): HResult; stdcall;
    function Get_HasSeriesLines: WordBool; stdcall;
    function Set_HasSeriesLines(RHS: WordBool): HResult; stdcall;
    function Get_HasUpDownBars: WordBool; stdcall;
    function Set_HasUpDownBars(RHS: WordBool): HResult; stdcall;
    function Get_HiLoLines: HiLoLines; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_Overlap: Integer; stdcall;
    function Set_Overlap(RHS: Integer): HResult; stdcall;
    function Get_RadarAxisLabels: TickLabels; stdcall;
    function SeriesCollection(Index: OleVariant): IDispatch; stdcall;
    function Get_SeriesLines: SeriesLines; stdcall;
    function Get_SubType: Integer; stdcall;
    function Set_SubType(RHS: Integer): HResult; stdcall;
    function Get_Type_: Integer; stdcall;
    function Set_Type_(RHS: Integer): HResult; stdcall;
    function Get_UpBars: UpBars; stdcall;
    function Get_VaryByCategories: WordBool; stdcall;
    function Set_VaryByCategories(RHS: WordBool): HResult; stdcall;
    function Get_SizeRepresents: XlSizeRepresents; stdcall;
    function Set_SizeRepresents(RHS: XlSizeRepresents): HResult; stdcall;
    function Get_BubbleScale: Integer; stdcall;
    function Set_BubbleScale(RHS: Integer): HResult; stdcall;
    function Get_ShowNegativeBubbles: WordBool; stdcall;
    function Set_ShowNegativeBubbles(RHS: WordBool): HResult; stdcall;
    function Get_SplitType: XlChartSplitType; stdcall;
    function Set_SplitType(RHS: XlChartSplitType): HResult; stdcall;
    function Get_SplitValue: OleVariant; stdcall;
    function Set_SplitValue(RHS: OleVariant): HResult; stdcall;
    function Get_SecondPlotSize: Integer; stdcall;
    function Set_SecondPlotSize(RHS: Integer): HResult; stdcall;
    function Get_Has3DShading: WordBool; stdcall;
    function Set_Has3DShading(RHS: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IChartGroups
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002085A-0001-0000-C000-000000000046}
// *********************************************************************//
  IChartGroups = interface(IDispatch)
    ['{0002085A-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Count: Integer; stdcall;
    function Item(Index: OleVariant): ChartGroup; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IAxes
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002085B-0001-0000-C000-000000000046}
// *********************************************************************//
  IAxes = interface(IDispatch)
    ['{0002085B-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Count: Integer; stdcall;
    function Item(Type_: XlAxisType; AxisGroup: XlAxisGroup): Axis; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IPoints
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020869-0001-0000-C000-000000000046}
// *********************************************************************//
  IPoints = interface(IDispatch)
    ['{00020869-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Count: Integer; stdcall;
    function Item(Index: Integer): Point; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: IPoint
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002086A-0001-0000-C000-000000000046}
// *********************************************************************//
  IPoint = interface(IDispatch)
    ['{0002086A-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function ApplyDataLabels(Type_: XlDataLabelsType; LegendKey: OleVariant; AutoText: OleVariant): HResult; stdcall;
    function Get_Border: Border; stdcall;
    function ClearFormats: HResult; stdcall;
    function Copy: HResult; stdcall;
    function Get_DataLabel: DataLabel; stdcall;
    function Delete: HResult; stdcall;
    function Get_Explosion: Integer; stdcall;
    function Set_Explosion(RHS: Integer): HResult; stdcall;
    function Get_HasDataLabel: WordBool; stdcall;
    function Set_HasDataLabel(RHS: WordBool): HResult; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_InvertIfNegative: WordBool; stdcall;
    function Set_InvertIfNegative(RHS: WordBool): HResult; stdcall;
    function Get_MarkerBackgroundColor: Integer; stdcall;
    function Set_MarkerBackgroundColor(RHS: Integer): HResult; stdcall;
    function Get_MarkerBackgroundColorIndex: XlColorIndex; stdcall;
    function Set_MarkerBackgroundColorIndex(RHS: XlColorIndex): HResult; stdcall;
    function Get_MarkerForegroundColor: Integer; stdcall;
    function Set_MarkerForegroundColor(RHS: Integer): HResult; stdcall;
    function Get_MarkerForegroundColorIndex: XlColorIndex; stdcall;
    function Set_MarkerForegroundColorIndex(RHS: XlColorIndex): HResult; stdcall;
    function Get_MarkerSize: Integer; stdcall;
    function Set_MarkerSize(RHS: Integer): HResult; stdcall;
    function Get_MarkerStyle: XlMarkerStyle; stdcall;
    function Set_MarkerStyle(RHS: XlMarkerStyle): HResult; stdcall;
    function Paste: HResult; stdcall;
    function Get_PictureType: XlChartPictureType; stdcall;
    function Set_PictureType(RHS: XlChartPictureType): HResult; stdcall;
    function Get_PictureUnit: Integer; stdcall;
    function Set_PictureUnit(RHS: Integer): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_ApplyPictToSides: WordBool; stdcall;
    function Set_ApplyPictToSides(RHS: WordBool): HResult; stdcall;
    function Get_ApplyPictToFront: WordBool; stdcall;
    function Set_ApplyPictToFront(RHS: WordBool): HResult; stdcall;
    function Get_ApplyPictToEnd: WordBool; stdcall;
    function Set_ApplyPictToEnd(RHS: WordBool): HResult; stdcall;
    function Get_Shadow: WordBool; stdcall;
    function Set_Shadow(RHS: WordBool): HResult; stdcall;
    function Get_SecondaryPlot: WordBool; stdcall;
    function Set_SecondaryPlot(RHS: WordBool): HResult; stdcall;
    function Get_Fill: ChartFillFormat; stdcall;
  end;

// *********************************************************************//
// Interface: ISeries
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002086B-0001-0000-C000-000000000046}
// *********************************************************************//
  ISeries = interface(IDispatch)
    ['{0002086B-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function ApplyDataLabels(Type_: XlDataLabelsType; LegendKey: OleVariant; AutoText: OleVariant; 
                             HasLeaderLines: OleVariant): HResult; stdcall;
    function Get_AxisGroup: XlAxisGroup; stdcall;
    function Set_AxisGroup(RHS: XlAxisGroup): HResult; stdcall;
    function Get_Border: Border; stdcall;
    function ClearFormats: HResult; stdcall;
    function Copy: HResult; stdcall;
    function DataLabels(Index: OleVariant): IDispatch; stdcall;
    function Delete: HResult; stdcall;
    function ErrorBar(Direction: XlErrorBarDirection; Include: XlErrorBarInclude; 
                      Type_: XlErrorBarType; Amount: OleVariant; MinusValues: OleVariant): HResult; stdcall;
    function Get_ErrorBars: ErrorBars; stdcall;
    function Get_Explosion: Integer; stdcall;
    function Set_Explosion(RHS: Integer): HResult; stdcall;
    function Get_Formula: WideString; stdcall;
    function Set_Formula(const RHS: WideString): HResult; stdcall;
    function Get_FormulaLocal: WideString; stdcall;
    function Set_FormulaLocal(const RHS: WideString): HResult; stdcall;
    function Get_FormulaR1C1: WideString; stdcall;
    function Set_FormulaR1C1(const RHS: WideString): HResult; stdcall;
    function Get_FormulaR1C1Local: WideString; stdcall;
    function Set_FormulaR1C1Local(const RHS: WideString): HResult; stdcall;
    function Get_HasDataLabels: WordBool; stdcall;
    function Set_HasDataLabels(RHS: WordBool): HResult; stdcall;
    function Get_HasErrorBars: WordBool; stdcall;
    function Set_HasErrorBars(RHS: WordBool): HResult; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Fill: ChartFillFormat; stdcall;
    function Get_InvertIfNegative: WordBool; stdcall;
    function Set_InvertIfNegative(RHS: WordBool): HResult; stdcall;
    function Get_MarkerBackgroundColor: Integer; stdcall;
    function Set_MarkerBackgroundColor(RHS: Integer): HResult; stdcall;
    function Get_MarkerBackgroundColorIndex: XlColorIndex; stdcall;
    function Set_MarkerBackgroundColorIndex(RHS: XlColorIndex): HResult; stdcall;
    function Get_MarkerForegroundColor: Integer; stdcall;
    function Set_MarkerForegroundColor(RHS: Integer): HResult; stdcall;
    function Get_MarkerForegroundColorIndex: XlColorIndex; stdcall;
    function Set_MarkerForegroundColorIndex(RHS: XlColorIndex): HResult; stdcall;
    function Get_MarkerSize: Integer; stdcall;
    function Set_MarkerSize(RHS: Integer): HResult; stdcall;
    function Get_MarkerStyle: XlMarkerStyle; stdcall;
    function Set_MarkerStyle(RHS: XlMarkerStyle): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Paste: HResult; stdcall;
    function Get_PictureType: XlChartPictureType; stdcall;
    function Set_PictureType(RHS: XlChartPictureType): HResult; stdcall;
    function Get_PictureUnit: Integer; stdcall;
    function Set_PictureUnit(RHS: Integer): HResult; stdcall;
    function Get_PlotOrder: Integer; stdcall;
    function Set_PlotOrder(RHS: Integer): HResult; stdcall;
    function Points(Index: OleVariant): IDispatch; stdcall;
    function Select: HResult; stdcall;
    function Get_Smooth: WordBool; stdcall;
    function Set_Smooth(RHS: WordBool): HResult; stdcall;
    function Trendlines(Index: OleVariant): IDispatch; stdcall;
    function Get_Type_: Integer; stdcall;
    function Set_Type_(RHS: Integer): HResult; stdcall;
    function Get_ChartType: XlChartType; stdcall;
    function Set_ChartType(RHS: XlChartType): HResult; stdcall;
    function ApplyCustomType(ChartType: XlChartType): HResult; stdcall;
    function Get_Values: OleVariant; stdcall;
    function Set_Values(RHS: OleVariant): HResult; stdcall;
    function Get_XValues: OleVariant; stdcall;
    function Set_XValues(RHS: OleVariant): HResult; stdcall;
    function Get_BubbleSizes: OleVariant; stdcall;
    function Set_BubbleSizes(RHS: OleVariant): HResult; stdcall;
    function Get_BarShape: XlBarShape; stdcall;
    function Set_BarShape(RHS: XlBarShape): HResult; stdcall;
    function Get_ApplyPictToSides: WordBool; stdcall;
    function Set_ApplyPictToSides(RHS: WordBool): HResult; stdcall;
    function Get_ApplyPictToFront: WordBool; stdcall;
    function Set_ApplyPictToFront(RHS: WordBool): HResult; stdcall;
    function Get_ApplyPictToEnd: WordBool; stdcall;
    function Set_ApplyPictToEnd(RHS: WordBool): HResult; stdcall;
    function Get_Has3DEffect: WordBool; stdcall;
    function Set_Has3DEffect(RHS: WordBool): HResult; stdcall;
    function Get_Shadow: WordBool; stdcall;
    function Set_Shadow(RHS: WordBool): HResult; stdcall;
    function Get_HasLeaderLines: WordBool; stdcall;
    function Set_HasLeaderLines(RHS: WordBool): HResult; stdcall;
    function Get_LeaderLines: LeaderLines; stdcall;
  end;

// *********************************************************************//
// Interface: ISeriesCollection
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002086C-0001-0000-C000-000000000046}
// *********************************************************************//
  ISeriesCollection = interface(IDispatch)
    ['{0002086C-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Add(Source: OleVariant; Rowcol: XlRowCol; SeriesLabels: OleVariant; 
                 CategoryLabels: OleVariant; Replace: OleVariant): Series; stdcall;
    function Get_Count: Integer; stdcall;
    function Extend(Source: OleVariant; Rowcol: OleVariant; CategoryLabels: OleVariant): HResult; stdcall;
    function Item(Index: OleVariant): Series; stdcall;
    function _NewEnum: IUnknown; stdcall;
    function Paste(Rowcol: XlRowCol; SeriesLabels: OleVariant; CategoryLabels: OleVariant; 
                   Replace: OleVariant; NewSeries: OleVariant): HResult; stdcall;
    function NewSeries: Series; stdcall;
  end;

// *********************************************************************//
// Interface: IDataLabel
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208B2-0001-0000-C000-000000000046}
// *********************************************************************//
  IDataLabel = interface(IDispatch)
    ['{000208B2-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Name: WideString; stdcall;
    function Select: HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Delete: HResult; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Fill: ChartFillFormat; stdcall;
    function Get_Caption: WideString; stdcall;
    function Set_Caption(const RHS: WideString): HResult; stdcall;
    function Get_Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function Get_Font: Font; stdcall;
    function Get_HorizontalAlignment: OleVariant; stdcall;
    function Set_HorizontalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Orientation: OleVariant; stdcall;
    function Set_Orientation(RHS: OleVariant): HResult; stdcall;
    function Get_Shadow: WordBool; stdcall;
    function Set_Shadow(RHS: WordBool): HResult; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    function Get_VerticalAlignment: OleVariant; stdcall;
    function Set_VerticalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_ReadingOrder: Integer; stdcall;
    function Set_ReadingOrder(RHS: Integer): HResult; stdcall;
    function Get_AutoScaleFont: OleVariant; stdcall;
    function Set_AutoScaleFont(RHS: OleVariant): HResult; stdcall;
    function Get_AutoText: WordBool; stdcall;
    function Set_AutoText(RHS: WordBool): HResult; stdcall;
    function Get_NumberFormat: WideString; stdcall;
    function Set_NumberFormat(const RHS: WideString): HResult; stdcall;
    function Get_NumberFormatLinked: WordBool; stdcall;
    function Set_NumberFormatLinked(RHS: WordBool): HResult; stdcall;
    function Get_ShowLegendKey: WordBool; stdcall;
    function Set_ShowLegendKey(RHS: WordBool): HResult; stdcall;
    function Get_Type_: OleVariant; stdcall;
    function Set_Type_(RHS: OleVariant): HResult; stdcall;
    function Get_Position: XlDataLabelPosition; stdcall;
    function Set_Position(RHS: XlDataLabelPosition): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDataLabels
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208B3-0001-0000-C000-000000000046}
// *********************************************************************//
  IDataLabels = interface(IDispatch)
    ['{000208B3-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Name: WideString; stdcall;
    function Select: HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Delete: HResult; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Fill: ChartFillFormat; stdcall;
    procedure _Dummy9; stdcall;
    procedure _Dummy10; stdcall;
    function Get_Font: Font; stdcall;
    function Get_HorizontalAlignment: OleVariant; stdcall;
    function Set_HorizontalAlignment(RHS: OleVariant): HResult; stdcall;
    procedure _Dummy13; stdcall;
    function Get_Orientation: OleVariant; stdcall;
    function Set_Orientation(RHS: OleVariant): HResult; stdcall;
    function Get_Shadow: WordBool; stdcall;
    function Set_Shadow(RHS: WordBool): HResult; stdcall;
    procedure _Dummy16; stdcall;
    procedure _Dummy17; stdcall;
    function Get_VerticalAlignment: OleVariant; stdcall;
    function Set_VerticalAlignment(RHS: OleVariant): HResult; stdcall;
    function Get_ReadingOrder: Integer; stdcall;
    function Set_ReadingOrder(RHS: Integer): HResult; stdcall;
    function Get_AutoScaleFont: OleVariant; stdcall;
    function Set_AutoScaleFont(RHS: OleVariant): HResult; stdcall;
    function Get_AutoText: WordBool; stdcall;
    function Set_AutoText(RHS: WordBool): HResult; stdcall;
    function Get_NumberFormat: WideString; stdcall;
    function Set_NumberFormat(const RHS: WideString): HResult; stdcall;
    function Get_NumberFormatLinked: WordBool; stdcall;
    function Set_NumberFormatLinked(RHS: WordBool): HResult; stdcall;
    function Get_ShowLegendKey: WordBool; stdcall;
    function Set_ShowLegendKey(RHS: WordBool): HResult; stdcall;
    function Get_Type_: OleVariant; stdcall;
    function Set_Type_(RHS: OleVariant): HResult; stdcall;
    function Get_Position: XlDataLabelPosition; stdcall;
    function Set_Position(RHS: XlDataLabelPosition): HResult; stdcall;
    function Get_Count: Integer; stdcall;
    function Item(Index: OleVariant): DataLabel; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: ILegendEntry
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208BA-0001-0000-C000-000000000046}
// *********************************************************************//
  ILegendEntry = interface(IDispatch)
    ['{000208BA-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Delete: HResult; stdcall;
    function Get_Font: Font; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_LegendKey: LegendKey; stdcall;
    function Select: HResult; stdcall;
    function Get_AutoScaleFont: OleVariant; stdcall;
    function Set_AutoScaleFont(RHS: OleVariant): HResult; stdcall;
    function Get_Left: Double; stdcall;
    function Get_Top: Double; stdcall;
    function Get_Width: Double; stdcall;
    function Get_Height: Double; stdcall;
  end;

// *********************************************************************//
// Interface: ILegendEntries
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208BB-0001-0000-C000-000000000046}
// *********************************************************************//
  ILegendEntries = interface(IDispatch)
    ['{000208BB-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Count: Integer; stdcall;
    function Item(Index: OleVariant): LegendEntry; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: ILegendKey
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208BC-0001-0000-C000-000000000046}
// *********************************************************************//
  ILegendKey = interface(IDispatch)
    ['{000208BC-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Border: Border; stdcall;
    function ClearFormats: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Fill: ChartFillFormat; stdcall;
    function Get_InvertIfNegative: WordBool; stdcall;
    function Set_InvertIfNegative(RHS: WordBool): HResult; stdcall;
    function Get_MarkerBackgroundColor: Integer; stdcall;
    function Set_MarkerBackgroundColor(RHS: Integer): HResult; stdcall;
    function Get_MarkerBackgroundColorIndex: XlColorIndex; stdcall;
    function Set_MarkerBackgroundColorIndex(RHS: XlColorIndex): HResult; stdcall;
    function Get_MarkerForegroundColor: Integer; stdcall;
    function Set_MarkerForegroundColor(RHS: Integer): HResult; stdcall;
    function Get_MarkerForegroundColorIndex: XlColorIndex; stdcall;
    function Set_MarkerForegroundColorIndex(RHS: XlColorIndex): HResult; stdcall;
    function Get_MarkerSize: Integer; stdcall;
    function Set_MarkerSize(RHS: Integer): HResult; stdcall;
    function Get_MarkerStyle: XlMarkerStyle; stdcall;
    function Set_MarkerStyle(RHS: XlMarkerStyle): HResult; stdcall;
    function Get_PictureType: Integer; stdcall;
    function Set_PictureType(RHS: Integer): HResult; stdcall;
    function Get_PictureUnit: Integer; stdcall;
    function Set_PictureUnit(RHS: Integer): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_Smooth: WordBool; stdcall;
    function Set_Smooth(RHS: WordBool): HResult; stdcall;
    function Get_Left: Double; stdcall;
    function Get_Top: Double; stdcall;
    function Get_Width: Double; stdcall;
    function Get_Height: Double; stdcall;
    function Get_Shadow: WordBool; stdcall;
    function Set_Shadow(RHS: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ITrendlines
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208BD-0001-0000-C000-000000000046}
// *********************************************************************//
  ITrendlines = interface(IDispatch)
    ['{000208BD-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Add(Type_: XlTrendlineType; Order: OleVariant; Period: OleVariant; 
                 Forward: OleVariant; Backward: OleVariant; Intercept: OleVariant; 
                 DisplayEquation: OleVariant; DisplayRSquared: OleVariant; Name: OleVariant): Trendline; stdcall;
    function Get_Count: Integer; stdcall;
    function Item(Index: OleVariant): Trendline; stdcall;
    function _NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: ITrendline
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208BE-0001-0000-C000-000000000046}
// *********************************************************************//
  ITrendline = interface(IDispatch)
    ['{000208BE-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Backward: Integer; stdcall;
    function Set_Backward(RHS: Integer): HResult; stdcall;
    function Get_Border: Border; stdcall;
    function ClearFormats: HResult; stdcall;
    function Get_DataLabel: DataLabel; stdcall;
    function Delete: HResult; stdcall;
    function Get_DisplayEquation: WordBool; stdcall;
    function Set_DisplayEquation(RHS: WordBool): HResult; stdcall;
    function Get_DisplayRSquared: WordBool; stdcall;
    function Set_DisplayRSquared(RHS: WordBool): HResult; stdcall;
    function Get_Forward: Integer; stdcall;
    function Set_Forward(RHS: Integer): HResult; stdcall;
    function Get_Index: Integer; stdcall;
    function Get_Intercept: Double; stdcall;
    function Set_Intercept(RHS: Double): HResult; stdcall;
    function Get_InterceptIsAuto: WordBool; stdcall;
    function Set_InterceptIsAuto(RHS: WordBool): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_NameIsAuto: WordBool; stdcall;
    function Set_NameIsAuto(RHS: WordBool): HResult; stdcall;
    function Get_Order: Integer; stdcall;
    function Set_Order(RHS: Integer): HResult; stdcall;
    function Get_Period: Integer; stdcall;
    function Set_Period(RHS: Integer): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_Type_: XlTrendlineType; stdcall;
    function Set_Type_(RHS: XlTrendlineType): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ICorners
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208C0-0001-0000-C000-000000000046}
// *********************************************************************//
  ICorners = interface(IDispatch)
    ['{000208C0-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Name: WideString; stdcall;
    function Select: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISeriesLines
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208C1-0001-0000-C000-000000000046}
// *********************************************************************//
  ISeriesLines = interface(IDispatch)
    ['{000208C1-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Name: WideString; stdcall;
    function Select: HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Delete: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IHiLoLines
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208C2-0001-0000-C000-000000000046}
// *********************************************************************//
  IHiLoLines = interface(IDispatch)
    ['{000208C2-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Name: WideString; stdcall;
    function Select: HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Delete: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IGridlines
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208C3-0001-0000-C000-000000000046}
// *********************************************************************//
  IGridlines = interface(IDispatch)
    ['{000208C3-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Name: WideString; stdcall;
    function Select: HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Delete: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDropLines
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208C4-0001-0000-C000-000000000046}
// *********************************************************************//
  IDropLines = interface(IDispatch)
    ['{000208C4-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Name: WideString; stdcall;
    function Select: HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Delete: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ILeaderLines
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024437-0001-0000-C000-000000000046}
// *********************************************************************//
  ILeaderLines = interface(IDispatch)
    ['{00024437-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Border: Border; stdcall;
    function Delete: HResult; stdcall;
    function Select: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUpBars
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208C5-0001-0000-C000-000000000046}
// *********************************************************************//
  IUpBars = interface(IDispatch)
    ['{000208C5-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Name: WideString; stdcall;
    function Select: HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Delete: HResult; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Fill: ChartFillFormat; stdcall;
  end;

// *********************************************************************//
// Interface: IDownBars
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208C6-0001-0000-C000-000000000046}
// *********************************************************************//
  IDownBars = interface(IDispatch)
    ['{000208C6-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Name: WideString; stdcall;
    function Select: HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Delete: HResult; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Fill: ChartFillFormat; stdcall;
  end;

// *********************************************************************//
// Interface: IFloor
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208C7-0001-0000-C000-000000000046}
// *********************************************************************//
  IFloor = interface(IDispatch)
    ['{000208C7-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Name: WideString; stdcall;
    function Select: HResult; stdcall;
    function Get_Border: Border; stdcall;
    function ClearFormats: HResult; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Fill: ChartFillFormat; stdcall;
    function Get_PictureType: OleVariant; stdcall;
    function Set_PictureType(RHS: OleVariant): HResult; stdcall;
    function Paste: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IWalls
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208C8-0001-0000-C000-000000000046}
// *********************************************************************//
  IWalls = interface(IDispatch)
    ['{000208C8-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Name: WideString; stdcall;
    function Select: HResult; stdcall;
    function Get_Border: Border; stdcall;
    function ClearFormats: HResult; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Fill: ChartFillFormat; stdcall;
    function Get_PictureType: OleVariant; stdcall;
    function Set_PictureType(RHS: OleVariant): HResult; stdcall;
    function Paste: HResult; stdcall;
    function Get_PictureUnit: OleVariant; stdcall;
    function Set_PictureUnit(RHS: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ITickLabels
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208C9-0001-0000-C000-000000000046}
// *********************************************************************//
  ITickLabels = interface(IDispatch)
    ['{000208C9-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Delete: HResult; stdcall;
    function Get_Font: Font; stdcall;
    function Get_Name: WideString; stdcall;
    function Get_NumberFormat: WideString; stdcall;
    function Set_NumberFormat(const RHS: WideString): HResult; stdcall;
    function Get_NumberFormatLinked: WordBool; stdcall;
    function Set_NumberFormatLinked(RHS: WordBool): HResult; stdcall;
    function Get_Orientation: XlTickLabelOrientation; stdcall;
    function Set_Orientation(RHS: XlTickLabelOrientation): HResult; stdcall;
    function Select: HResult; stdcall;
    function Get_ReadingOrder: Integer; stdcall;
    function Set_ReadingOrder(RHS: Integer): HResult; stdcall;
    function Get_AutoScaleFont: OleVariant; stdcall;
    function Set_AutoScaleFont(RHS: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPlotArea
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208CB-0001-0000-C000-000000000046}
// *********************************************************************//
  IPlotArea = interface(IDispatch)
    ['{000208CB-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Name: WideString; stdcall;
    function Select: HResult; stdcall;
    function Get_Border: Border; stdcall;
    function ClearFormats: HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Fill: ChartFillFormat; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_InsideLeft: Double; stdcall;
    function Get_InsideTop: Double; stdcall;
    function Get_InsideWidth: Double; stdcall;
    function Get_InsideHeight: Double; stdcall;
  end;

// *********************************************************************//
// Interface: IChartArea
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208CC-0001-0000-C000-000000000046}
// *********************************************************************//
  IChartArea = interface(IDispatch)
    ['{000208CC-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Name: WideString; stdcall;
    function Select: HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Clear: HResult; stdcall;
    function ClearContents: HResult; stdcall;
    function Copy: HResult; stdcall;
    function Get_Font: Font; stdcall;
    function Get_Shadow: WordBool; stdcall;
    function Set_Shadow(RHS: WordBool): HResult; stdcall;
    function ClearFormats: HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Fill: ChartFillFormat; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_AutoScaleFont: OleVariant; stdcall;
    function Set_AutoScaleFont(RHS: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ILegend
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208CD-0001-0000-C000-000000000046}
// *********************************************************************//
  ILegend = interface(IDispatch)
    ['{000208CD-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Name: WideString; stdcall;
    function Select: HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Delete: HResult; stdcall;
    function Get_Font: Font; stdcall;
    function LegendEntries(Index: OleVariant): IDispatch; stdcall;
    function Get_Position: XlLegendPosition; stdcall;
    function Set_Position(RHS: XlLegendPosition): HResult; stdcall;
    function Get_Shadow: WordBool; stdcall;
    function Set_Shadow(RHS: WordBool): HResult; stdcall;
    function Clear: HResult; stdcall;
    function Get_Height: Double; stdcall;
    function Set_Height(RHS: Double): HResult; stdcall;
    function Get_Interior: Interior; stdcall;
    function Get_Fill: ChartFillFormat; stdcall;
    function Get_Left: Double; stdcall;
    function Set_Left(RHS: Double): HResult; stdcall;
    function Get_Top: Double; stdcall;
    function Set_Top(RHS: Double): HResult; stdcall;
    function Get_Width: Double; stdcall;
    function Set_Width(RHS: Double): HResult; stdcall;
    function Get_AutoScaleFont: OleVariant; stdcall;
    function Set_AutoScaleFont(RHS: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IErrorBars
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208CE-0001-0000-C000-000000000046}
// *********************************************************************//
  IErrorBars = interface(IDispatch)
    ['{000208CE-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Name: WideString; stdcall;
    function Select: HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Delete: HResult; stdcall;
    function ClearFormats: HResult; stdcall;
    function Get_EndStyle: XlEndStyleCap; stdcall;
    function Set_EndStyle(RHS: XlEndStyleCap): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDataTable
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020843-0001-0000-C000-000000000046}
// *********************************************************************//
  IDataTable = interface(IDispatch)
    ['{00020843-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_ShowLegendKey: WordBool; stdcall;
    function Set_ShowLegendKey(RHS: WordBool): HResult; stdcall;
    function Get_HasBorderHorizontal: WordBool; stdcall;
    function Set_HasBorderHorizontal(RHS: WordBool): HResult; stdcall;
    function Get_HasBorderVertical: WordBool; stdcall;
    function Set_HasBorderVertical(RHS: WordBool): HResult; stdcall;
    function Get_HasBorderOutline: WordBool; stdcall;
    function Set_HasBorderOutline(RHS: WordBool): HResult; stdcall;
    function Get_Border: Border; stdcall;
    function Get_Font: Font; stdcall;
    function Select: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Get_AutoScaleFont: OleVariant; stdcall;
    function Set_AutoScaleFont(RHS: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPhonetic
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024438-0001-0000-C000-000000000046}
// *********************************************************************//
  IPhonetic = interface(IDispatch)
    ['{00024438-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Visible: WordBool; stdcall;
    function Set_Visible(RHS: WordBool): HResult; stdcall;
    function Get_CharacterType: Integer; stdcall;
    function Set_CharacterType(RHS: Integer): HResult; stdcall;
    function Get_Alignment: Integer; stdcall;
    function Set_Alignment(RHS: Integer): HResult; stdcall;
    function Get_Font: Font; stdcall;
    function Get_Text: WideString; stdcall;
    function Set_Text(const RHS: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IShape
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024439-0001-0000-C000-000000000046}
// *********************************************************************//
  IShape = interface(IDispatch)
    ['{00024439-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Apply: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Duplicate: Shape; stdcall;
    function Flip(FlipCmd: MsoFlipCmd): HResult; stdcall;
    function IncrementLeft(Increment: Single): HResult; stdcall;
    function IncrementRotation(Increment: Single): HResult; stdcall;
    function IncrementTop(Increment: Single): HResult; stdcall;
    function PickUp: HResult; stdcall;
    function RerouteConnections: HResult; stdcall;
    function ScaleHeight(Factor: Single; RelativeToOriginalSize: MsoTriState; Scale: OleVariant): HResult; stdcall;
    function ScaleWidth(Factor: Single; RelativeToOriginalSize: MsoTriState; Scale: OleVariant): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SetShapesDefaultProperties: HResult; stdcall;
    function Ungroup: ShapeRange; stdcall;
    function ZOrder(ZOrderCmd: MsoZOrderCmd): HResult; stdcall;
    function Get_Adjustments: Adjustments; stdcall;
    function Get_TextFrame: TextFrame; stdcall;
    function Get_AutoShapeType: MsoAutoShapeType; stdcall;
    function Set_AutoShapeType(RHS: MsoAutoShapeType): HResult; stdcall;
    function Get_Callout: CalloutFormat; stdcall;
    function Get_ConnectionSiteCount: Integer; stdcall;
    function Get_Connector: MsoTriState; stdcall;
    function Get_ConnectorFormat: ConnectorFormat; stdcall;
    function Get_Fill: FillFormat; stdcall;
    function Get_GroupItems: GroupShapes; stdcall;
    function Get_Height: Single; stdcall;
    function Set_Height(RHS: Single): HResult; stdcall;
    function Get_HorizontalFlip: MsoTriState; stdcall;
    function Get_Left: Single; stdcall;
    function Set_Left(RHS: Single): HResult; stdcall;
    function Get_Line: LineFormat; stdcall;
    function Get_LockAspectRatio: MsoTriState; stdcall;
    function Set_LockAspectRatio(RHS: MsoTriState): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_Nodes: ShapeNodes; stdcall;
    function Get_Rotation: Single; stdcall;
    function Set_Rotation(RHS: Single): HResult; stdcall;
    function Get_PictureFormat: PictureFormat; stdcall;
    function Get_Shadow: ShadowFormat; stdcall;
    function Get_TextEffect: TextEffectFormat; stdcall;
    function Get_ThreeD: ThreeDFormat; stdcall;
    function Get_Top: Single; stdcall;
    function Set_Top(RHS: Single): HResult; stdcall;
    function Get_Type_: MsoShapeType; stdcall;
    function Get_VerticalFlip: MsoTriState; stdcall;
    function Get_Vertices: OleVariant; stdcall;
    function Get_Visible: MsoTriState; stdcall;
    function Set_Visible(RHS: MsoTriState): HResult; stdcall;
    function Get_Width: Single; stdcall;
    function Set_Width(RHS: Single): HResult; stdcall;
    function Get_ZOrderPosition: Integer; stdcall;
    function Get_Hyperlink: Hyperlink; stdcall;
    function Get_BlackWhiteMode: MsoBlackWhiteMode; stdcall;
    function Set_BlackWhiteMode(RHS: MsoBlackWhiteMode): HResult; stdcall;
    function Get_DrawingObject: IDispatch; stdcall;
    function Get_OnAction: WideString; stdcall;
    function Set_OnAction(const RHS: WideString): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    function Get_TopLeftCell: Range; stdcall;
    function Get_BottomRightCell: Range; stdcall;
    function Get_Placement: XlPlacement; stdcall;
    function Set_Placement(RHS: XlPlacement): HResult; stdcall;
    function Copy: HResult; stdcall;
    function Cut: HResult; stdcall;
    function CopyPicture(Appearance: OleVariant; Format: OleVariant): HResult; stdcall;
    function Get_ControlFormat: ControlFormat; stdcall;
    function Get_LinkFormat: LinkFormat; stdcall;
    function Get_OLEFormat: OLEFormat; stdcall;
    function Get_FormControlType: XlFormControl; stdcall;
  end;

// *********************************************************************//
// Interface: IShapes
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002443A-0001-0000-C000-000000000046}
// *********************************************************************//
  IShapes = interface(IDispatch)
    ['{0002443A-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Count: Integer; stdcall;
    function Item(Index: OleVariant): Shape; stdcall;
    function _Default(Index: OleVariant): Shape; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
    function AddCallout(Type_: MsoCalloutType; Left: Single; Top: Single; Width: Single; 
                        Height: Single): Shape; stdcall;
    function AddConnector(Type_: MsoConnectorType; BeginX: Single; BeginY: Single; EndX: Single; 
                          EndY: Single): Shape; stdcall;
    function AddCurve(SafeArrayOfPoints: OleVariant): Shape; stdcall;
    function AddLabel(Orientation: MsoTextOrientation; Left: Single; Top: Single; Width: Single; 
                      Height: Single): Shape; stdcall;
    function AddLine(BeginX: Single; BeginY: Single; EndX: Single; EndY: Single): Shape; stdcall;
    function AddPicture(const Filename: WideString; LinkToFile: MsoTriState; 
                        SaveWithDocument: MsoTriState; Left: Single; Top: Single; Width: Single; 
                        Height: Single): Shape; stdcall;
    function AddPolyline(SafeArrayOfPoints: OleVariant): Shape; stdcall;
    function AddShape(Type_: MsoAutoShapeType; Left: Single; Top: Single; Width: Single; 
                      Height: Single): Shape; stdcall;
    function AddTextEffect(PresetTextEffect: MsoPresetTextEffect; const Text: WideString; 
                           const FontName: WideString; FontSize: Single; FontBold: MsoTriState; 
                           FontItalic: MsoTriState; Left: Single; Top: Single): Shape; stdcall;
    function AddTextbox(Orientation: MsoTextOrientation; Left: Single; Top: Single; Width: Single; 
                        Height: Single): Shape; stdcall;
    function BuildFreeform(EditingType: MsoEditingType; X1: Single; Y1: Single): FreeformBuilder; stdcall;
    function Get_Range(Index: OleVariant): ShapeRange; stdcall;
    function SelectAll: HResult; stdcall;
    function AddFormControl(Type_: XlFormControl; Left: Integer; Top: Integer; Width: Integer; 
                            Height: Integer): Shape; stdcall;
    function AddOLEObject(ClassType: OleVariant; Filename: OleVariant; Link: OleVariant; 
                          DisplayAsIcon: OleVariant; IconFileName: OleVariant; 
                          IconIndex: OleVariant; IconLabel: OleVariant; Left: OleVariant; 
                          Top: OleVariant; Width: OleVariant; Height: OleVariant): Shape; stdcall;
  end;

// *********************************************************************//
// Interface: IShapeRange
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002443B-0001-0000-C000-000000000046}
// *********************************************************************//
  IShapeRange = interface(IDispatch)
    ['{0002443B-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Count: Integer; stdcall;
    function Item(Index: OleVariant): Shape; stdcall;
    function _Default(Index: OleVariant): Shape; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
    function Align(AlignCmd: MsoAlignCmd; RelativeTo: MsoTriState): HResult; stdcall;
    function Apply: HResult; stdcall;
    function Delete: HResult; stdcall;
    function Distribute(DistributeCmd: MsoDistributeCmd; RelativeTo: MsoTriState): HResult; stdcall;
    function Duplicate: ShapeRange; stdcall;
    function Flip(FlipCmd: MsoFlipCmd): HResult; stdcall;
    function IncrementLeft(Increment: Single): HResult; stdcall;
    function IncrementRotation(Increment: Single): HResult; stdcall;
    function IncrementTop(Increment: Single): HResult; stdcall;
    function Group: Shape; stdcall;
    function PickUp: HResult; stdcall;
    function RerouteConnections: HResult; stdcall;
    function Regroup: Shape; stdcall;
    function ScaleHeight(Factor: Single; RelativeToOriginalSize: MsoTriState; Scale: OleVariant): HResult; stdcall;
    function ScaleWidth(Factor: Single; RelativeToOriginalSize: MsoTriState; Scale: OleVariant): HResult; stdcall;
    function Select(Replace: OleVariant): HResult; stdcall;
    function SetShapesDefaultProperties: HResult; stdcall;
    function Ungroup: ShapeRange; stdcall;
    function ZOrder(ZOrderCmd: MsoZOrderCmd): HResult; stdcall;
    function Get_Adjustments: Adjustments; stdcall;
    function Get_TextFrame: TextFrame; stdcall;
    function Get_AutoShapeType: MsoAutoShapeType; stdcall;
    function Set_AutoShapeType(RHS: MsoAutoShapeType): HResult; stdcall;
    function Get_Callout: CalloutFormat; stdcall;
    function Get_ConnectionSiteCount: Integer; stdcall;
    function Get_Connector: MsoTriState; stdcall;
    function Get_ConnectorFormat: ConnectorFormat; stdcall;
    function Get_Fill: FillFormat; stdcall;
    function Get_GroupItems: GroupShapes; stdcall;
    function Get_Height: Single; stdcall;
    function Set_Height(RHS: Single): HResult; stdcall;
    function Get_HorizontalFlip: MsoTriState; stdcall;
    function Get_Left: Single; stdcall;
    function Set_Left(RHS: Single): HResult; stdcall;
    function Get_Line: LineFormat; stdcall;
    function Get_LockAspectRatio: MsoTriState; stdcall;
    function Set_LockAspectRatio(RHS: MsoTriState): HResult; stdcall;
    function Get_Name: WideString; stdcall;
    function Set_Name(const RHS: WideString): HResult; stdcall;
    function Get_Nodes: ShapeNodes; stdcall;
    function Get_Rotation: Single; stdcall;
    function Set_Rotation(RHS: Single): HResult; stdcall;
    function Get_PictureFormat: PictureFormat; stdcall;
    function Get_Shadow: ShadowFormat; stdcall;
    function Get_TextEffect: TextEffectFormat; stdcall;
    function Get_ThreeD: ThreeDFormat; stdcall;
    function Get_Top: Single; stdcall;
    function Set_Top(RHS: Single): HResult; stdcall;
    function Get_Type_: MsoShapeType; stdcall;
    function Get_VerticalFlip: MsoTriState; stdcall;
    function Get_Vertices: OleVariant; stdcall;
    function Get_Visible: MsoTriState; stdcall;
    function Set_Visible(RHS: MsoTriState): HResult; stdcall;
    function Get_Width: Single; stdcall;
    function Set_Width(RHS: Single): HResult; stdcall;
    function Get_ZOrderPosition: Integer; stdcall;
    function Get_BlackWhiteMode: MsoBlackWhiteMode; stdcall;
    function Set_BlackWhiteMode(RHS: MsoBlackWhiteMode): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IGroupShapes
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002443C-0001-0000-C000-000000000046}
// *********************************************************************//
  IGroupShapes = interface(IDispatch)
    ['{0002443C-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_Count: Integer; stdcall;
    function Item(Index: OleVariant): Shape; stdcall;
    function _Default(Index: OleVariant): Shape; stdcall;
    function Get__NewEnum: IUnknown; stdcall;
  end;

// *********************************************************************//
// Interface: ITextFrame
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002443D-0001-0000-C000-000000000046}
// *********************************************************************//
  ITextFrame = interface(IDispatch)
    ['{0002443D-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_MarginBottom: Single; stdcall;
    function Set_MarginBottom(RHS: Single): HResult; stdcall;
    function Get_MarginLeft: Single; stdcall;
    function Set_MarginLeft(RHS: Single): HResult; stdcall;
    function Get_MarginRight: Single; stdcall;
    function Set_MarginRight(RHS: Single): HResult; stdcall;
    function Get_MarginTop: Single; stdcall;
    function Set_MarginTop(RHS: Single): HResult; stdcall;
    function Get_Orientation: MsoTextOrientation; stdcall;
    function Set_Orientation(RHS: MsoTextOrientation): HResult; stdcall;
    function Characters(Start: OleVariant; Length: OleVariant): Characters; stdcall;
    function Get_HorizontalAlignment: XlHAlign; stdcall;
    function Set_HorizontalAlignment(RHS: XlHAlign): HResult; stdcall;
    function Get_VerticalAlignment: XlVAlign; stdcall;
    function Set_VerticalAlignment(RHS: XlVAlign): HResult; stdcall;
    function Get_AutoSize: WordBool; stdcall;
    function Set_AutoSize(RHS: WordBool): HResult; stdcall;
    function Get_ReadingOrder: Integer; stdcall;
    function Set_ReadingOrder(RHS: Integer): HResult; stdcall;
    function Get_AutoMargins: WordBool; stdcall;
    function Set_AutoMargins(RHS: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IConnectorFormat
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002443E-0001-0000-C000-000000000046}
// *********************************************************************//
  IConnectorFormat = interface(IDispatch)
    ['{0002443E-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function BeginConnect(const ConnectedShape: Shape; ConnectionSite: Integer): HResult; stdcall;
    function BeginDisconnect: HResult; stdcall;
    function EndConnect(const ConnectedShape: Shape; ConnectionSite: Integer): HResult; stdcall;
    function EndDisconnect: HResult; stdcall;
    function Get_BeginConnected: MsoTriState; stdcall;
    function Get_BeginConnectedShape: Shape; stdcall;
    function Get_BeginConnectionSite: Integer; stdcall;
    function Get_EndConnected: MsoTriState; stdcall;
    function Get_EndConnectedShape: Shape; stdcall;
    function Get_EndConnectionSite: Integer; stdcall;
    function Get_Type_: MsoConnectorType; stdcall;
    function Set_Type_(RHS: MsoConnectorType): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IFreeformBuilder
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002443F-0001-0000-C000-000000000046}
// *********************************************************************//
  IFreeformBuilder = interface(IDispatch)
    ['{0002443F-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function AddNodes(SegmentType: MsoSegmentType; EditingType: MsoEditingType; X1: Single; 
                      Y1: Single; X2: OleVariant; Y2: OleVariant; X3: OleVariant; Y3: OleVariant): HResult; stdcall;
    function ConvertToShape: Shape; stdcall;
  end;

// *********************************************************************//
// Interface: IControlFormat
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024440-0001-0000-C000-000000000046}
// *********************************************************************//
  IControlFormat = interface(IDispatch)
    ['{00024440-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function AddItem(const Text: WideString; Index: OleVariant): HResult; stdcall;
    function RemoveAllItems: HResult; stdcall;
    function RemoveItem(Index: Integer; Count: OleVariant): HResult; stdcall;
    function Get_DropDownLines: Integer; stdcall;
    function Set_DropDownLines(RHS: Integer): HResult; stdcall;
    function Get_Enabled: WordBool; stdcall;
    function Set_Enabled(RHS: WordBool): HResult; stdcall;
    function Get_LargeChange: Integer; stdcall;
    function Set_LargeChange(RHS: Integer): HResult; stdcall;
    function Get_LinkedCell: WideString; stdcall;
    function Set_LinkedCell(const RHS: WideString): HResult; stdcall;
    function List(Index: OleVariant): OleVariant; stdcall;
    function Get_ListCount: Integer; stdcall;
    function Set_ListCount(RHS: Integer): HResult; stdcall;
    function Get_ListFillRange: WideString; stdcall;
    function Set_ListFillRange(const RHS: WideString): HResult; stdcall;
    function Get_ListIndex: Integer; stdcall;
    function Set_ListIndex(RHS: Integer): HResult; stdcall;
    function Get_LockedText: WordBool; stdcall;
    function Set_LockedText(RHS: WordBool): HResult; stdcall;
    function Get_Max: Integer; stdcall;
    function Set_Max(RHS: Integer): HResult; stdcall;
    function Get_Min: Integer; stdcall;
    function Set_Min(RHS: Integer): HResult; stdcall;
    function Get_MultiSelect: Integer; stdcall;
    function Set_MultiSelect(RHS: Integer): HResult; stdcall;
    function Get_PrintObject: WordBool; stdcall;
    function Set_PrintObject(RHS: WordBool): HResult; stdcall;
    function Get_SmallChange: Integer; stdcall;
    function Set_SmallChange(RHS: Integer): HResult; stdcall;
    function Get__Default: Integer; stdcall;
    function Set__Default(RHS: Integer): HResult; stdcall;
    function Get_Value: Integer; stdcall;
    function Set_Value(RHS: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IOLEFormat
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024441-0001-0000-C000-000000000046}
// *********************************************************************//
  IOLEFormat = interface(IDispatch)
    ['{00024441-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Activate: HResult; stdcall;
    function Get_Object_: IDispatch; stdcall;
    function Get_ProgId: WideString; stdcall;
    function Verb(Verb: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ILinkFormat
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024442-0001-0000-C000-000000000046}
// *********************************************************************//
  ILinkFormat = interface(IDispatch)
    ['{00024442-0001-0000-C000-000000000046}']
    function Get_Application_: Application_; stdcall;
    function Get_Creator: XlCreator; stdcall;
    function Get_Parent: IDispatch; stdcall;
    function Get_AutoUpdate: WordBool; stdcall;
    function Set_AutoUpdate(RHS: WordBool): HResult; stdcall;
    function Get_Locked: WordBool; stdcall;
    function Set_Locked(RHS: WordBool): HResult; stdcall;
    function Update: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDummy
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002442E-0001-0000-C000-000000000046}
// *********************************************************************//
  IDummy = interface(IDispatch)
    ['{0002442E-0001-0000-C000-000000000046}']
    function _ActiveSheetOrChart: HResult; stdcall;
    function RGB_: HResult; stdcall;
    function ChDir: HResult; stdcall;
    function DoScript: HResult; stdcall;
    function DirectObject: HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  AdjustmentsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0310-0000-0000-C000-000000000046}
// *********************************************************************//
  AdjustmentsDisp = dispinterface
    ['{000C0310-0000-0000-C000-000000000046}']
    property Parent: IDispatch readonly dispid 1;
    property Count: SYSINT readonly dispid 2;
    property Item[Index: SYSINT]: Single dispid 0; default;
    property Application_: IDispatch readonly dispid 1610743808;
    property Creator: Integer readonly dispid 1610743809;
  end;

// *********************************************************************//
// DispIntf:  CalloutFormatDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0311-0000-0000-C000-000000000046}
// *********************************************************************//
  CalloutFormatDisp = dispinterface
    ['{000C0311-0000-0000-C000-000000000046}']
    property Parent: IDispatch readonly dispid 1;
    procedure AutomaticLength; dispid 10;
    procedure CustomDrop(Drop: Single); dispid 11;
    procedure CustomLength(Length: Single); dispid 12;
    procedure PresetDrop(DropType: MsoCalloutDropType); dispid 13;
    property Accent: MsoTriState dispid 100;
    property Angle: MsoCalloutAngleType dispid 101;
    property AutoAttach: MsoTriState dispid 102;
    property AutoLength: MsoTriState readonly dispid 103;
    property Border: MsoTriState dispid 104;
    property Drop: Single readonly dispid 105;
    property DropType: MsoCalloutDropType readonly dispid 106;
    property Gap: Single dispid 107;
    property Length: Single readonly dispid 108;
    property Type_: MsoCalloutType dispid 109;
    property Application_: IDispatch readonly dispid 1610743808;
    property Creator: Integer readonly dispid 1610743809;
  end;

// *********************************************************************//
// DispIntf:  ColorFormatDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0312-0000-0000-C000-000000000046}
// *********************************************************************//
  ColorFormatDisp = dispinterface
    ['{000C0312-0000-0000-C000-000000000046}']
    property Parent: IDispatch readonly dispid 1;
    property RGB_: MsoRGBType dispid 0;
    property SchemeColor: SYSINT dispid 100;
    property Type_: MsoColorType readonly dispid 101;
    property Application_: IDispatch readonly dispid 1610743808;
    property Creator: Integer readonly dispid 1610743809;
  end;

// *********************************************************************//
// DispIntf:  LineFormatDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0317-0000-0000-C000-000000000046}
// *********************************************************************//
  LineFormatDisp = dispinterface
    ['{000C0317-0000-0000-C000-000000000046}']
    property Parent: IDispatch readonly dispid 1;
    property BackColor: ColorFormat dispid 100;
    property BeginArrowheadLength: MsoArrowheadLength dispid 101;
    property BeginArrowheadStyle: MsoArrowheadStyle dispid 102;
    property BeginArrowheadWidth: MsoArrowheadWidth dispid 103;
    property DashStyle: MsoLineDashStyle dispid 104;
    property EndArrowheadLength: MsoArrowheadLength dispid 105;
    property EndArrowheadStyle: MsoArrowheadStyle dispid 106;
    property EndArrowheadWidth: MsoArrowheadWidth dispid 107;
    property ForeColor: ColorFormat dispid 108;
    property Pattern: MsoPatternType dispid 109;
    property Style: MsoLineStyle dispid 110;
    property Transparency: Single dispid 111;
    property Visible: MsoTriState dispid 112;
    property Weight: Single dispid 113;
    property Application_: IDispatch readonly dispid 1610743808;
    property Creator: Integer readonly dispid 1610743809;
  end;

// *********************************************************************//
// DispIntf:  ShapeNodeDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0318-0000-0000-C000-000000000046}
// *********************************************************************//
  ShapeNodeDisp = dispinterface
    ['{000C0318-0000-0000-C000-000000000046}']
    property Parent: IDispatch readonly dispid 1;
    property EditingType: MsoEditingType readonly dispid 100;
    property Points: OleVariant readonly dispid 101;
    property SegmentType: MsoSegmentType readonly dispid 102;
    property Application_: IDispatch readonly dispid 1610743808;
    property Creator: Integer readonly dispid 1610743809;
  end;

// *********************************************************************//
// DispIntf:  ShapeNodesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0319-0000-0000-C000-000000000046}
// *********************************************************************//
  ShapeNodesDisp = dispinterface
    ['{000C0319-0000-0000-C000-000000000046}']
    property Parent: IDispatch readonly dispid 1;
    property Count: SYSINT readonly dispid 2;
    function Item(Index: OleVariant): ShapeNode; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    procedure Delete(Index: SYSINT); dispid 11;
    procedure Insert(Index: SYSINT; SegmentType: MsoSegmentType; EditingType: MsoEditingType;
                     X1: Single; Y1: Single; X2: Single; Y2: Single; X3: Single; Y3: Single); dispid 12;
    procedure SetEditingType(Index: SYSINT; EditingType: MsoEditingType); dispid 13;
    procedure SetPosition(Index: SYSINT; X1: Single; Y1: Single); dispid 14;
    procedure SetSegmentType(Index: SYSINT; SegmentType: MsoSegmentType); dispid 15;
    property Application_: IDispatch readonly dispid 1610743808;
    property Creator: Integer readonly dispid 1610743809;
  end;

// *********************************************************************//
// DispIntf:  PictureFormatDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031A-0000-0000-C000-000000000046}
// *********************************************************************//
  PictureFormatDisp = dispinterface
    ['{000C031A-0000-0000-C000-000000000046}']
    property Parent: IDispatch readonly dispid 1;
    procedure IncrementBrightness(Increment: Single); dispid 10;
    procedure IncrementContrast(Increment: Single); dispid 11;
    property Brightness: Single dispid 100;
    property ColorType: MsoPictureColorType dispid 101;
    property Contrast: Single dispid 102;
    property CropBottom: Single dispid 103;
    property CropLeft: Single dispid 104;
    property CropRight: Single dispid 105;
    property CropTop: Single dispid 106;
    property TransparencyColor: MsoRGBType dispid 107;
    property TransparentBackground: MsoTriState dispid 108;
    property Application_: IDispatch readonly dispid 1610743808;
    property Creator: Integer readonly dispid 1610743809;
  end;

// *********************************************************************//
// DispIntf:  ShadowFormatDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031B-0000-0000-C000-000000000046}
// *********************************************************************//
  ShadowFormatDisp = dispinterface
    ['{000C031B-0000-0000-C000-000000000046}']
    property Parent: IDispatch readonly dispid 1;
    procedure IncrementOffsetX(Increment: Single); dispid 10;
    procedure IncrementOffsetY(Increment: Single); dispid 11;
    property ForeColor: ColorFormat dispid 100;
    property Obscured: MsoTriState dispid 101;
    property OffsetX: Single dispid 102;
    property OffsetY: Single dispid 103;
    property Transparency: Single dispid 104;
    property Type_: MsoShadowType dispid 105;
    property Visible: MsoTriState dispid 106;
    property Application_: IDispatch readonly dispid 1610743808;
    property Creator: Integer readonly dispid 1610743809;
  end;

// *********************************************************************//
// DispIntf:  TextEffectFormatDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031F-0000-0000-C000-000000000046}
// *********************************************************************//
  TextEffectFormatDisp = dispinterface
    ['{000C031F-0000-0000-C000-000000000046}']
    property Parent: IDispatch readonly dispid 1;
    procedure ToggleVerticalText; dispid 10;
    property Alignment: MsoTextEffectAlignment dispid 100;
    property FontBold: MsoTriState dispid 101;
    property FontItalic: MsoTriState dispid 102;
    property FontName: WideString dispid 103;
    property FontSize: Single dispid 104;
    property KernedPairs: MsoTriState dispid 105;
    property NormalizedHeight: MsoTriState dispid 106;
    property PresetShape: MsoPresetTextEffectShape dispid 107;
    property PresetTextEffect: MsoPresetTextEffect dispid 108;
    property RotatedChars: MsoTriState dispid 109;
    property Text: WideString dispid 110;
    property Tracking: Single dispid 111;
    property Application_: IDispatch readonly dispid 1610743808;
    property Creator: Integer readonly dispid 1610743809;
  end;

// *********************************************************************//
// DispIntf:  ThreeDFormatDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0321-0000-0000-C000-000000000046}
// *********************************************************************//
  ThreeDFormatDisp = dispinterface
    ['{000C0321-0000-0000-C000-000000000046}']
    property Parent: IDispatch readonly dispid 1;
    procedure IncrementRotationX(Increment: Single); dispid 10;
    procedure IncrementRotationY(Increment: Single); dispid 11;
    procedure ResetRotation; dispid 12;
    procedure SetThreeDFormat(PresetThreeDFormat: MsoPresetThreeDFormat); dispid 13;
    procedure SetExtrusionDirection(PresetExtrusionDirection: MsoPresetExtrusionDirection); dispid 14;
    property Depth: Single dispid 100;
    property ExtrusionColor: ColorFormat readonly dispid 101;
    property ExtrusionColorType: MsoExtrusionColorType dispid 102;
    property Perspective: MsoTriState dispid 103;
    property PresetExtrusionDirection: MsoPresetExtrusionDirection readonly dispid 104;
    property PresetLightingDirection: MsoPresetLightingDirection dispid 105;
    property PresetLightingSoftness: MsoPresetLightingSoftness dispid 106;
    property PresetMaterial: MsoPresetMaterial dispid 107;
    property PresetThreeDFormat: MsoPresetThreeDFormat readonly dispid 108;
    property RotationX: Single dispid 109;
    property RotationY: Single dispid 110;
    property Visible: MsoTriState dispid 111;
    property Application_: IDispatch readonly dispid 1610743808;
    property Creator: Integer readonly dispid 1610743809;
  end;

// *********************************************************************//
// DispIntf:  FillFormatDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0314-0000-0000-C000-000000000046}
// *********************************************************************//
  FillFormatDisp = dispinterface
    ['{000C0314-0000-0000-C000-000000000046}']
    property Parent: IDispatch readonly dispid 1;
    procedure Background; dispid 10;
    procedure OneColorGradient(Style: MsoGradientStyle; Variant: SYSINT; Degree: Single); dispid 11;
    procedure Patterned(Pattern: MsoPatternType); dispid 12;
    procedure PresetGradient(Style: MsoGradientStyle; Variant: SYSINT; 
                             PresetGradientType: MsoPresetGradientType); dispid 13;
    procedure PresetTextured(PresetTexture: MsoPresetTexture); dispid 14;
    procedure Solid; dispid 15;
    procedure TwoColorGradient(Style: MsoGradientStyle; Variant: SYSINT); dispid 16;
    procedure UserPicture(const PictureFile: WideString); dispid 17;
    procedure UserTextured(const TextureFile: WideString); dispid 18;
    property BackColor: ColorFormat dispid 100;
    property ForeColor: ColorFormat dispid 101;
    property GradientColorType: MsoGradientColorType readonly dispid 102;
    property GradientDegree: Single readonly dispid 103;
    property GradientStyle: MsoGradientStyle readonly dispid 104;
    property GradientVariant: SYSINT readonly dispid 105;
    property Pattern: MsoPatternType readonly dispid 106;
    property PresetGradientType: MsoPresetGradientType readonly dispid 107;
    property PresetTexture: MsoPresetTexture readonly dispid 108;
    property TextureName: WideString readonly dispid 109;
    property TextureType: MsoTextureType readonly dispid 110;
    property Transparency: Single dispid 111;
    property Type_: MsoFillType readonly dispid 112;
    property Visible: MsoTriState dispid 113;
    property Application_: IDispatch readonly dispid 1610743808;
    property Creator: Integer readonly dispid 1610743809;
  end;

// *********************************************************************//
// DispIntf:  _ApplicationDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000208D5-0000-0000-C000-000000000046}
// *********************************************************************//
  _ApplicationDisp = dispinterface
    ['{000208D5-0000-0000-C000-000000000046}']
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: Application_ readonly dispid 150;
    property ActiveCell: Range readonly dispid 305;
    property ActiveChart: Chart readonly dispid 183;
    property ActiveDialog: DialogSheet readonly dispid 815;
    property ActiveMenuBar: MenuBar readonly dispid 758;
    property ActivePrinter[lcid: Integer]: WideString dispid 306;
    property ActiveSheet: IDispatch readonly dispid 307;
    property ActiveWindow: Window_ readonly dispid 759;
    property ActiveWorkbook: Workbook readonly dispid 308;
    property AddIns: AddIns readonly dispid 549;
    property Assistant: Assistant readonly dispid 1438;
    procedure Calculate(lcid: Integer); dispid 279;
    property Cells: Range readonly dispid 238;
    property Charts: Sheets readonly dispid 121;
    property Columns: Range readonly dispid 241;
    property CommandBars: CommandBars readonly dispid 1439;
    property DDEAppReturnCode[lcid: Integer]: Integer readonly dispid 332;
    procedure DDEExecute(Channel: Integer; const String_: WideString; lcid: Integer); dispid 333;
    function DDEInitiate(const App: WideString; const Topic: WideString; lcid: Integer): Integer; dispid 334;
    procedure DDEPoke(Channel: Integer; Item: OleVariant; Data: OleVariant; lcid: Integer); dispid 335;
    function DDERequest(Channel: Integer; const Item: WideString; lcid: Integer): OleVariant; dispid 336;
    procedure DDETerminate(Channel: Integer; lcid: Integer); dispid 337;
    property DialogSheets: Sheets readonly dispid 764;
    function Evaluate(Name: OleVariant; lcid: Integer): OleVariant; dispid 1;
    function _Evaluate(Name: OleVariant; lcid: Integer): OleVariant; dispid -5;
    function ExecuteExcel4Macro(const String_: WideString; lcid: Integer): OleVariant; dispid 350;
    function Intersect(const Arg1: Range; const Arg2: Range; Arg3: OleVariant; Arg4: OleVariant; 
                       Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                       Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                       Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                       Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                       Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                       Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                       Arg29: OleVariant; Arg30: OleVariant; lcid: Integer): Range; dispid 766;
    property MenuBars: MenuBars readonly dispid 589;
    property Modules: Modules readonly dispid 582;
    property Names: Names readonly dispid 442;
    property Range[Cell1: OleVariant; Cell2: OleVariant]: Range readonly dispid 197;
    property Rows: Range readonly dispid 258;
    function Run(Macro: OleVariant; Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; 
                 Arg4: OleVariant; Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; 
                 Arg8: OleVariant; Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; 
                 Arg12: OleVariant; Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; 
                 Arg16: OleVariant; Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; 
                 Arg20: OleVariant; Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; 
                 Arg24: OleVariant; Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; 
                 Arg28: OleVariant; Arg29: OleVariant; Arg30: OleVariant): OleVariant; dispid 259;
    function _Run2(Macro: OleVariant; Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; 
                   Arg4: OleVariant; Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; 
                   Arg8: OleVariant; Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; 
                   Arg12: OleVariant; Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; 
                   Arg16: OleVariant; Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; 
                   Arg20: OleVariant; Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; 
                   Arg24: OleVariant; Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; 
                   Arg28: OleVariant; Arg29: OleVariant; Arg30: OleVariant; lcid: Integer): OleVariant; dispid 806;
    property Selection[lcid: Integer]: IDispatch readonly dispid 147;
    procedure SendKeys(Keys: OleVariant; Wait: OleVariant; lcid: Integer); dispid 383;
    property Sheets: Sheets readonly dispid 485;
    property ShortcutMenus[Index: Integer]: Menu readonly dispid 776;
    property ThisWorkbook[lcid: Integer]: Workbook readonly dispid 778;
    property Toolbars: Toolbars readonly dispid 552;
    function Union(const Arg1: Range; const Arg2: Range; Arg3: OleVariant; Arg4: OleVariant; 
                   Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                   Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                   Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                   Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                   Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                   Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                   Arg29: OleVariant; Arg30: OleVariant; lcid: Integer): Range; dispid 779;
    property Windows: DIWindows readonly dispid 430;
    property Workbooks: Workbooks readonly dispid 572;
    property WorksheetFunction: WorksheetFunction readonly dispid 1440;
    property Worksheets: Sheets readonly dispid 494;
    property Excel4IntlMacroSheets: Sheets readonly dispid 581;
    property Excel4MacroSheets: Sheets readonly dispid 579;
    procedure ActivateMicrosoftApp(Index: XlMSApplication; lcid: Integer); dispid 1095;
    procedure AddChartAutoFormat(Chart: OleVariant; const Name: WideString;
                                 Description: OleVariant; lcid: Integer); dispid 216;
    procedure AddCustomList(ListArray: OleVariant; ByRow: OleVariant; lcid: Integer); dispid 780;
    property AlertBeforeOverwriting[lcid: Integer]: WordBool dispid 930;
    property AltStartupPath[lcid: Integer]: WideString dispid 313;
    property AskToUpdateLinks[lcid: Integer]: WordBool dispid 992;
    property EnableAnimations[lcid: Integer]: WordBool dispid 1180;
    property AutoCorrect: AutoCorrect readonly dispid 1145;
    property Build[lcid: Integer]: Integer readonly dispid 314;
    property CalculateBeforeSave[lcid: Integer]: WordBool dispid 315;
    property Calculation[lcid: Integer]: XlCalculation dispid 316;
    property Caller[Index: OleVariant; lcid: Integer]: OleVariant readonly dispid 317;
    property CanPlaySounds[lcid: Integer]: WordBool readonly dispid 318;
    property CanRecordSounds[lcid: Integer]: WordBool readonly dispid 319;
    property Caption: WideString dispid 139;
    property CellDragAndDrop[lcid: Integer]: WordBool dispid 320;
    function CentimetersToPoints(Centimeters: Double; lcid: Integer): Double; dispid 1086;
    function CheckSpelling(const Word: WideString; CustomDictionary: OleVariant; 
                           IgnoreUppercase: OleVariant; lcid: Integer): WordBool; dispid 505;
    property ClipboardFormats[Index: OleVariant; lcid: Integer]: OleVariant readonly dispid 321;
    property DisplayClipboardWindow[lcid: Integer]: WordBool dispid 322;
    property ColorButtons: WordBool dispid 365;
    property CommandUnderlines[lcid: Integer]: XlCommandUnderlines dispid 323;
    property ConstrainNumeric[lcid: Integer]: WordBool dispid 324;
    function ConvertFormula(Formula: OleVariant; FromReferenceStyle: XlReferenceStyle; 
                            ToReferenceStyle: OleVariant; ToAbsolute: OleVariant; 
                            RelativeTo: OleVariant; lcid: Integer): OleVariant; dispid 325;
    property CopyObjectsWithCells[lcid: Integer]: WordBool dispid 991;
    property Cursor[lcid: Integer]: XlMousePointer dispid 1161;
    property CustomListCount[lcid: Integer]: Integer readonly dispid 787;
    property CutCopyMode[lcid: Integer]: XlCutCopyMode dispid 330;
    property DataEntryMode[lcid: Integer]: Integer dispid 331;
    procedure Dummy1; dispid 1767;
    procedure Dummy2; dispid 1768;
    procedure Dummy3; dispid 1769;
    procedure Dummy4; dispid 1770;
    procedure Dummy5; dispid 1771;
    procedure Dummy6; dispid 1772;
    procedure Dummy7; dispid 1773;
    procedure Dummy8; dispid 1774;
    procedure Dummy9; dispid 1775;
    procedure Dummy10; dispid 1776;
    procedure Dummy11; dispid 1777;
    property _Default: WideString readonly dispid 0;
    property DefaultFilePath[lcid: Integer]: WideString dispid 1038;
    procedure DeleteChartAutoFormat(const Name: WideString; lcid: Integer); dispid 217;
    procedure DeleteCustomList(ListNum: Integer; lcid: Integer); dispid 783;
    property Dialogs: Dialogs readonly dispid 761;
    property DisplayAlerts[lcid: Integer]: WordBool dispid 343;
    property DisplayFormulaBar[lcid: Integer]: WordBool dispid 344;
    property DisplayFullScreen[lcid: Integer]: WordBool dispid 1061;
    property DisplayNoteIndicator: WordBool dispid 345;
    property DisplayCommentIndicator: XlCommentDisplayMode dispid 1196;
    property DisplayExcel4Menus[lcid: Integer]: WordBool dispid 927;
    property DisplayRecentFiles: WordBool dispid 926;
    property DisplayScrollBars[lcid: Integer]: WordBool dispid 346;
    property DisplayStatusBar[lcid: Integer]: WordBool dispid 347;
    procedure DoubleClick(lcid: Integer); dispid 349;
    property EditDirectlyInCell[lcid: Integer]: WordBool dispid 929;
    property EnableAutoComplete: WordBool dispid 1179;
    property EnableCancelKey[lcid: Integer]: XlEnableCancelKey dispid 1096;
    property EnableSound: WordBool dispid 1197;
    property EnableTipWizard[lcid: Integer]: WordBool dispid 1064;
    property FileConverters[Index1: OleVariant; Index2: OleVariant; lcid: Integer]: OleVariant readonly dispid 931;
    property FileSearch: FileSearch readonly dispid 1200;
    property FileFind: IFind readonly dispid 1201;
    procedure FindFile(lcid: Integer); dispid 1068;
    property FixedDecimal[lcid: Integer]: WordBool dispid 351;
    property FixedDecimalPlaces[lcid: Integer]: Integer dispid 352;
    function GetCustomListContents(ListNum: Integer; lcid: Integer): OleVariant; dispid 786;
    function GetCustomListNum(ListArray: OleVariant; lcid: Integer): Integer; dispid 785;
    function GetOpenFilename(FileFilter: OleVariant; FilterIndex: OleVariant; Title: OleVariant; 
                             ButtonText: OleVariant; MultiSelect: OleVariant; lcid: Integer): OleVariant; dispid 1075;
    function GetSaveAsFilename(InitialFilename: OleVariant; FileFilter: OleVariant; 
                               FilterIndex: OleVariant; Title: OleVariant; ButtonText: OleVariant; 
                               lcid: Integer): OleVariant; dispid 1076;
    procedure Goto_(Reference: OleVariant; Scroll: OleVariant; lcid: Integer); dispid 475;
    property Height[lcid: Integer]: Double dispid 123;
    procedure Help(HelpFile: OleVariant; HelpContextID: OleVariant; lcid: Integer); dispid 354;
    property IgnoreRemoteRequests[lcid: Integer]: WordBool dispid 356;
    function InchesToPoints(Inches: Double; lcid: Integer): Double; dispid 1087;
    function InputBox(const Prompt: WideString; Title: OleVariant; Default: OleVariant; 
                      Left: OleVariant; Top: OleVariant; HelpFile: OleVariant; 
                      HelpContextID: OleVariant; Type_: OleVariant; lcid: Integer): OleVariant; dispid 357;
    property Interactive[lcid: Integer]: WordBool dispid 361;
    property International[Index: OleVariant; lcid: Integer]: OleVariant readonly dispid 362;
    property Iteration[lcid: Integer]: WordBool dispid 363;
    property LargeButtons: WordBool dispid 364;
    property Left[lcid: Integer]: Double dispid 127;
    property LibraryPath[lcid: Integer]: WideString readonly dispid 366;
    procedure MacroOptions(Macro: OleVariant; Description: OleVariant; HasMenu: OleVariant; 
                           MenuText: OleVariant; HasShortcutKey: OleVariant; 
                           ShortcutKey: OleVariant; Category: OleVariant; StatusBar: OleVariant; 
                           HelpContextID: OleVariant; HelpFile: OleVariant; lcid: Integer); dispid 1135;
    procedure MailLogoff(lcid: Integer); dispid 945;
    procedure MailLogon(Name: OleVariant; Password: OleVariant; DownloadNewMail: OleVariant; 
                        lcid: Integer); dispid 943;
    property MailSession[lcid: Integer]: OleVariant readonly dispid 942;
    property MailSystem[lcid: Integer]: XlMailSystem readonly dispid 971;
    property MathCoprocessorAvailable[lcid: Integer]: WordBool readonly dispid 367;
    property MaxChange[lcid: Integer]: Double dispid 368;
    property MaxIterations[lcid: Integer]: Integer dispid 369;
    property MemoryFree[lcid: Integer]: Integer readonly dispid 370;
    property MemoryTotal[lcid: Integer]: Integer readonly dispid 371;
    property MemoryUsed[lcid: Integer]: Integer readonly dispid 372;
    property MouseAvailable[lcid: Integer]: WordBool readonly dispid 373;
    property MoveAfterReturn[lcid: Integer]: WordBool dispid 374;
    property MoveAfterReturnDirection[lcid: Integer]: XlDirection dispid 1144;
    property RecentFiles: RecentFiles readonly dispid 1202;
    property Name: WideString readonly dispid 110;
    function NextLetter(lcid: Integer): Workbook; dispid 972;
    property NetworkTemplatesPath[lcid: Integer]: WideString readonly dispid 388;
    property ODBCErrors: ODBCErrors readonly dispid 1203;
    property ODBCTimeout: Integer dispid 1204;
    property OnCalculate[lcid: Integer]: WideString dispid 625;
    property OnData[lcid: Integer]: WideString dispid 629;
    property OnDoubleClick[lcid: Integer]: WideString dispid 628;
    property OnEntry[lcid: Integer]: WideString dispid 627;
    procedure OnKey(const Key: WideString; Procedure_: OleVariant; lcid: Integer); dispid 626;
    procedure OnRepeat(const Text: WideString; const Procedure_: WideString; lcid: Integer); dispid 769;
    property OnSheetActivate[lcid: Integer]: WideString dispid 1031;
    property OnSheetDeactivate[lcid: Integer]: WideString dispid 1081;
    procedure OnTime(EarliestTime: OleVariant; const Procedure_: WideString; 
                     LatestTime: OleVariant; Schedule: OleVariant; lcid: Integer); dispid 624;
    procedure OnUndo(const Text: WideString; const Procedure_: WideString; lcid: Integer); dispid 770;
    property OnWindow[lcid: Integer]: WideString dispid 623;
    property OperatingSystem[lcid: Integer]: WideString readonly dispid 375;
    property OrganizationName[lcid: Integer]: WideString readonly dispid 376;
    property Path[lcid: Integer]: WideString readonly dispid 291;
    property PathSeparator[lcid: Integer]: WideString readonly dispid 377;
    property PreviousSelections[Index: OleVariant; lcid: Integer]: OleVariant readonly dispid 378;
    property PivotTableSelection: WordBool dispid 1205;
    property PromptForSummaryInfo[lcid: Integer]: WordBool dispid 1062;
    procedure Quit; dispid 302;
    procedure RecordMacro(BasicCode: OleVariant; XlmCode: OleVariant; lcid: Integer); dispid 773;
    property RecordRelative[lcid: Integer]: WordBool readonly dispid 379;
    property ReferenceStyle[lcid: Integer]: XlReferenceStyle dispid 380;
    property RegisteredFunctions[Index1: OleVariant; Index2: OleVariant; lcid: Integer]: OleVariant readonly dispid 775;
    function RegisterXLL(const Filename: WideString; lcid: Integer): WordBool; dispid 30;
    procedure Repeat_(lcid: Integer); dispid 301;
    procedure ResetTipWizard(lcid: Integer); dispid 928;
    property RollZoom: WordBool dispid 1206;
    procedure Save(Filename: OleVariant; lcid: Integer); dispid 283;
    procedure SaveWorkspace(Filename: OleVariant; lcid: Integer); dispid 212;
    property ScreenUpdating[lcid: Integer]: WordBool dispid 382;
    procedure SetDefaultChart(FormatName: OleVariant; Gallery: OleVariant); dispid 219;
    property SheetsInNewWorkbook[lcid: Integer]: Integer dispid 993;
    property ShowChartTipNames: WordBool dispid 1207;
    property ShowChartTipValues: WordBool dispid 1208;
    property StandardFont[lcid: Integer]: WideString dispid 924;
    property StandardFontSize[lcid: Integer]: Double dispid 925;
    property StartupPath[lcid: Integer]: WideString readonly dispid 385;
    property StatusBar[lcid: Integer]: OleVariant dispid 386;
    property TemplatesPath[lcid: Integer]: WideString readonly dispid 381;
    property ShowToolTips: WordBool dispid 387;
    property Top[lcid: Integer]: Double dispid 126;
    property DefaultSaveFormat: XlFileFormat dispid 1209;
    property TransitionMenuKey[lcid: Integer]: WideString dispid 310;
    property TransitionMenuKeyAction[lcid: Integer]: Integer dispid 311;
    property TransitionNavigKeys[lcid: Integer]: WordBool dispid 312;
    procedure Undo(lcid: Integer); dispid 303;
    property UsableHeight[lcid: Integer]: Double readonly dispid 389;
    property UsableWidth[lcid: Integer]: Double readonly dispid 390;
    property UserControl: WordBool dispid 1210;
    property UserName[lcid: Integer]: WideString dispid 391;
    property Value: WideString readonly dispid 6;
    property VBE: VBE readonly dispid 1211;
    property Version[lcid: Integer]: WideString readonly dispid 392;
    property Visible[lcid: Integer]: WordBool dispid 558;
    procedure Volatile(Volatile: OleVariant; lcid: Integer); dispid 788;
    procedure Wait(Time: OleVariant; lcid: Integer); dispid 393;
    property Width[lcid: Integer]: Double dispid 122;
    property WindowsForPens[lcid: Integer]: WordBool readonly dispid 395;
    property WindowState[lcid: Integer]: XlWindowState dispid 396;
    property UILanguage[lcid: Integer]: Integer dispid 2;
    property DefaultSheetDirection[lcid: Integer]: Integer dispid 229;
    property CursorMovement[lcid: Integer]: Integer dispid 232;
    property ControlCharacters[lcid: Integer]: Integer dispid 233;
    function _WSFunction(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                         Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                         Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                         Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; 
                         Arg16: OleVariant; Arg17: OleVariant; Arg18: OleVariant; 
                         Arg19: OleVariant; Arg20: OleVariant; Arg21: OleVariant; 
                         Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant;
                         Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant;
                         Arg28: OleVariant; Arg29: OleVariant; Arg30: OleVariant; lcid: Integer): OleVariant; dispid 169;
    property EnableEvents: WordBool dispid 1212;
    property DisplayInfoWindow: WordBool dispid 1213;
  end;

// *********************************************************************//
// DispIntf:  _ChartDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000208D6-0000-0000-C000-000000000046}
// *********************************************************************//
  _ChartDisp = dispinterface
    ['{000208D6-0000-0000-C000-000000000046}']
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Activate(lcid: Integer); dispid 304;
    procedure Copy(Before: OleVariant; After: OleVariant; lcid: Integer); dispid 551;
    procedure Delete(lcid: Integer); dispid 117;
    property CodeName: WideString readonly dispid 1373;
    property _CodeName: WideString dispid -2147418112;
    property Index[lcid: Integer]: Integer readonly dispid 486;
    procedure Move(Before: OleVariant; After: OleVariant; lcid: Integer); dispid 637;
    property Name: WideString dispid 110;
    property Next: IDispatch readonly dispid 502;
    property OnDoubleClick[lcid: Integer]: WideString dispid 628;
    property OnSheetActivate[lcid: Integer]: WideString dispid 1031;
    property OnSheetDeactivate[lcid: Integer]: WideString dispid 1081;
    property PageSetup: PageSetup readonly dispid 998;
    property Previous: IDispatch readonly dispid 503;
    procedure PrintOut(From: OleVariant; To_: OleVariant; Copies: OleVariant; Preview: OleVariant; 
                       ActivePrinter: OleVariant; PrintToFile: OleVariant; Collate: OleVariant; 
                       lcid: Integer); dispid 905;
    procedure PrintPreview(EnableChanges: OleVariant; lcid: Integer); dispid 281;
    procedure Protect(Password: OleVariant; DrawingObjects: OleVariant; Contents: OleVariant; 
                      Scenarios: OleVariant; UserInterfaceOnly: OleVariant; lcid: Integer); dispid 282;
    property ProtectContents[lcid: Integer]: WordBool readonly dispid 292;
    property ProtectDrawingObjects[lcid: Integer]: WordBool readonly dispid 293;
    property ProtectionMode[lcid: Integer]: WordBool readonly dispid 1159;
    procedure _Dummy23; dispid 65559;
    procedure SaveAs(const Filename: WideString; FileFormat: OleVariant; Password: OleVariant; 
                     WriteResPassword: OleVariant; ReadOnlyRecommended: OleVariant; 
                     CreateBackup: OleVariant; AddToMru: OleVariant; TextCodepage: OleVariant; 
                     TextVisualLayout: OleVariant; lcid: Integer); dispid 284;
    procedure Select(Replace: OleVariant; lcid: Integer); dispid 235;
    procedure Unprotect(Password: OleVariant; lcid: Integer); dispid 285;
    property Visible[lcid: Integer]: XlSheetVisibility dispid 558;
    property Shapes: Shapes readonly dispid 1377;
    procedure ApplyDataLabels(Type_: XlDataLabelsType; LegendKey: OleVariant; AutoText: OleVariant; 
                              HasLeaderLines: OleVariant; lcid: Integer); dispid 151;
    function Arcs(Index: OleVariant; lcid: Integer): IDispatch; dispid 760;
    property Area3DGroup[lcid: Integer]: ChartGroup readonly dispid 17;
    function AreaGroups(Index: OleVariant; lcid: Integer): IDispatch; dispid 9;
    procedure AutoFormat(Gallery: Integer; Format: OleVariant); dispid 114;
    property AutoScaling[lcid: Integer]: WordBool dispid 107;
    function Axes(Type_: OleVariant; AxisGroup: XlAxisGroup; lcid: Integer): IDispatch; dispid 23;
    procedure SetBackgroundPicture(const Filename: WideString); dispid 1188;
    property Bar3DGroup[lcid: Integer]: ChartGroup readonly dispid 18;
    function BarGroups(Index: OleVariant; lcid: Integer): IDispatch; dispid 10;
    function Buttons(Index: OleVariant; lcid: Integer): IDispatch; dispid 557;
    property ChartArea[lcid: Integer]: ChartArea readonly dispid 80;
    function ChartGroups(Index: OleVariant; lcid: Integer): IDispatch; dispid 8;
    function ChartObjects(Index: OleVariant; lcid: Integer): IDispatch; dispid 1060;
    property ChartTitle[lcid: Integer]: ChartTitle readonly dispid 81;
    procedure ChartWizard(Source: OleVariant; Gallery: OleVariant; Format: OleVariant; 
                          PlotBy: OleVariant; CategoryLabels: OleVariant; SeriesLabels: OleVariant; 
                          HasLegend: OleVariant; Title: OleVariant; CategoryTitle: OleVariant; 
                          ValueTitle: OleVariant; ExtraTitle: OleVariant; lcid: Integer); dispid 196;
    function CheckBoxes(Index: OleVariant; lcid: Integer): IDispatch; dispid 824;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant; lcid: Integer); dispid 505;
    property Column3DGroup[lcid: Integer]: ChartGroup readonly dispid 19;
    function ColumnGroups(Index: OleVariant; lcid: Integer): IDispatch; dispid 11;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat; 
                          Size: XlPictureAppearance; lcid: Integer); dispid 213;
    property Corners[lcid: Integer]: Corners readonly dispid 79;
    procedure CreatePublisher(Edition: OleVariant; Appearance: XlPictureAppearance; 
                              Size: XlPictureAppearance; ContainsPICT: OleVariant; 
                              ContainsBIFF: OleVariant; ContainsRTF: OleVariant; 
                              ContainsVALU: OleVariant; lcid: Integer); dispid 458;
    property DataTable: DataTable readonly dispid 1395;
    property DepthPercent[lcid: Integer]: Integer dispid 48;
    procedure Deselect(lcid: Integer); dispid 1120;
    property DisplayBlanksAs[lcid: Integer]: XlDisplayBlanksAs dispid 93;
    function DoughnutGroups(Index: OleVariant; lcid: Integer): IDispatch; dispid 14;
    function Drawings(Index: OleVariant; lcid: Integer): IDispatch; dispid 772;
    function DrawingObjects(Index: OleVariant; lcid: Integer): IDispatch; dispid 88;
    function DropDowns(Index: OleVariant; lcid: Integer): IDispatch; dispid 836;
    property Elevation[lcid: Integer]: Integer dispid 49;
    function Evaluate(Name: OleVariant; lcid: Integer): OleVariant; dispid 1;
    function _Evaluate(Name: OleVariant; lcid: Integer): OleVariant; dispid -5;
    property Floor[lcid: Integer]: Floor readonly dispid 83;
    property GapDepth[lcid: Integer]: Integer dispid 50;
    function GroupBoxes(Index: OleVariant; lcid: Integer): IDispatch; dispid 834;
    function GroupObjects(Index: OleVariant; lcid: Integer): IDispatch; dispid 1113;
    property HasAxis[Index1: OleVariant; Index2: OleVariant; lcid: Integer]: OleVariant dispid 52;
    property HasDataTable: WordBool dispid 1396;
    property HasLegend[lcid: Integer]: WordBool dispid 53;
    property HasTitle[lcid: Integer]: WordBool dispid 54;
    property HeightPercent[lcid: Integer]: Integer dispid 55;
    property Hyperlinks: Hyperlinks readonly dispid 1393;
    function Labels(Index: OleVariant; lcid: Integer): IDispatch; dispid 841;
    property Legend[lcid: Integer]: Legend readonly dispid 84;
    property Line3DGroup[lcid: Integer]: ChartGroup readonly dispid 20;
    function LineGroups(Index: OleVariant; lcid: Integer): IDispatch; dispid 12;
    function Lines(Index: OleVariant; lcid: Integer): IDispatch; dispid 767;
    function ListBoxes(Index: OleVariant; lcid: Integer): IDispatch; dispid 832;
    function Location(Where: XlChartLocation; Name: OleVariant): Chart; dispid 1397;
    function OLEObjects(Index: OleVariant; lcid: Integer): IDispatch; dispid 799;
    function OptionButtons(Index: OleVariant; lcid: Integer): IDispatch; dispid 826;
    function Ovals(Index: OleVariant; lcid: Integer): IDispatch; dispid 801;
    procedure Paste(Type_: OleVariant; lcid: Integer); dispid 211;
    property Perspective[lcid: Integer]: Integer dispid 57;
    function Pictures(Index: OleVariant; lcid: Integer): IDispatch; dispid 771;
    property Pie3DGroup[lcid: Integer]: ChartGroup readonly dispid 21;
    function PieGroups(Index: OleVariant; lcid: Integer): IDispatch; dispid 13;
    property PlotArea[lcid: Integer]: PlotArea readonly dispid 85;
    property PlotVisibleOnly[lcid: Integer]: WordBool dispid 92;
    function RadarGroups(Index: OleVariant; lcid: Integer): IDispatch; dispid 15;
    function Rectangles(Index: OleVariant; lcid: Integer): IDispatch; dispid 774;
    property RightAngleAxes[lcid: Integer]: OleVariant dispid 58;
    property Rotation[lcid: Integer]: OleVariant dispid 59;
    function ScrollBars(Index: OleVariant; lcid: Integer): IDispatch; dispid 830;
    function SeriesCollection(Index: OleVariant; lcid: Integer): IDispatch; dispid 68;
    property SizeWithWindow[lcid: Integer]: WordBool dispid 94;
    property ShowWindow: WordBool dispid 1399;
    function Spinners(Index: OleVariant; lcid: Integer): IDispatch; dispid 838;
    property SubType[lcid: Integer]: Integer dispid 109;
    property SurfaceGroup[lcid: Integer]: ChartGroup readonly dispid 22;
    function TextBoxes(Index: OleVariant; lcid: Integer): IDispatch; dispid 777;
    property Type_[lcid: Integer]: Integer dispid 108;
    property ChartType: XlChartType dispid 1400;
    procedure ApplyCustomType(ChartType: XlChartType; TypeName: OleVariant); dispid 1401;
    property Walls[lcid: Integer]: Walls readonly dispid 86;
    property WallsAndGridlines2D[lcid: Integer]: WordBool dispid 210;
    function XYGroups(Index: OleVariant; lcid: Integer): IDispatch; dispid 16;
    property BarShape: XlBarShape dispid 1403;
    property PlotBy: XlRowCol dispid 202;
    procedure CopyChartBuild; dispid 1404;
    property ProtectFormatting: WordBool dispid 1405;
    property ProtectData: WordBool dispid 1406;
    property ProtectGoalSeek: WordBool dispid 1407;
    property ProtectSelection: WordBool dispid 1408;
    procedure GetChartElement(X: Integer; Y: Integer; var ElementID: Integer; var Arg1: Integer;
                              var Arg2: Integer); dispid 1409;
    procedure SetSourceData(const Source: Range; PlotBy: OleVariant); dispid 1413;
    function Export(const Filename: WideString; FilterName: OleVariant; Interactive: OleVariant): WordBool; dispid 1414;
    procedure Refresh; dispid 1417;
  end;

// *********************************************************************//
// DispIntf:  SheetsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000208D7-0000-0000-C000-000000000046}
// *********************************************************************//
  SheetsDisp = dispinterface
    ['{000208D7-0000-0000-C000-000000000046}']
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(Before: OleVariant; After: OleVariant; Count: OleVariant; Type_: OleVariant; 
                 lcid: Integer): IDispatch; dispid 181;
    procedure Copy(Before: OleVariant; After: OleVariant; lcid: Integer); dispid 551;
    property Count: Integer readonly dispid 118;
    procedure Delete(lcid: Integer); dispid 117;
    procedure FillAcrossSheets(const Range: Range; Type_: XlFillWith; lcid: Integer); dispid 469;
    property Item[Index: OleVariant]: IDispatch readonly dispid 170;
    procedure Move(Before: OleVariant; After: OleVariant; lcid: Integer); dispid 637;
    property _NewEnum: IUnknown readonly dispid -4;
    procedure PrintOut(From: OleVariant; To_: OleVariant; Copies: OleVariant; Preview: OleVariant; 
                       ActivePrinter: OleVariant; PrintToFile: OleVariant; Collate: OleVariant; 
                       lcid: Integer); dispid 905;
    procedure PrintPreview(EnableChanges: OleVariant; lcid: Integer); dispid 281;
    procedure Select(Replace: OleVariant; lcid: Integer); dispid 235;
    property HPageBreaks: HPageBreaks readonly dispid 1418;
    property VPageBreaks: VPageBreaks readonly dispid 1419;
    property Visible[lcid: Integer]: OleVariant dispid 558;
    property _Default[Index: OleVariant]: IDispatch readonly dispid 0; default;
  end;

// *********************************************************************//
// DispIntf:  _WorksheetDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000208D8-0000-0000-C000-000000000046}
// *********************************************************************//
  _WorksheetDisp = dispinterface
    ['{000208D8-0000-0000-C000-000000000046}']
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Activate(lcid: Integer); dispid 304;
    procedure Copy(Before: OleVariant; After: OleVariant; lcid: Integer); dispid 551;
    procedure Delete(lcid: Integer); dispid 117;
    property CodeName: WideString readonly dispid 1373;
    property _CodeName: WideString dispid -2147418112;
    property Index[lcid: Integer]: Integer readonly dispid 486;
    procedure Move(Before: OleVariant; After: OleVariant; lcid: Integer); dispid 637;
    property Name: WideString dispid 110;
    property Next: IDispatch readonly dispid 502;
    property OnDoubleClick[lcid: Integer]: WideString dispid 628;
    property OnSheetActivate[lcid: Integer]: WideString dispid 1031;
    property OnSheetDeactivate[lcid: Integer]: WideString dispid 1081;
    property PageSetup: PageSetup readonly dispid 998;
    property Previous: IDispatch readonly dispid 503;
    procedure PrintOut(From: OleVariant; To_: OleVariant; Copies: OleVariant; Preview: OleVariant; 
                       ActivePrinter: OleVariant; PrintToFile: OleVariant; Collate: OleVariant; 
                       lcid: Integer); dispid 905;
    procedure PrintPreview(EnableChanges: OleVariant; lcid: Integer); dispid 281;
    procedure Protect(Password: OleVariant; DrawingObjects: OleVariant; Contents: OleVariant; 
                      Scenarios: OleVariant; UserInterfaceOnly: OleVariant; lcid: Integer); dispid 282;
    property ProtectContents[lcid: Integer]: WordBool readonly dispid 292;
    property ProtectDrawingObjects[lcid: Integer]: WordBool readonly dispid 293;
    property ProtectionMode[lcid: Integer]: WordBool readonly dispid 1159;
    property ProtectScenarios[lcid: Integer]: WordBool readonly dispid 294;
    procedure SaveAs(const Filename: WideString; FileFormat: OleVariant; Password: OleVariant; 
                     WriteResPassword: OleVariant; ReadOnlyRecommended: OleVariant; 
                     CreateBackup: OleVariant; AddToMru: OleVariant; TextCodepage: OleVariant; 
                     TextVisualLayout: OleVariant; lcid: Integer); dispid 284;
    procedure Select(Replace: OleVariant; lcid: Integer); dispid 235;
    procedure Unprotect(Password: OleVariant; lcid: Integer); dispid 285;
    property Visible[lcid: Integer]: XlSheetVisibility dispid 558;
    property Shapes: Shapes readonly dispid 1377;
    property TransitionExpEval[lcid: Integer]: WordBool dispid 401;
    function Arcs(Index: OleVariant; lcid: Integer): IDispatch; dispid 760;
    property AutoFilterMode[lcid: Integer]: WordBool dispid 792;
    procedure SetBackgroundPicture(const Filename: WideString); dispid 1188;
    function Buttons(Index: OleVariant; lcid: Integer): IDispatch; dispid 557;
    procedure Calculate(lcid: Integer); dispid 279;
    property EnableCalculation: WordBool dispid 1424;
    property Cells: Range readonly dispid 238;
    function ChartObjects(Index: OleVariant; lcid: Integer): IDispatch; dispid 1060;
    function CheckBoxes(Index: OleVariant; lcid: Integer): IDispatch; dispid 824;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant; lcid: Integer); dispid 505;
    property CircularReference[lcid: Integer]: Range readonly dispid 1069;
    procedure ClearArrows(lcid: Integer); dispid 970;
    property Columns: Range readonly dispid 241;
    property ConsolidationFunction[lcid: Integer]: XlConsolidationFunction readonly dispid 789;
    property ConsolidationOptions[lcid: Integer]: OleVariant readonly dispid 790;
    property ConsolidationSources[lcid: Integer]: OleVariant readonly dispid 791;
    property DisplayAutomaticPageBreaks[lcid: Integer]: WordBool dispid 643;
    function Drawings(Index: OleVariant; lcid: Integer): IDispatch; dispid 772;
    function DrawingObjects(Index: OleVariant; lcid: Integer): IDispatch; dispid 88;
    function DropDowns(Index: OleVariant; lcid: Integer): IDispatch; dispid 836;
    property EnableAutoFilter[lcid: Integer]: WordBool dispid 1156;
    property EnableSelection: XlEnableSelection dispid 1425;
    property EnableOutlining[lcid: Integer]: WordBool dispid 1157;
    property EnablePivotTable[lcid: Integer]: WordBool dispid 1158;
    function Evaluate(Name: OleVariant; lcid: Integer): OleVariant; dispid 1;
    function _Evaluate(Name: OleVariant; lcid: Integer): OleVariant; dispid -5;
    property FilterMode[lcid: Integer]: WordBool readonly dispid 800;
    procedure ResetAllPageBreaks; dispid 1426;
    function GroupBoxes(Index: OleVariant; lcid: Integer): IDispatch; dispid 834;
    function GroupObjects(Index: OleVariant; lcid: Integer): IDispatch; dispid 1113;
    function Labels(Index: OleVariant; lcid: Integer): IDispatch; dispid 841;
    function Lines(Index: OleVariant; lcid: Integer): IDispatch; dispid 767;
    function ListBoxes(Index: OleVariant; lcid: Integer): IDispatch; dispid 832;
    property Names: Names readonly dispid 442;
    function OLEObjects(Index: OleVariant; lcid: Integer): IDispatch; dispid 799;
    property OnCalculate[lcid: Integer]: WideString dispid 625;
    property OnData[lcid: Integer]: WideString dispid 629;
    property OnEntry[lcid: Integer]: WideString dispid 627;
    function OptionButtons(Index: OleVariant; lcid: Integer): IDispatch; dispid 826;
    property Outline: Outline readonly dispid 102;
    function Ovals(Index: OleVariant; lcid: Integer): IDispatch; dispid 801;
    procedure Paste(Destination: OleVariant; Link: OleVariant; lcid: Integer); dispid 211;
    procedure PasteSpecial(Format: OleVariant; Link: OleVariant; DisplayAsIcon: OleVariant; 
                           IconFileName: OleVariant; IconIndex: OleVariant; IconLabel: OleVariant; 
                           lcid: Integer); dispid 1027;
    function Pictures(Index: OleVariant; lcid: Integer): IDispatch; dispid 771;
    function PivotTables(Index: OleVariant; lcid: Integer): IDispatch; dispid 690;
    function PivotTableWizard(SourceType: OleVariant; SourceData: OleVariant; 
                              TableDestination: OleVariant; TableName: OleVariant; 
                              RowGrand: OleVariant; ColumnGrand: OleVariant; SaveData: OleVariant; 
                              HasAutoFormat: OleVariant; AutoPage: OleVariant; 
                              Reserved: OleVariant; BackgroundQuery: OleVariant; 
                              OptimizeCache: OleVariant; PageFieldOrder: OleVariant; 
                              PageFieldWrapCount: OleVariant; ReadData: OleVariant; 
                              Connection: OleVariant; lcid: Integer): PivotTable; dispid 684;
    property Range[Cell1: OleVariant; Cell2: OleVariant]: Range readonly dispid 197;
    function Rectangles(Index: OleVariant; lcid: Integer): IDispatch; dispid 774;
    property Rows: Range readonly dispid 258;
    function Scenarios(Index: OleVariant; lcid: Integer): IDispatch; dispid 908;
    property ScrollArea: WideString dispid 1433;
    function ScrollBars(Index: OleVariant; lcid: Integer): IDispatch; dispid 830;
    procedure ShowAllData(lcid: Integer); dispid 794;
    procedure ShowDataForm(lcid: Integer); dispid 409;
    function Spinners(Index: OleVariant; lcid: Integer): IDispatch; dispid 838;
    property StandardHeight[lcid: Integer]: Double readonly dispid 407;
    property StandardWidth[lcid: Integer]: Double dispid 408;
    function TextBoxes(Index: OleVariant; lcid: Integer): IDispatch; dispid 777;
    property TransitionFormEntry[lcid: Integer]: WordBool dispid 402;
    property Type_[lcid: Integer]: XlSheetType readonly dispid 108;
    property UsedRange[lcid: Integer]: Range readonly dispid 412;
    property HPageBreaks: HPageBreaks readonly dispid 1418;
    property VPageBreaks: VPageBreaks readonly dispid 1419;
    property QueryTables: QueryTables readonly dispid 1434;
    property DisplayPageBreaks: WordBool dispid 1435;
    property Comments: Comments readonly dispid 575;
    property Hyperlinks: Hyperlinks readonly dispid 1393;
    procedure ClearCircles; dispid 1436;
    procedure CircleInvalid; dispid 1437;
    property DisplayRightToLeft[lcid: Integer]: Integer dispid 648;
    property AutoFilter: AutoFilter readonly dispid 793;
  end;

// *********************************************************************//
// DispIntf:  _GlobalDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000208D9-0000-0000-C000-000000000046}
// *********************************************************************//
  _GlobalDisp = dispinterface
    ['{000208D9-0000-0000-C000-000000000046}']
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: Application_ readonly dispid 150;
    property ActiveCell: Range readonly dispid 305;
    property ActiveChart: Chart readonly dispid 183;
    property ActiveDialog: DialogSheet readonly dispid 815;
    property ActiveMenuBar: MenuBar readonly dispid 758;
    property ActivePrinter[lcid: Integer]: WideString dispid 306;
    property ActiveSheet: IDispatch readonly dispid 307;
    property ActiveWindow: Window_ readonly dispid 759;
    property ActiveWorkbook: Workbook readonly dispid 308;
    property AddIns: AddIns readonly dispid 549;
    property Assistant: Assistant readonly dispid 1438;
    procedure Calculate(lcid: Integer); dispid 279;
    property Cells: Range readonly dispid 238;
    property Charts: Sheets readonly dispid 121;
    property Columns: Range readonly dispid 241;
    property CommandBars: CommandBars readonly dispid 1439;
    property DDEAppReturnCode[lcid: Integer]: Integer readonly dispid 332;
    procedure DDEExecute(Channel: Integer; const String_: WideString; lcid: Integer); dispid 333;
    function DDEInitiate(const App: WideString; const Topic: WideString; lcid: Integer): Integer; dispid 334;
    procedure DDEPoke(Channel: Integer; Item: OleVariant; Data: OleVariant; lcid: Integer); dispid 335;
    function DDERequest(Channel: Integer; const Item: WideString; lcid: Integer): OleVariant; dispid 336;
    procedure DDETerminate(Channel: Integer; lcid: Integer); dispid 337;
    property DialogSheets: Sheets readonly dispid 764;
    function Evaluate(Name: OleVariant; lcid: Integer): OleVariant; dispid 1;
    function _Evaluate(Name: OleVariant; lcid: Integer): OleVariant; dispid -5;
    function ExecuteExcel4Macro(const String_: WideString; lcid: Integer): OleVariant; dispid 350;
    function Intersect(const Arg1: Range; const Arg2: Range; Arg3: OleVariant; Arg4: OleVariant; 
                       Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                       Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                       Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                       Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                       Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                       Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                       Arg29: OleVariant; Arg30: OleVariant; lcid: Integer): Range; dispid 766;
    property MenuBars: MenuBars readonly dispid 589;
    property Modules: Modules readonly dispid 582;
    property Names: Names readonly dispid 442;
    property Range[Cell1: OleVariant; Cell2: OleVariant]: Range readonly dispid 197;
    property Rows: Range readonly dispid 258;
    function Run(Macro: OleVariant; Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; 
                 Arg4: OleVariant; Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; 
                 Arg8: OleVariant; Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; 
                 Arg12: OleVariant; Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; 
                 Arg16: OleVariant; Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; 
                 Arg20: OleVariant; Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; 
                 Arg24: OleVariant; Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; 
                 Arg28: OleVariant; Arg29: OleVariant; Arg30: OleVariant): OleVariant; dispid 259;
    function _Run2(Macro: OleVariant; Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; 
                   Arg4: OleVariant; Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; 
                   Arg8: OleVariant; Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; 
                   Arg12: OleVariant; Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; 
                   Arg16: OleVariant; Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; 
                   Arg20: OleVariant; Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; 
                   Arg24: OleVariant; Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; 
                   Arg28: OleVariant; Arg29: OleVariant; Arg30: OleVariant; lcid: Integer): OleVariant; dispid 806;
    property Selection[lcid: Integer]: IDispatch readonly dispid 147;
    procedure SendKeys(Keys: OleVariant; Wait: OleVariant; lcid: Integer); dispid 383;
    property Sheets: Sheets readonly dispid 485;
    property ShortcutMenus[Index: Integer]: Menu readonly dispid 776;
    property ThisWorkbook[lcid: Integer]: Workbook readonly dispid 778;
    property Toolbars: Toolbars readonly dispid 552;
    function Union(const Arg1: Range; const Arg2: Range; Arg3: OleVariant; Arg4: OleVariant; 
                   Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                   Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                   Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                   Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                   Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                   Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                   Arg29: OleVariant; Arg30: OleVariant; lcid: Integer): Range; dispid 779;
    property Windows: DIWindows readonly dispid 430;
    property Workbooks: Workbooks readonly dispid 572;
    property WorksheetFunction: WorksheetFunction readonly dispid 1440;
    property Worksheets: Sheets readonly dispid 494;
    property Excel4IntlMacroSheets: Sheets readonly dispid 581;
    property Excel4MacroSheets: Sheets readonly dispid 579;
  end;

// *********************************************************************//
// DispIntf:  _WorkbookDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000208DA-0000-0000-C000-000000000046}
// *********************************************************************//
  _WorkbookDisp = dispinterface
    ['{000208DA-0000-0000-C000-000000000046}']
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property AcceptLabelsInFormulas: WordBool dispid 1441;
    procedure Activate(lcid: Integer); dispid 304;
    property ActiveChart: Chart readonly dispid 183;
    property ActiveSheet: IDispatch readonly dispid 307;
    property Author[lcid: Integer]: WideString dispid 574;
    property AutoUpdateFrequency: Integer dispid 1442;
    property AutoUpdateSaveChanges: WordBool dispid 1443;
    property ChangeHistoryDuration: Integer dispid 1444;
    property BuiltinDocumentProperties: IDispatch readonly dispid 1176;
    procedure ChangeFileAccess(Mode: XlFileAccess; WritePassword: OleVariant; Notify: OleVariant; 
                               lcid: Integer); dispid 989;
    procedure ChangeLink(const Name: WideString; const NewName: WideString; Type_: XlLinkType; 
                         lcid: Integer); dispid 802;
    property Charts: Sheets readonly dispid 121;
    procedure Close(SaveChanges: OleVariant; Filename: OleVariant; RouteWorkbook: OleVariant; 
                    lcid: Integer); dispid 277;
    property CodeName: WideString readonly dispid 1373;
    property _CodeName: WideString dispid -2147418112;
    property Colors[Index: OleVariant; lcid: Integer]: OleVariant dispid 286;
    property CommandBars: CommandBars readonly dispid 1439;
    property Comments[lcid: Integer]: WideString dispid 575;
    property ConflictResolution: Integer dispid 1175;
    property Container: IDispatch readonly dispid 1190;
    property CreateBackup[lcid: Integer]: WordBool readonly dispid 287;
    property CustomDocumentProperties: IDispatch readonly dispid 1177;
    property Date1904[lcid: Integer]: WordBool dispid 403;
    procedure DeleteNumberFormat(const NumberFormat: WideString; lcid: Integer); dispid 397;
    property DialogSheets: Sheets readonly dispid 764;
    property DisplayDrawingObjects[lcid: Integer]: XlDisplayShapes dispid 404;
    function ExclusiveAccess(lcid: Integer): WordBool; dispid 1168;
    property FileFormat[lcid: Integer]: XlFileFormat readonly dispid 288;
    procedure ForwardMailer(lcid: Integer); dispid 973;
    property FullName[lcid: Integer]: WideString readonly dispid 289;
    property HasMailer[lcid: Integer]: WordBool dispid 976;
    property HasPassword[lcid: Integer]: WordBool readonly dispid 290;
    property HasRoutingSlip[lcid: Integer]: WordBool dispid 950;
    property IsAddin: WordBool dispid 1445;
    property Keywords[lcid: Integer]: WideString dispid 577;
    function LinkInfo(const Name: WideString; LinkInfo: XlLinkInfo; Type_: OleVariant; 
                      EditionRef: OleVariant; lcid: Integer): OleVariant; dispid 807;
    function LinkSources(Type_: OleVariant; lcid: Integer): OleVariant; dispid 808;
    property Mailer: Mailer readonly dispid 979;
    procedure MergeWorkbook(Filename: OleVariant); dispid 1446;
    property Modules: Sheets readonly dispid 582;
    property MultiUserEditing[lcid: Integer]: WordBool readonly dispid 1169;
    property Name: WideString readonly dispid 110;
    property Names: Names readonly dispid 442;
    function NewWindow(lcid: Integer): Window_; dispid 280;
    property OnSave[lcid: Integer]: WideString dispid 1178;
    property OnSheetActivate[lcid: Integer]: WideString dispid 1031;
    property OnSheetDeactivate[lcid: Integer]: WideString dispid 1081;
    procedure OpenLinks(const Name: WideString; ReadOnly: OleVariant; Type_: OleVariant; 
                        lcid: Integer); dispid 803;
    property Path[lcid: Integer]: WideString readonly dispid 291;
    property PersonalViewListSettings: WordBool dispid 1447;
    property PersonalViewPrintSettings: WordBool dispid 1448;
    function PivotCaches: PivotCaches; dispid 1449;
    procedure Post(DestName: OleVariant; lcid: Integer); dispid 1166;
    property PrecisionAsDisplayed[lcid: Integer]: WordBool dispid 405;
    procedure PrintOut(From: OleVariant; To_: OleVariant; Copies: OleVariant; Preview: OleVariant; 
                       ActivePrinter: OleVariant; PrintToFile: OleVariant; Collate: OleVariant; 
                       lcid: Integer); dispid 905;
    procedure PrintPreview(EnableChanges: OleVariant; lcid: Integer); dispid 281;
    procedure Protect(Password: OleVariant; Structure: OleVariant; Windows: OleVariant); dispid 282;
    procedure ProtectSharing(Filename: OleVariant; Password: OleVariant; 
                             WriteResPassword: OleVariant; ReadOnlyRecommended: OleVariant; 
                             CreateBackup: OleVariant; SharingPassword: OleVariant); dispid 1450;
    property ProtectStructure: WordBool readonly dispid 588;
    property ProtectWindows: WordBool readonly dispid 295;
    property ReadOnly[lcid: Integer]: WordBool readonly dispid 296;
    property ReadOnlyRecommended[lcid: Integer]: WordBool readonly dispid 297;
    procedure RefreshAll; dispid 1452;
    procedure Reply(lcid: Integer); dispid 977;
    procedure ReplyAll(lcid: Integer); dispid 978;
    procedure RemoveUser(Index: Integer); dispid 1453;
    property RevisionNumber[lcid: Integer]: Integer readonly dispid 1172;
    procedure Route(lcid: Integer); dispid 946;
    property Routed[lcid: Integer]: WordBool readonly dispid 951;
    property RoutingSlip: RoutingSlip readonly dispid 949;
    procedure RunAutoMacros(Which: XlRunAutoMacro; lcid: Integer); dispid 634;
    procedure Save(lcid: Integer); dispid 283;
    procedure SaveAs(Filename: OleVariant; FileFormat: OleVariant; Password: OleVariant; 
                     WriteResPassword: OleVariant; ReadOnlyRecommended: OleVariant; 
                     CreateBackup: OleVariant; AccessMode: XlSaveAsAccessMode; 
                     ConflictResolution: OleVariant; AddToMru: OleVariant; 
                     TextCodepage: OleVariant; TextVisualLayout: OleVariant; lcid: Integer); dispid 284;
    procedure SaveCopyAs(Filename: OleVariant; lcid: Integer); dispid 175;
    property Saved[lcid: Integer]: WordBool dispid 298;
    property SaveLinkValues[lcid: Integer]: WordBool dispid 406;
    procedure SendMail(Recipients: OleVariant; Subject: OleVariant; ReturnReceipt: OleVariant; 
                       lcid: Integer); dispid 947;
    procedure SendMailer(FileFormat: OleVariant; Priority: XlPriority; lcid: Integer); dispid 980;
    procedure SetLinkOnData(const Name: WideString; Procedure_: OleVariant; lcid: Integer); dispid 809;
    property Sheets: Sheets readonly dispid 485;
    property ShowConflictHistory[lcid: Integer]: WordBool dispid 1171;
    property Styles: Styles readonly dispid 493;
    property Subject[lcid: Integer]: WideString dispid 953;
    property Title[lcid: Integer]: WideString dispid 199;
    procedure Unprotect(Password: OleVariant; lcid: Integer); dispid 285;
    procedure UnprotectSharing(SharingPassword: OleVariant); dispid 1455;
    procedure UpdateFromFile(lcid: Integer); dispid 995;
    procedure UpdateLink(Name: OleVariant; Type_: OleVariant; lcid: Integer); dispid 804;
    property UpdateRemoteReferences[lcid: Integer]: WordBool dispid 411;
    property UserControl: WordBool dispid 1210;
    property UserStatus[lcid: Integer]: OleVariant readonly dispid 1173;
    property CustomViews: CustomViews readonly dispid 1456;
    property Windows: DIWindows readonly dispid 430;
    property Worksheets: Sheets readonly dispid 494;
    property WriteReserved[lcid: Integer]: WordBool readonly dispid 299;
    property WriteReservedBy[lcid: Integer]: WideString readonly dispid 300;
    property Excel4IntlMacroSheets: Sheets readonly dispid 581;
    property Excel4MacroSheets: Sheets readonly dispid 579;
    property TemplateRemoveExtData: WordBool dispid 1457;
    procedure HighlightChangesOptions(When: OleVariant; Who: OleVariant; Where: OleVariant); dispid 1458;
    property HighlightChangesOnScreen: WordBool dispid 1461;
    property KeepChangeHistory: WordBool dispid 1462;
    property ListChangesOnNewSheet: WordBool dispid 1463;
    procedure PurgeChangeHistoryNow(Days: Integer; SharingPassword: OleVariant); dispid 1464;
    procedure AcceptAllChanges(When: OleVariant; Who: OleVariant; Where: OleVariant); dispid 1466;
    procedure RejectAllChanges(When: OleVariant; Who: OleVariant; Where: OleVariant); dispid 1467;
    procedure PivotTableWizard(SourceType: OleVariant; SourceData: OleVariant;
                               TableDestination: OleVariant; TableName: OleVariant;
                               RowGrand: OleVariant; ColumnGrand: OleVariant; SaveData: OleVariant;
                               HasAutoFormat: OleVariant; AutoPage: OleVariant;
                               Reserved: OleVariant; BackgroundQuery: OleVariant;
                               OptimizeCache: OleVariant; PageFieldOrder: OleVariant;
                               PageFieldWrapCount: OleVariant; ReadData: OleVariant;
                               Connection: OleVariant; lcid: Integer); dispid 684;
    procedure ResetColors; dispid 1468;
    property VBProject: VBProject readonly dispid 1469;
    procedure FollowHyperlink(const Address: WideString; SubAddress: OleVariant;
                              NewWindow: OleVariant; AddHistory: OleVariant; ExtraInfo: OleVariant;
                              Method: OleVariant; HeaderInfo: OleVariant); dispid 1470;
    procedure AddToFavorites; dispid 1476;
    property IsInplace: WordBool readonly dispid 1780;
  end;

// *********************************************************************//
// DispIntf:  WorkbooksDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000208DB-0000-0000-C000-000000000046}
// *********************************************************************//
  WorkbooksDisp = dispinterface
    ['{000208DB-0000-0000-C000-000000000046}']
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(Template: OleVariant; lcid: Integer): Workbook; dispid 181;
    procedure Close(lcid: Integer); dispid 277;
    property Count: Integer readonly dispid 118;
    property Item[Index: OleVariant]: Workbook readonly dispid 170;
    property _NewEnum: IUnknown readonly dispid -4;
    function Open(const Filename: WideString; UpdateLinks: OleVariant; ReadOnly: OleVariant; 
                  Format: OleVariant; Password: OleVariant; WriteResPassword: OleVariant; 
                  IgnoreReadOnlyRecommended: OleVariant; Origin: OleVariant; Delimiter: OleVariant; 
                  Editable: OleVariant; Notify: OleVariant; Converter: OleVariant; 
                  AddToMru: OleVariant; lcid: Integer): Workbook; dispid 682;
    procedure OpenText(const Filename: WideString; Origin: OleVariant; StartRow: OleVariant; 
                       DataType: OleVariant; TextQualifier: XlTextQualifier; 
                       ConsecutiveDelimiter: OleVariant; Tab: OleVariant; Semicolon: OleVariant; 
                       Comma: OleVariant; Space: OleVariant; Other: OleVariant; 
                       OtherChar: OleVariant; FieldInfo: OleVariant; TextVisualLayout: OleVariant; 
                       lcid: Integer); dispid 683;
    property _Default[Index: OleVariant]: Workbook readonly dispid 0; default;
  end;

// *********************************************************************//
// DispIntf:  Font
// Flags:     (4096) Dispatchable
// GUID:      {0002084D-0000-0000-C000-000000000046}
// *********************************************************************//
  Font = dispinterface
    ['{0002084D-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Background: OleVariant dispid 180;
    property Bold: OleVariant dispid 96;
    property Color: OleVariant dispid 99;
    property ColorIndex: OleVariant dispid 97;
    property FontStyle: OleVariant dispid 177;
    property Italic: OleVariant dispid 101;
    property Name: OleVariant dispid 110;
    property OutlineFont: OleVariant dispid 221;
    property Shadow: OleVariant dispid 103;
    property Size: OleVariant dispid 104;
    property Strikethrough: OleVariant dispid 105;
    property Subscript: OleVariant dispid 179;
    property Superscript: OleVariant dispid 178;
    property Underline: OleVariant dispid 106;
  end;

// *********************************************************************//
// DispIntf:  Window_
// Flags:     (4096) Dispatchable
// GUID:      {00020893-0000-0000-C000-000000000046}
// *********************************************************************//
  Window_ = dispinterface
    ['{00020893-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Activate; dispid 304;
    procedure ActivateNext; dispid 1115;
    procedure ActivatePrevious; dispid 1116;
    property ActiveCell: Range readonly dispid 305;
    property ActiveChart: Chart readonly dispid 183;
    property ActivePane: Pane readonly dispid 642;
    property ActiveSheet: IDispatch readonly dispid 307;
    property Caption: OleVariant dispid 139;
    procedure Close(SaveChanges: OleVariant; Filename: OleVariant; RouteWorkbook: OleVariant); dispid 277;
    property DisplayFormulas: WordBool dispid 644;
    property DisplayGridlines: WordBool dispid 645;
    property DisplayHeadings: WordBool dispid 646;
    property DisplayHorizontalScrollBar: WordBool dispid 921;
    property DisplayOutline: WordBool dispid 647;
    property DisplayRightToLeft: WordBool dispid 648;
    property DisplayVerticalScrollBar: WordBool dispid 922;
    property DisplayWorkbookTabs: WordBool dispid 923;
    property DisplayZeros: WordBool dispid 649;
    property EnableResize: WordBool dispid 1192;
    property FreezePanes: WordBool dispid 650;
    property GridlineColor: Integer dispid 651;
    property GridlineColorIndex: XlColorIndex dispid 652;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    procedure LargeScroll(Down: OleVariant; Up: OleVariant; ToRight: OleVariant; ToLeft: OleVariant); dispid 547;
    property Left: Double dispid 127;
    function NewWindow: Window_; dispid 280;
    property OnWindow: WideString dispid 623;
    property Panes: Panes readonly dispid 653;
    procedure PrintOut(From: OleVariant; To_: OleVariant; Copies: OleVariant; Preview: OleVariant; 
                       ActivePrinter: OleVariant; PrintToFile: OleVariant; Collate: OleVariant); dispid 905;
    procedure PrintPreview(EnableChanges: OleVariant); dispid 281;
    property RangeSelection: Range readonly dispid 1189;
    property ScrollColumn: Integer dispid 654;
    property ScrollRow: Integer dispid 655;
    procedure ScrollWorkbookTabs(Sheets: OleVariant; Position: OleVariant); dispid 662;
    property SelectedSheets: Sheets readonly dispid 656;
    property Selection: IDispatch readonly dispid 147;
    procedure SmallScroll(Down: OleVariant; Up: OleVariant; ToRight: OleVariant; ToLeft: OleVariant); dispid 548;
    property Split: WordBool dispid 657;
    property SplitColumn: Integer dispid 658;
    property SplitHorizontal: Double dispid 659;
    property SplitRow: Integer dispid 660;
    property SplitVertical: Double dispid 661;
    property TabRatio: Double dispid 673;
    property Top: Double dispid 126;
    property Type_: XlWindowType readonly dispid 108;
    property UsableHeight: Double readonly dispid 389;
    property UsableWidth: Double readonly dispid 390;
    property Visible: WordBool dispid 558;
    property VisibleRange: Range readonly dispid 1118;
    property Width: Double dispid 122;
    property WindowNumber: Integer readonly dispid 1119;
    property WindowState: XlWindowState dispid 396;
    property Zoom: OleVariant dispid 663;
    property View: XlWindowView dispid 1194;
  end;

// *********************************************************************//
// DispIntf:  Windows
// Flags:     (4096) Dispatchable
// GUID:      {00020892-0000-0000-C000-000000000046}
// *********************************************************************//
  DIWindows = dispinterface
    ['{00020892-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Arrange(ArrangeStyle: XlArrangeStyle; ActiveWorkbook: OleVariant; 
                      SyncHorizontal: OleVariant; SyncVertical: OleVariant); dispid 638;
    property Count: Integer readonly dispid 118;
    property Item[Index: OleVariant]: Window_ readonly dispid 170;
    property _NewEnum: IUnknown readonly dispid -4;
    property _Default[Index: OleVariant]: Window_ readonly dispid 0; default;
  end;

// *********************************************************************//
// DispIntf:  AppEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024413-0000-0000-C000-000000000046}
// *********************************************************************//
  AppEvents = dispinterface
    ['{00024413-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    procedure NewWorkbook(const Wb: Workbook); dispid 1565;
    procedure SheetSelectionChange(const Sh: IDispatch; const Target: Range); dispid 1558;
    procedure SheetBeforeDoubleClick(const Sh: IDispatch; const Target: Range; var Cancel: WordBool); dispid 1559;
    procedure SheetBeforeRightClick(const Sh: IDispatch; const Target: Range; var Cancel: WordBool); dispid 1560;
    procedure SheetActivate(const Sh: IDispatch); dispid 1561;
    procedure SheetDeactivate(const Sh: IDispatch); dispid 1562;
    procedure SheetCalculate(const Sh: IDispatch); dispid 1563;
    procedure SheetChange(const Sh: IDispatch; const Target: Range); dispid 1564;
    procedure WorkbookOpen(const Wb: Workbook); dispid 1567;
    procedure WorkbookActivate(const Wb: Workbook); dispid 1568;
    procedure WorkbookDeactivate(const Wb: Workbook); dispid 1569;
    procedure WorkbookBeforeClose(const Wb: Workbook; var Cancel: WordBool); dispid 1570;
    procedure WorkbookBeforeSave(const Wb: Workbook; SaveAsUI: WordBool; var Cancel: WordBool); dispid 1571;
    procedure WorkbookBeforePrint(const Wb: Workbook; var Cancel: WordBool); dispid 1572;
    procedure WorkbookNewSheet(const Wb: Workbook; const Sh: IDispatch); dispid 1573;
    procedure WorkbookAddinInstall(const Wb: Workbook); dispid 1574;
    procedure WorkbookAddinUninstall(const Wb: Workbook); dispid 1575;
    procedure WindowResize(const Wb: Workbook; const Wn: Window_); dispid 1554;
    procedure WindowActivate(const Wb: Workbook; const Wn: Window_); dispid 1556;
    procedure WindowDeactivate(const Wb: Workbook; const Wn: Window_); dispid 1557;
  end;

// *********************************************************************//
// DispIntf:  WorksheetFunction
// Flags:     (4096) Dispatchable
// GUID:      {00020845-0000-0000-C000-000000000046}
// *********************************************************************//
  WorksheetFunction = dispinterface
    ['{00020845-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function _WSFunction(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                         Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                         Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                         Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant;
                         Arg16: OleVariant; Arg17: OleVariant; Arg18: OleVariant; 
                         Arg19: OleVariant; Arg20: OleVariant; Arg21: OleVariant; 
                         Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                         Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; 
                         Arg28: OleVariant; Arg29: OleVariant; Arg30: OleVariant): OleVariant; dispid 169;
    function Count(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                   Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                   Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                   Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                   Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                   Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                   Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                   Arg29: OleVariant; Arg30: OleVariant): Double; dispid 16384;
    function IsNA(Arg1: OleVariant): WordBool; dispid 16386;
    function IsError(Arg1: OleVariant): WordBool; dispid 16387;
    function Sum(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                 Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                 Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                 Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                 Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                 Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                 Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                 Arg29: OleVariant; Arg30: OleVariant): Double; dispid 16388;
    function Average(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                     Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                     Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                     Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                     Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                     Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                     Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                     Arg29: OleVariant; Arg30: OleVariant): Double; dispid 16389;
    function Min(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                 Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                 Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                 Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                 Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                 Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                 Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                 Arg29: OleVariant; Arg30: OleVariant): Double; dispid 16390;
    function Max(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                 Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                 Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant;
                 Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                 Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                 Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                 Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                 Arg29: OleVariant; Arg30: OleVariant): Double; dispid 16391;
    function Npv(Arg1: Double; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                 Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                 Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                 Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                 Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                 Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                 Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                 Arg29: OleVariant; Arg30: OleVariant): Double; dispid 16395;
    function StDev(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                   Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                   Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                   Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                   Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                   Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                   Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                   Arg29: OleVariant; Arg30: OleVariant): Double; dispid 16396;
    function Dollar(Arg1: Double; Arg2: OleVariant): WideString; dispid 16397;
    function Fixed(Arg1: Double; Arg2: OleVariant; Arg3: OleVariant): WideString; dispid 16398;
    function Pi: Double; dispid 16403;
    function Ln(Arg1: Double): Double; dispid 16406;
    function Log10(Arg1: Double): Double; dispid 16407;
    function Round(Arg1: Double; Arg2: Double): Double; dispid 16411;
    function Lookup(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant): OleVariant; dispid 16412;
    function Index(Arg1: OleVariant; Arg2: Double; Arg3: OleVariant; Arg4: OleVariant): OleVariant; dispid 16413;
    function Rept(const Arg1: WideString; Arg2: Double): WideString; dispid 16414;
    function And_(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                  Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                  Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                  Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                  Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                  Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                  Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                  Arg29: OleVariant; Arg30: OleVariant): WordBool; dispid 16420;
    function Or_(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                 Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                 Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                 Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant;
                 Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                 Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                 Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                 Arg29: OleVariant; Arg30: OleVariant): WordBool; dispid 16421;
    function DCount(const Arg1: Range; Arg2: OleVariant; Arg3: OleVariant): Double; dispid 16424;
    function DSum(const Arg1: Range; Arg2: OleVariant; Arg3: OleVariant): Double; dispid 16425;
    function DAverage(const Arg1: Range; Arg2: OleVariant; Arg3: OleVariant): Double; dispid 16426;
    function DMin(const Arg1: Range; Arg2: OleVariant; Arg3: OleVariant): Double; dispid 16427;
    function DMax(const Arg1: Range; Arg2: OleVariant; Arg3: OleVariant): Double; dispid 16428;
    function DStDev(const Arg1: Range; Arg2: OleVariant; Arg3: OleVariant): Double; dispid 16429;
    function Var_(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                  Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                  Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                  Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                  Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                  Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                  Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                  Arg29: OleVariant; Arg30: OleVariant): Double; dispid 16430;
    function DVar(const Arg1: Range; Arg2: OleVariant; Arg3: OleVariant): Double; dispid 16431;
    function Text(Arg1: OleVariant; const Arg2: WideString): WideString; dispid 16432;
    function LinEst(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant): OleVariant; dispid 16433;
    function Trend(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant): OleVariant; dispid 16434;
    function LogEst(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant): OleVariant; dispid 16435;
    function Growth(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant): OleVariant; dispid 16436;
    function Pv(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: OleVariant; Arg5: OleVariant): Double; dispid 16440;
    function Fv(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: OleVariant; Arg5: OleVariant): Double; dispid 16441;
    function NPer(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: OleVariant; Arg5: OleVariant): Double; dispid 16442;
    function Pmt(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: OleVariant; Arg5: OleVariant): Double; dispid 16443;
    function Rate(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: OleVariant; Arg5: OleVariant; 
                  Arg6: OleVariant): Double; dispid 16444;
    function MIrr(Arg1: OleVariant; Arg2: Double; Arg3: Double): Double; dispid 16445;
    function Irr(Arg1: OleVariant; Arg2: OleVariant): Double; dispid 16446;
    function Match(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant): Double; dispid 16448;
    function Weekday(Arg1: OleVariant; Arg2: OleVariant): Double; dispid 16454;
    function Search(const Arg1: WideString; const Arg2: WideString; Arg3: OleVariant): Double; dispid 16466;
    function Transpose(Arg1: OleVariant): OleVariant; dispid 16467;
    function Atan2(Arg1: Double; Arg2: Double): Double; dispid 16481;
    function Asin(Arg1: Double): Double; dispid 16482;
    function Acos(Arg1: Double): Double; dispid 16483;
    function Choose(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                    Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                    Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant;
                    Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                    Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                    Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                    Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                    Arg29: OleVariant; Arg30: OleVariant): OleVariant; dispid 16484;
    function HLookup(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant): OleVariant; dispid 16485;
    function VLookup(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant): OleVariant; dispid 16486;
    function Log(Arg1: Double; Arg2: OleVariant): Double; dispid 16493;
    function Proper(const Arg1: WideString): WideString; dispid 16498;
    function Trim(const Arg1: WideString): WideString; dispid 16502;
    function Replace(const Arg1: WideString; Arg2: Double; Arg3: Double; const Arg4: WideString): WideString; dispid 16503;
    function Substitute(const Arg1: WideString; const Arg2: WideString; const Arg3: WideString; 
                        Arg4: OleVariant): WideString; dispid 16504;
    function Find(const Arg1: WideString; const Arg2: WideString; Arg3: OleVariant): Double; dispid 16508;
    function IsErr(Arg1: OleVariant): WordBool; dispid 16510;
    function IsText(Arg1: OleVariant): WordBool; dispid 16511;
    function IsNumber(Arg1: OleVariant): WordBool; dispid 16512;
    function Sln(Arg1: Double; Arg2: Double; Arg3: Double): Double; dispid 16526;
    function Syd(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: Double): Double; dispid 16527;
    function Ddb(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: Double; Arg5: OleVariant): Double; dispid 16528;
    function Clean(const Arg1: WideString): WideString; dispid 16546;
    function MDeterm(Arg1: OleVariant): Double; dispid 16547;
    function MInverse(Arg1: OleVariant): OleVariant; dispid 16548;
    function MMult(Arg1: OleVariant; Arg2: OleVariant): OleVariant; dispid 16549;
    function Ipmt(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: Double; Arg5: OleVariant; 
                  Arg6: OleVariant): Double; dispid 16551;
    function Ppmt(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: Double; Arg5: OleVariant; 
                  Arg6: OleVariant): Double; dispid 16552;
    function CountA(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                    Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                    Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                    Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                    Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                    Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                    Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                    Arg29: OleVariant; Arg30: OleVariant): Double; dispid 16553;
    function Product(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                     Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                     Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                     Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                     Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                     Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant;
                     Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                     Arg29: OleVariant; Arg30: OleVariant): Double; dispid 16567;
    function Fact(Arg1: Double): Double; dispid 16568;
    function DProduct(const Arg1: Range; Arg2: OleVariant; Arg3: OleVariant): Double; dispid 16573;
    function IsNonText(Arg1: OleVariant): WordBool; dispid 16574;
    function StDevP(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                    Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                    Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                    Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                    Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                    Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                    Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                    Arg29: OleVariant; Arg30: OleVariant): Double; dispid 16577;
    function VarP(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                  Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                  Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                  Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                  Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                  Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                  Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                  Arg29: OleVariant; Arg30: OleVariant): Double; dispid 16578;
    function DStDevP(const Arg1: Range; Arg2: OleVariant; Arg3: OleVariant): Double; dispid 16579;
    function DVarP(const Arg1: Range; Arg2: OleVariant; Arg3: OleVariant): Double; dispid 16580;
    function IsLogical(Arg1: OleVariant): WordBool; dispid 16582;
    function DCountA(const Arg1: Range; Arg2: OleVariant; Arg3: OleVariant): Double; dispid 16583;
    function USDollar(Arg1: Double; Arg2: Double): WideString; dispid 16588;
    function FindB(const Arg1: WideString; const Arg2: WideString; Arg3: OleVariant): Double; dispid 16589;
    function SearchB(const Arg1: WideString; const Arg2: WideString; Arg3: OleVariant): Double; dispid 16590;
    function ReplaceB(const Arg1: WideString; Arg2: Double; Arg3: Double; const Arg4: WideString): WideString; dispid 16591;
    function RoundUp(Arg1: Double; Arg2: Double): Double; dispid 16596;
    function RoundDown(Arg1: Double; Arg2: Double): Double; dispid 16597;
    function Rank(Arg1: Double; const Arg2: Range; Arg3: OleVariant): Double; dispid 16600;
    function Days360(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant): Double; dispid 16604;
    function Vdb(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: Double; Arg5: Double; 
                 Arg6: OleVariant; Arg7: OleVariant): Double; dispid 16606;
    function Median(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                    Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                    Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                    Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                    Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                    Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                    Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant;
                    Arg29: OleVariant; Arg30: OleVariant): Double; dispid 16611;
    function SumProduct(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                        Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                        Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                        Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                        Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                        Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                        Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                        Arg29: OleVariant; Arg30: OleVariant): Double; dispid 16612;
    function Sinh(Arg1: Double): Double; dispid 16613;
    function Cosh(Arg1: Double): Double; dispid 16614;
    function Tanh(Arg1: Double): Double; dispid 16615;
    function Asinh(Arg1: Double): Double; dispid 16616;
    function Acosh(Arg1: Double): Double; dispid 16617;
    function Atanh(Arg1: Double): Double; dispid 16618;
    function DGet(const Arg1: Range; Arg2: OleVariant; Arg3: OleVariant): OleVariant; dispid 16619;
    function Db(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: Double; Arg5: OleVariant): Double; dispid 16631;
    function Frequency(Arg1: OleVariant; Arg2: OleVariant): OleVariant; dispid 16636;
    function AveDev(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                    Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                    Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                    Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                    Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                    Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                    Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                    Arg29: OleVariant; Arg30: OleVariant): Double; dispid 16653;
    function BetaDist(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: OleVariant; Arg5: OleVariant): Double; dispid 16654;
    function GammaLn(Arg1: Double): Double; dispid 16655;
    function BetaInv(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: OleVariant; Arg5: OleVariant): Double; dispid 16656;
    function BinomDist(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: WordBool): Double; dispid 16657;
    function ChiDist(Arg1: Double; Arg2: Double): Double; dispid 16658;
    function ChiInv(Arg1: Double; Arg2: Double): Double; dispid 16659;
    function Combin(Arg1: Double; Arg2: Double): Double; dispid 16660;
    function Confidence(Arg1: Double; Arg2: Double; Arg3: Double): Double; dispid 16661;
    function CritBinom(Arg1: Double; Arg2: Double; Arg3: Double): Double; dispid 16662;
    function Even(Arg1: Double): Double; dispid 16663;
    function ExponDist(Arg1: Double; Arg2: Double; Arg3: WordBool): Double; dispid 16664;
    function FDist(Arg1: Double; Arg2: Double; Arg3: Double): Double; dispid 16665;
    function FInv(Arg1: Double; Arg2: Double; Arg3: Double): Double; dispid 16666;
    function Fisher(Arg1: Double): Double; dispid 16667;
    function FisherInv(Arg1: Double): Double; dispid 16668;
    function Floor(Arg1: Double; Arg2: Double): Double; dispid 16669;
    function GammaDist(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: WordBool): Double; dispid 16670;
    function GammaInv(Arg1: Double; Arg2: Double; Arg3: Double): Double; dispid 16671;
    function Ceiling(Arg1: Double; Arg2: Double): Double; dispid 16672;
    function HypGeomDist(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: Double): Double; dispid 16673;
    function LogNormDist(Arg1: Double; Arg2: Double; Arg3: Double): Double; dispid 16674;
    function LogInv(Arg1: Double; Arg2: Double; Arg3: Double): Double; dispid 16675;
    function NegBinomDist(Arg1: Double; Arg2: Double; Arg3: Double): Double; dispid 16676;
    function NormDist(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: WordBool): Double; dispid 16677;
    function NormSDist(Arg1: Double): Double; dispid 16678;
    function NormInv(Arg1: Double; Arg2: Double; Arg3: Double): Double; dispid 16679;
    function NormSInv(Arg1: Double): Double; dispid 16680;
    function Standardize(Arg1: Double; Arg2: Double; Arg3: Double): Double; dispid 16681;
    function Odd(Arg1: Double): Double; dispid 16682;
    function Permut(Arg1: Double; Arg2: Double): Double; dispid 16683;
    function Poisson(Arg1: Double; Arg2: Double; Arg3: WordBool): Double; dispid 16684;
    function TDist(Arg1: Double; Arg2: Double; Arg3: Double): Double; dispid 16685;
    function Weibull(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: WordBool): Double; dispid 16686;
    function SumXMY2(Arg1: OleVariant; Arg2: OleVariant): Double; dispid 16687;
    function SumX2MY2(Arg1: OleVariant; Arg2: OleVariant): Double; dispid 16688;
    function SumX2PY2(Arg1: OleVariant; Arg2: OleVariant): Double; dispid 16689;
    function ChiTest(Arg1: OleVariant; Arg2: OleVariant): Double; dispid 16690;
    function Correl(Arg1: OleVariant; Arg2: OleVariant): Double; dispid 16691;
    function Covar(Arg1: OleVariant; Arg2: OleVariant): Double; dispid 16692;
    function Forecast(Arg1: Double; Arg2: OleVariant; Arg3: OleVariant): Double; dispid 16693;
    function FTest(Arg1: OleVariant; Arg2: OleVariant): Double; dispid 16694;
    function Intercept(Arg1: OleVariant; Arg2: OleVariant): Double; dispid 16695;
    function Pearson(Arg1: OleVariant; Arg2: OleVariant): Double; dispid 16696;
    function RSq(Arg1: OleVariant; Arg2: OleVariant): Double; dispid 16697;
    function StEyx(Arg1: OleVariant; Arg2: OleVariant): Double; dispid 16698;
    function Slope(Arg1: OleVariant; Arg2: OleVariant): Double; dispid 16699;
    function TTest(Arg1: OleVariant; Arg2: OleVariant; Arg3: Double; Arg4: Double): Double; dispid 16700;
    function Prob(Arg1: OleVariant; Arg2: OleVariant; Arg3: Double; Arg4: OleVariant): Double; dispid 16701;
    function DevSq(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                   Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                   Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                   Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                   Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                   Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                   Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                   Arg29: OleVariant; Arg30: OleVariant): Double; dispid 16702;
    function GeoMean(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                     Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant;
                     Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                     Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                     Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                     Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                     Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                     Arg29: OleVariant; Arg30: OleVariant): Double; dispid 16703;
    function HarMean(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                     Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                     Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                     Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                     Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                     Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                     Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                     Arg29: OleVariant; Arg30: OleVariant): Double; dispid 16704;
    function SumSq(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                   Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                   Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                   Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                   Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                   Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                   Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                   Arg29: OleVariant; Arg30: OleVariant): Double; dispid 16705;
    function Kurt(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                  Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                  Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                  Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                  Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                  Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                  Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                  Arg29: OleVariant; Arg30: OleVariant): Double; dispid 16706;
    function Skew(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                  Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                  Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                  Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                  Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                  Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                  Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                  Arg29: OleVariant; Arg30: OleVariant): Double; dispid 16707;
    function ZTest(Arg1: OleVariant; Arg2: Double; Arg3: OleVariant): Double; dispid 16708;
    function Large(Arg1: OleVariant; Arg2: Double): Double; dispid 16709;
    function Small(Arg1: OleVariant; Arg2: Double): Double; dispid 16710;
    function Quartile(Arg1: OleVariant; Arg2: Double): Double; dispid 16711;
    function Percentile(Arg1: OleVariant; Arg2: Double): Double; dispid 16712;
    function PercentRank(Arg1: OleVariant; Arg2: Double; Arg3: OleVariant): Double; dispid 16713;
    function Mode(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                  Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                  Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                  Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                  Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                  Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                  Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                  Arg29: OleVariant; Arg30: OleVariant): Double; dispid 16714;
    function TrimMean(Arg1: OleVariant; Arg2: Double): Double; dispid 16715;
    function TInv(Arg1: Double; Arg2: Double): Double; dispid 16716;
    function Power(Arg1: Double; Arg2: Double): Double; dispid 16721;
    function Radians(Arg1: Double): Double; dispid 16726;
    function Degrees(Arg1: Double): Double; dispid 16727;
    function Subtotal(Arg1: Double; const Arg2: Range; Arg3: OleVariant; Arg4: OleVariant; 
                      Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                      Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                      Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                      Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                      Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                      Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                      Arg29: OleVariant; Arg30: OleVariant): Double; dispid 16728;
    function SumIf(const Arg1: Range; Arg2: OleVariant; Arg3: OleVariant): Double; dispid 16729;
    function CountIf(const Arg1: Range; Arg2: OleVariant): Double; dispid 16730;
    function CountBlank(const Arg1: Range): Double; dispid 16731;
    function Ispmt(Arg1: Double; Arg2: Double; Arg3: Double; Arg4: Double): Double; dispid 16734;
    function Roman(Arg1: Double; Arg2: OleVariant): WideString; dispid 16738;
    function Asc(const Arg1: WideString): WideString; dispid 16598;
    function Dbcs(const Arg1: WideString): WideString; dispid 16599;
  end;

// *********************************************************************//
// DispIntf:  Range
// Flags:     (4096) Dispatchable
// GUID:      {00020846-0000-0000-C000-000000000046}
// *********************************************************************//
  Range = dispinterface
    ['{00020846-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Activate; dispid 304;
    property AddIndent: OleVariant dispid 1063;
    property Address[RowAbsolute: OleVariant; ColumnAbsolute: OleVariant; 
                     ReferenceStyle: XlReferenceStyle; External: OleVariant; RelativeTo: OleVariant]: WideString readonly dispid 236;
    property AddressLocal[RowAbsolute: OleVariant; ColumnAbsolute: OleVariant; 
                          ReferenceStyle: XlReferenceStyle; External: OleVariant; 
                          RelativeTo: OleVariant]: WideString readonly dispid 437;
    procedure AdvancedFilter(Action: XlFilterAction; CriteriaRange: OleVariant; 
                             CopyToRange: OleVariant; Unique: OleVariant); dispid 876;
    procedure ApplyNames(Names: OleVariant; IgnoreRelativeAbsolute: OleVariant; 
                         UseRowColumnNames: OleVariant; OmitColumn: OleVariant; 
                         OmitRow: OleVariant; Order: XlApplyNamesOrder; AppendLast: OleVariant); dispid 441;
    procedure ApplyOutlineStyles; dispid 448;
    property Areas: Areas readonly dispid 568;
    function AutoComplete(const String_: WideString): WideString; dispid 1185;
    procedure AutoFill(const Destination: Range; Type_: XlAutoFillType); dispid 449;
    procedure AutoFilter(Field: OleVariant; Criteria1: OleVariant; Operator: XlAutoFilterOperator; 
                         Criteria2: OleVariant; VisibleDropDown: OleVariant); dispid 793;
    procedure AutoFit; dispid 237;
    procedure AutoFormat(Format: XlRangeAutoFormat; Number: OleVariant; Font: OleVariant; 
                         Alignment: OleVariant; Border: OleVariant; Pattern: OleVariant; 
                         Width: OleVariant); dispid 114;
    procedure AutoOutline; dispid 1036;
    procedure BorderAround(LineStyle: OleVariant; Weight: XlBorderWeight; ColorIndex: XlColorIndex; 
                           Color: OleVariant); dispid 1067;
    property Borders: Borders readonly dispid 435;
    procedure Calculate; dispid 279;
    property Cells: Range readonly dispid 238;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant;
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    procedure Clear; dispid 111;
    procedure ClearContents; dispid 113;
    procedure ClearFormats; dispid 112;
    procedure ClearNotes; dispid 239;
    procedure ClearOutline; dispid 1037;
    property Column: Integer readonly dispid 240;
    function ColumnDifferences(Comparison: OleVariant): Range; dispid 510;
    property Columns: Range readonly dispid 241;
    property ColumnWidth: OleVariant dispid 242;
    procedure Consolidate(Sources: OleVariant; Function_: OleVariant; TopRow: OleVariant; 
                          LeftColumn: OleVariant; CreateLinks: OleVariant); dispid 482;
    procedure Copy(Destination: OleVariant); dispid 551;
    function CopyFromRecordset(const Data: IUnknown; MaxRows: OleVariant; MaxColumns: OleVariant): Integer; dispid 1152;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    property Count: Integer readonly dispid 118;
    procedure CreateNames(Top: OleVariant; Left: OleVariant; Bottom: OleVariant; Right: OleVariant); dispid 457;
    procedure CreatePublisher(Edition: OleVariant; Appearance: XlPictureAppearance; 
                              ContainsPICT: OleVariant; ContainsBIFF: OleVariant; 
                              ContainsRTF: OleVariant; ContainsVALU: OleVariant); dispid 458;
    property CurrentArray: Range readonly dispid 501;
    property CurrentRegion: Range readonly dispid 243;
    procedure Cut(Destination: OleVariant); dispid 565;
    procedure DataSeries(Rowcol: OleVariant; Type_: XlDataSeriesType; Date: XlDataSeriesDate; 
                         Step: OleVariant; Stop: OleVariant; Trend: OleVariant); dispid 464;
    property _Default[RowIndex: OleVariant; ColumnIndex: OleVariant]: OleVariant dispid 0;
    procedure Delete(Shift: OleVariant); dispid 117;
    property Dependents: Range readonly dispid 543;
    function DialogBox_: OleVariant; dispid 245;
    property DirectDependents: Range readonly dispid 545;
    property DirectPrecedents: Range readonly dispid 546;
    function EditionOptions(Type_: XlEditionType; Option: XlEditionOptionsOption; Name: OleVariant; 
                            Reference: OleVariant; Appearance: XlPictureAppearance; 
                            ChartSize: XlPictureAppearance; Format: OleVariant): OleVariant; dispid 1131;
    property End_[Direction: XlDirection]: Range readonly dispid 500;
    property EntireColumn: Range readonly dispid 246;
    property EntireRow: Range readonly dispid 247;
    procedure FillDown; dispid 248;
    procedure FillLeft; dispid 249;
    procedure FillRight; dispid 250;
    procedure FillUp; dispid 251;
    function Find(What: OleVariant; After: OleVariant; LookIn: OleVariant; LookAt: OleVariant;
                  SearchOrder: OleVariant; SearchDirection: XlSearchDirection; 
                  MatchCase: OleVariant; MatchByte: OleVariant; MatchControlCharacters: OleVariant; 
                  MatchDiacritics: OleVariant; MatchKashida: OleVariant; MatchAlefHamza: OleVariant): Range; dispid 398;
    function FindNext(After: OleVariant): Range; dispid 399;
    function FindPrevious(After: OleVariant): Range; dispid 400;
    property Font: Font readonly dispid 146;
    property Formula: OleVariant dispid 261;
    property FormulaArray: OleVariant dispid 586;
    property FormulaLabel: XlFormulaLabel dispid 1380;
    property FormulaHidden: OleVariant dispid 262;
    property FormulaLocal: OleVariant dispid 263;
    property FormulaR1C1: OleVariant dispid 264;
    property FormulaR1C1Local: OleVariant dispid 265;
    procedure FunctionWizard; dispid 571;
    function GoalSeek(Goal: OleVariant; const ChangingCell: Range): WordBool; dispid 472;
    function Group(Start: OleVariant; End_: OleVariant; By: OleVariant; Periods: OleVariant): OleVariant; dispid 46;
    property HasArray: OleVariant readonly dispid 266;
    property HasFormula: OleVariant readonly dispid 267;
    property Height: OleVariant readonly dispid 123;
    property Hidden: OleVariant dispid 268;
    property HorizontalAlignment: OleVariant dispid 136;
    property IndentLevel: OleVariant dispid 201;
    procedure InsertIndent(InsertAmount: Integer); dispid 1381;
    procedure Insert(Shift: OleVariant); dispid 252;
    property Interior: Interior readonly dispid 129;
    property Item[RowIndex: OleVariant; ColumnIndex: OleVariant]: OleVariant dispid 170;
    procedure Justify; dispid 495;
    property Left: OleVariant readonly dispid 127;
    property ListHeaderRows: Integer readonly dispid 1187;
    procedure ListNames; dispid 253;
    property LocationInTable: XlLocationInTable readonly dispid 691;
    property Locked: OleVariant dispid 269;
    procedure Merge(Across: OleVariant); dispid 564;
    procedure UnMerge; dispid 1384;
    property MergeArea: Range readonly dispid 1385;
    property MergeCells: OleVariant dispid 208;
    property Name: OleVariant dispid 110;
    procedure NavigateArrow(TowardPrecedent: OleVariant; ArrowNumber: OleVariant; 
                            LinkNumber: OleVariant); dispid 1032;
    property _NewEnum: IUnknown readonly dispid -4;
    property Next: Range readonly dispid 502;
    function NoteText(Text: OleVariant; Start: OleVariant; Length: OleVariant): WideString; dispid 1127;
    property NumberFormat: OleVariant dispid 193;
    property NumberFormatLocal: OleVariant dispid 1097;
    property Offset[RowOffset: OleVariant; ColumnOffset: OleVariant]: Range readonly dispid 254;
    property Orientation: OleVariant dispid 134;
    property OutlineLevel: OleVariant dispid 271;
    property PageBreak: Integer dispid 255;
    procedure Parse(ParseLine: OleVariant; Destination: OleVariant); dispid 477;
    procedure PasteSpecial(Paste: XlPasteType; Operation: XlPasteSpecialOperation; 
                           SkipBlanks: OleVariant; Transpose: OleVariant); dispid 1027;
    property PivotField: PivotField readonly dispid 731;
    property PivotItem: PivotItem readonly dispid 740;
    property PivotTable: PivotTable readonly dispid 716;
    property Precedents: Range readonly dispid 544;
    property PrefixCharacter: OleVariant readonly dispid 504;
    property Previous: Range readonly dispid 503;
    procedure PrintOut(From: OleVariant; To_: OleVariant; Copies: OleVariant; Preview: OleVariant; 
                       ActivePrinter: OleVariant; PrintToFile: OleVariant; Collate: OleVariant); dispid 905;
    procedure PrintPreview(EnableChanges: OleVariant); dispid 281;
    property QueryTable: QueryTable readonly dispid 1386;
    property Range[Cell1: OleVariant; Cell2: OleVariant]: Range readonly dispid 197;
    procedure RemoveSubtotal; dispid 883;
    function Replace(What: OleVariant; Replacement: OleVariant; LookAt: OleVariant; 
                     SearchOrder: OleVariant; MatchCase: OleVariant; MatchByte: OleVariant; 
                     MatchControlCharacters: OleVariant; MatchDiacritics: OleVariant; 
                     MatchKashida: OleVariant; MatchAlefHamza: OleVariant): WordBool; dispid 226;
    property Resize[RowSize: OleVariant; ColumnSize: OleVariant]: Range readonly dispid 256;
    property Row: Integer readonly dispid 257;
    function RowDifferences(Comparison: OleVariant): Range; dispid 511;
    property RowHeight: OleVariant dispid 272;
    property Rows: Range readonly dispid 258;
    function Run(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                 Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                 Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                 Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                 Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                 Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                 Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                 Arg29: OleVariant; Arg30: OleVariant): OleVariant; dispid 259;
    procedure Select; dispid 235;
    procedure Show; dispid 496;
    procedure ShowDependents(Remove: OleVariant); dispid 877;
    property ShowDetail: OleVariant dispid 585;
    procedure ShowErrors; dispid 878;
    procedure ShowPrecedents(Remove: OleVariant); dispid 879;
    property ShrinkToFit: OleVariant dispid 209;
    procedure Sort(Key1: OleVariant; Order1: XlSortOrder; Key2: OleVariant; Type_: OleVariant; 
                   Order2: XlSortOrder; Key3: OleVariant; Order3: XlSortOrder; 
                   Header: XlYesNoGuess; OrderCustom: OleVariant; MatchCase: OleVariant; 
                   Orientation: XlSortOrientation; SortMethod: XlSortMethod; 
                   IgnoreControlCharacters: OleVariant; IgnoreDiacritics: OleVariant; 
                   IgnoreKashida: OleVariant); dispid 880;
    procedure SortSpecial(SortMethod: XlSortMethod; Key1: OleVariant; Order1: XlSortOrder; 
                          Type_: OleVariant; Key2: OleVariant; Order2: XlSortOrder; 
                          Key3: OleVariant; Order3: XlSortOrder; Header: XlYesNoGuess; 
                          OrderCustom: OleVariant; MatchCase: OleVariant; 
                          Orientation: XlSortOrientation); dispid 881;
    property SoundNote: SoundNote readonly dispid 916;
    function SpecialCells(Type_: XlCellType; Value: OleVariant): Range; dispid 410;
    property Style: OleVariant dispid 260;
    procedure SubscribeTo(const Edition: WideString; Format: XlSubscribeToFormat); dispid 481;
    procedure Subtotal(GroupBy: Integer; Function_: XlConsolidationFunction; TotalList: OleVariant; 
                       Replace: OleVariant; PageBreaks: OleVariant; SummaryBelowData: XlSummaryRow); dispid 882;
    property Summary: OleVariant readonly dispid 273;
    procedure Table(RowInput: OleVariant; ColumnInput: OleVariant); dispid 497;
    property Text: OleVariant readonly dispid 138;
    procedure TextToColumns(Destination: OleVariant; DataType: XlTextParsingType; 
                            TextQualifier: XlTextQualifier; ConsecutiveDelimiter: OleVariant; 
                            Tab: OleVariant; Semicolon: OleVariant; Comma: OleVariant; 
                            Space: OleVariant; Other: OleVariant; OtherChar: OleVariant; 
                            FieldInfo: OleVariant); dispid 1040;
    property Top: OleVariant readonly dispid 126;
    procedure Ungroup; dispid 244;
    property UseStandardHeight: OleVariant dispid 274;
    property UseStandardWidth: OleVariant dispid 275;
    property Validation: Validation readonly dispid 1387;
    property Value: OleVariant dispid 6;
    property Value2: OleVariant dispid 1388;
    property VerticalAlignment: OleVariant dispid 137;
    property Width: OleVariant readonly dispid 122;
    property Worksheet: Worksheet readonly dispid 348;
    property WrapText: OleVariant dispid 276;
    function AddComment(Text: OleVariant): Comment; dispid 1389;
    property Comment: Comment readonly dispid 910;
    procedure ClearComments; dispid 1390;
    property Phonetic: Phonetic readonly dispid 1391;
    property FormatConditions: FormatConditions readonly dispid 1392;
    property ReadingOrder: Integer dispid 975;
    property Hyperlinks: Hyperlinks readonly dispid 1393;
  end;

// *********************************************************************//
// DispIntf:  ChartEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002440F-0000-0000-C000-000000000046}
// *********************************************************************//
  ChartEvents = dispinterface
    ['{0002440F-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    procedure Activate; dispid 304;
    procedure Deactivate; dispid 1530;
    procedure Resize; dispid 256;
    procedure MouseDown(Button: XlMouseButton; Shift: Integer; X: Integer; Y: Integer); dispid 1531;
    procedure MouseUp(Button: XlMouseButton; Shift: Integer; X: Integer; Y: Integer); dispid 1532;
    procedure MouseMove(Button: XlMouseButton; Shift: Integer; X: Integer; Y: Integer); dispid 1533;
    procedure BeforeRightClick(var Cancel: WordBool); dispid 1534;
    procedure DragPlot; dispid 1535;
    procedure DragOver; dispid 1536;
    procedure BeforeDoubleClick(ElementID: XlChartItem; Arg1: Integer; Arg2: Integer; 
                                var Cancel: WordBool); dispid 1537;
    procedure Select(ElementID: XlChartItem; Arg1: Integer; Arg2: Integer); dispid 235;
    procedure SeriesChange(SeriesIndex: Integer; PointIndex: Integer); dispid 1538;
    procedure Calculate; dispid 279;
  end;

// *********************************************************************//
// DispIntf:  VPageBreak
// Flags:     (4096) Dispatchable
// GUID:      {00024402-0000-0000-C000-000000000046}
// *********************************************************************//
  VPageBreak = dispinterface
    ['{00024402-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: Worksheet readonly dispid 150;
    procedure Delete; dispid 117;
    procedure DragOff(Direction: XlDirection; RegionIndex: Integer); dispid 1420;
    property Type_: XlPageBreak dispid 108;
    property Extent: XlPageBreakExtent readonly dispid 1422;
    property Location: Range dispid 1397;
  end;

// *********************************************************************//
// DispIntf:  HPageBreak
// Flags:     (4096) Dispatchable
// GUID:      {00024401-0000-0000-C000-000000000046}
// *********************************************************************//
  HPageBreak = dispinterface
    ['{00024401-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant;
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: Worksheet readonly dispid 150;
    procedure Delete; dispid 117;
    procedure DragOff(Direction: XlDirection; RegionIndex: Integer); dispid 1420;
    property Type_: XlPageBreak dispid 108;
    property Extent: XlPageBreakExtent readonly dispid 1422;
    property Location: Range dispid 1397;
  end;

// *********************************************************************//
// DispIntf:  HPageBreaks
// Flags:     (4096) Dispatchable
// GUID:      {00024404-0000-0000-C000-000000000046}
// *********************************************************************//
  HPageBreaks = dispinterface
    ['{00024404-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    property Item[Index: Integer]: HPageBreak readonly dispid 170;
    property _Default[Index: Integer]: HPageBreak readonly dispid 0; default;
    property _NewEnum: IUnknown readonly dispid -4;
    function Add(const Before: IDispatch): HPageBreak; dispid 181;
  end;

// *********************************************************************//
// DispIntf:  VPageBreaks
// Flags:     (4096) Dispatchable
// GUID:      {00024405-0000-0000-C000-000000000046}
// *********************************************************************//
  VPageBreaks = dispinterface
    ['{00024405-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    property Item[Index: Integer]: VPageBreak readonly dispid 170;
    property _Default[Index: Integer]: VPageBreak readonly dispid 0; default;
    property _NewEnum: IUnknown readonly dispid -4;
    function Add(const Before: IDispatch): VPageBreak; dispid 181;
  end;

// *********************************************************************//
// DispIntf:  RecentFile
// Flags:     (4096) Dispatchable
// GUID:      {00024407-0000-0000-C000-000000000046}
// *********************************************************************//
  RecentFile = dispinterface
    ['{00024407-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant;
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    property Path: WideString readonly dispid 291;
    property Index: Integer readonly dispid 486;
    function Open: Workbook; dispid 682;
    procedure Delete; dispid 117;
  end;

// *********************************************************************//
// DispIntf:  RecentFiles
// Flags:     (4096) Dispatchable
// GUID:      {00024406-0000-0000-C000-000000000046}
// *********************************************************************//
  RecentFiles = dispinterface
    ['{00024406-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Maximum: Integer dispid 1423;
    property Count: Integer readonly dispid 118;
    property Item[Index: Integer]: RecentFile readonly dispid 170;
    property _Default[Index: Integer]: RecentFile readonly dispid 0; default;
    function Add(const Name: WideString): RecentFile; dispid 181;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

// *********************************************************************//
// DispIntf:  DocEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024411-0000-0000-C000-000000000046}
// *********************************************************************//
  DocEvents = dispinterface
    ['{00024411-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    procedure SelectionChange(const Target: Range); dispid 1543;
    procedure BeforeDoubleClick(const Target: Range; var Cancel: WordBool); dispid 1537;
    procedure BeforeRightClick(const Target: Range; var Cancel: WordBool); dispid 1534;
    procedure Activate; dispid 304;
    procedure Deactivate; dispid 1530;
    procedure Calculate; dispid 279;
    procedure Change(const Target: Range); dispid 1545;
  end;

// *********************************************************************//
// DispIntf:  Style
// Flags:     (4096) Dispatchable
// GUID:      {00020852-0000-0000-C000-000000000046}
// *********************************************************************//
  Style = dispinterface
    ['{00020852-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant;
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property AddIndent: WordBool dispid 1063;
    property BuiltIn: WordBool readonly dispid 553;
    property Borders: Borders readonly dispid 435;
    procedure Delete; dispid 117;
    property Font: Font readonly dispid 146;
    property FormulaHidden: WordBool dispid 262;
    property HorizontalAlignment: XlHAlign dispid 136;
    property IncludeAlignment: WordBool dispid 413;
    property IncludeBorder: WordBool dispid 414;
    property IncludeFont: WordBool dispid 415;
    property IncludeNumber: WordBool dispid 416;
    property IncludePatterns: WordBool dispid 417;
    property IncludeProtection: WordBool dispid 418;
    property IndentLevel: Integer dispid 201;
    property Interior: Interior readonly dispid 129;
    property Locked: WordBool dispid 269;
    property MergeCells: OleVariant dispid 208;
    property Name: WideString readonly dispid 110;
    property NameLocal: WideString readonly dispid 937;
    property NumberFormat: WideString dispid 193;
    property NumberFormatLocal: WideString dispid 1097;
    property Orientation: XlOrientation dispid 134;
    property ShrinkToFit: WordBool dispid 209;
    property Value: WideString readonly dispid 6;
    property VerticalAlignment: XlVAlign dispid 137;
    property WrapText: WordBool dispid 276;
    property _Default: WideString readonly dispid 0;
    property ReadingOrder: Integer dispid 975;
  end;

// *********************************************************************//
// DispIntf:  Styles
// Flags:     (4096) Dispatchable
// GUID:      {00020853-0000-0000-C000-000000000046}
// *********************************************************************//
  Styles = dispinterface
    ['{00020853-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(const Name: WideString; BasedOn: OleVariant): Style; dispid 181;
    property Count: Integer readonly dispid 118;
    property Item[Index: OleVariant]: Style readonly dispid 170;
    procedure Merge(Workbook: OleVariant); dispid 564;
    property _NewEnum: IUnknown readonly dispid -4;
    property _Default[Index: OleVariant]: Style readonly dispid 0; default;
  end;

// *********************************************************************//
// DispIntf:  Borders
// Flags:     (4096) Dispatchable
// GUID:      {00020855-0000-0000-C000-000000000046}
// *********************************************************************//
  Borders = dispinterface
    ['{00020855-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Color: OleVariant dispid 99;
    property ColorIndex: OleVariant dispid 97;
    property Count: Integer readonly dispid 118;
    property Item[Index: XlBordersIndex]: Border readonly dispid 170;
    property LineStyle: OleVariant dispid 119;
    property _NewEnum: IUnknown readonly dispid -4;
    property Value: OleVariant dispid 6;
    property Weight: OleVariant dispid 120;
    property _Default[Index: XlBordersIndex]: Border readonly dispid 0; default;
  end;

// *********************************************************************//
// DispIntf:  AddIn
// Flags:     (4096) Dispatchable
// GUID:      {00020857-0000-0000-C000-000000000046}
// *********************************************************************//
  AddIn = dispinterface
    ['{00020857-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Author: WideString readonly dispid 574;
    property Comments: WideString readonly dispid 575;
    property FullName: WideString readonly dispid 289;
    property Installed: WordBool dispid 550;
    property Keywords: WideString readonly dispid 577;
    property Name: WideString readonly dispid 110;
    property Path: WideString readonly dispid 291;
    property Subject: WideString readonly dispid 953;
    property Title: WideString readonly dispid 199;
  end;

// *********************************************************************//
// DispIntf:  AddIns
// Flags:     (4096) Dispatchable
// GUID:      {00020858-0000-0000-C000-000000000046}
// *********************************************************************//
  AddIns = dispinterface
    ['{00020858-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(const Filename: WideString; CopyFile: OleVariant): AddIn; dispid 181;
    property Count: Integer readonly dispid 118;
    property Item[Index: OleVariant]: AddIn readonly dispid 170;
    property _NewEnum: IUnknown readonly dispid -4;
    property _Default[Index: OleVariant]: AddIn readonly dispid 0; default;
  end;

// *********************************************************************//
// DispIntf:  Toolbar
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002085C-0000-0000-C000-000000000046}
// *********************************************************************//
  Toolbar = dispinterface
    ['{0002085C-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BuiltIn: WordBool readonly dispid 553;
    procedure Delete; dispid 117;
    property Height: Integer dispid 123;
    property Left: Integer dispid 127;
    property Name: WideString readonly dispid 110;
    property Position: Integer dispid 133;
    property Protection: XlToolbarProtection dispid 176;
    procedure Reset; dispid 555;
    property ToolbarButtons: ToolbarButtons readonly dispid 964;
    property Top: Integer dispid 126;
    property Visible: WordBool dispid 558;
    property Width: Integer dispid 122;
  end;

// *********************************************************************//
// DispIntf:  Toolbars
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002085D-0000-0000-C000-000000000046}
// *********************************************************************//
  Toolbars = dispinterface
    ['{0002085D-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(Name: OleVariant): Toolbar; dispid 181;
    property Count: Integer readonly dispid 118;
    property _Default[Index: OleVariant]: Toolbar readonly dispid 0; default;
    property Item[Index: OleVariant]: Toolbar readonly dispid 170;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

// *********************************************************************//
// DispIntf:  ToolbarButton
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002085E-0000-0000-C000-000000000046}
// *********************************************************************//
  ToolbarButton = dispinterface
    ['{0002085E-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BuiltIn: WordBool readonly dispid 553;
    property BuiltInFace: WordBool dispid 554;
    procedure Copy(const Toolbar: Toolbar; Before: Integer); dispid 551;
    procedure CopyFace; dispid 966;
    procedure Delete; dispid 117;
    procedure Edit; dispid 562;
    property Enabled: WordBool dispid 600;
    property HelpContextID: Integer dispid 355;
    property HelpFile: WideString dispid 360;
    property Id: Integer readonly dispid 570;
    property IsGap: WordBool readonly dispid 561;
    procedure Move(const Toolbar: Toolbar; Before: Integer); dispid 637;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    procedure PasteFace; dispid 967;
    property Pushed: WordBool dispid 560;
    procedure Reset; dispid 555;
    property StatusBar: WideString dispid 386;
    property Width: Integer dispid 122;
  end;

// *********************************************************************//
// DispIntf:  ToolbarButtons
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002085F-0000-0000-C000-000000000046}
// *********************************************************************//
  ToolbarButtons = dispinterface
    ['{0002085F-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(Button: OleVariant; Before: OleVariant; OnAction: OleVariant; Pushed: OleVariant; 
                 Enabled: OleVariant; StatusBar: OleVariant; HelpFile: OleVariant; 
                 HelpContextID: OleVariant): ToolbarButton; dispid 181;
    property Count: Integer readonly dispid 118;
    property Item[Index: Integer]: ToolbarButton readonly dispid 170;
    property _NewEnum: IUnknown readonly dispid -4;
    property _Default[Index: Integer]: ToolbarButton readonly dispid 0; default;
  end;

// *********************************************************************//
// DispIntf:  Areas
// Flags:     (4096) Dispatchable
// GUID:      {00020860-0000-0000-C000-000000000046}
// *********************************************************************//
  Areas = dispinterface
    ['{00020860-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    property Item[Index: Integer]: Range readonly dispid 170;
    property _NewEnum: IUnknown readonly dispid -4;
    property _Default[Index: Integer]: Range readonly dispid 0; default;
  end;

// *********************************************************************//
// DispIntf:  WorkbookEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024412-0000-0000-C000-000000000046}
// *********************************************************************//
  WorkbookEvents = dispinterface
    ['{00024412-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    procedure Open; dispid 682;
    procedure Activate; dispid 304;
    procedure Deactivate; dispid 1530;
    procedure BeforeClose(var Cancel: WordBool); dispid 1546;
    procedure BeforeSave(SaveAsUI: WordBool; var Cancel: WordBool); dispid 1547;
    procedure BeforePrint(var Cancel: WordBool); dispid 1549;
    procedure NewSheet(const Sh: IDispatch); dispid 1550;
    procedure AddinInstall; dispid 1552;
    procedure AddinUninstall; dispid 1553;
    procedure WindowResize(const Wn: Window_); dispid 1554;
    procedure WindowActivate(const Wn: Window_); dispid 1556;
    procedure WindowDeactivate(const Wn: Window_); dispid 1557;
    procedure SheetSelectionChange(const Sh: IDispatch; const Target: Range); dispid 1558;
    procedure SheetBeforeDoubleClick(const Sh: IDispatch; const Target: Range; var Cancel: WordBool); dispid 1559;
    procedure SheetBeforeRightClick(const Sh: IDispatch; const Target: Range; var Cancel: WordBool); dispid 1560;
    procedure SheetActivate(const Sh: IDispatch); dispid 1561;
    procedure SheetDeactivate(const Sh: IDispatch); dispid 1562;
    procedure SheetCalculate(const Sh: IDispatch); dispid 1563;
    procedure SheetChange(const Sh: IDispatch; const Target: Range); dispid 1564;
  end;

// *********************************************************************//
// DispIntf:  MenuBars
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020863-0000-0000-C000-000000000046}
// *********************************************************************//
  MenuBars = dispinterface
    ['{00020863-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(Name: OleVariant): MenuBar; dispid 181;
    property Count: Integer readonly dispid 118;
    property _Default[Index: OleVariant]: MenuBar readonly dispid 0; default;
    property Item[Index: OleVariant]: MenuBar readonly dispid 170;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

// *********************************************************************//
// DispIntf:  MenuBar
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020864-0000-0000-C000-000000000046}
// *********************************************************************//
  MenuBar = dispinterface
    ['{00020864-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Activate; dispid 304;
    property BuiltIn: WordBool readonly dispid 553;
    property Caption: WideString dispid 139;
    procedure Delete; dispid 117;
    property Index: Integer readonly dispid 486;
    property Menus: MenusDisp readonly dispid 591;
    procedure Reset; dispid 555;
  end;

// *********************************************************************//
// DispIntf:  Menus
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020865-0000-0000-C000-000000000046}
// *********************************************************************//
  MenusDisp = dispinterface
    ['{00020865-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(const Caption: WideString; Before: OleVariant; Restore: OleVariant): Menu; dispid 181;
    property Count: Integer readonly dispid 118;
    property _Default[Index: OleVariant]: Menu readonly dispid 0; default;
    property Item[Index: OleVariant]: Menu readonly dispid 170;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

// *********************************************************************//
// DispIntf:  Menu
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020866-0000-0000-C000-000000000046}
// *********************************************************************//
  Menu = dispinterface
    ['{00020866-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Caption: WideString dispid 139;
    procedure Delete; dispid 117;
    property Enabled: WordBool dispid 600;
    property Index: Integer readonly dispid 486;
    property MenuItems: MenuItems readonly dispid 593;
  end;

// *********************************************************************//
// DispIntf:  MenuItems
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020867-0000-0000-C000-000000000046}
// *********************************************************************//
  MenuItems = dispinterface
    ['{00020867-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(const Caption: WideString; OnAction: OleVariant; ShortcutKey: OleVariant; 
                 Before: OleVariant; Restore: OleVariant; StatusBar: OleVariant; 
                 HelpFile: OleVariant; HelpContextID: OleVariant): MenuItem; dispid 181;
    function AddMenu(const Caption: WideString; Before: OleVariant; Restore: OleVariant): Menu; dispid 598;
    property Count: Integer readonly dispid 118;
    property _Default[Index: OleVariant]: IDispatch readonly dispid 0; default;
    property Item[Index: OleVariant]: IDispatch readonly dispid 170;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

// *********************************************************************//
// DispIntf:  MenuItem
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020868-0000-0000-C000-000000000046}
// *********************************************************************//
  MenuItem = dispinterface
    ['{00020868-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Caption: WideString dispid 139;
    property Checked: WordBool dispid 599;
    procedure Delete; dispid 117;
    property Enabled: WordBool dispid 600;
    property HelpContextID: Integer dispid 355;
    property HelpFile: WideString dispid 360;
    property Index: Integer readonly dispid 486;
    property OnAction: WideString dispid 596;
    property StatusBar: WideString dispid 386;
  end;

// *********************************************************************//
// DispIntf:  Charts
// Flags:     (4096) Dispatchable
// GUID:      {0002086D-0000-0000-C000-000000000046}
// *********************************************************************//
  Charts = dispinterface
    ['{0002086D-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(Before: OleVariant; After: OleVariant; Count: OleVariant): Chart; dispid 181;
    procedure Copy(Before: OleVariant; After: OleVariant); dispid 551;
    property Count: Integer readonly dispid 118;
    procedure Delete; dispid 117;
    procedure _Dummy7; dispid 65543;
    property Item[Index: OleVariant]: IDispatch readonly dispid 170;
    procedure Move(Before: OleVariant; After: OleVariant); dispid 637;
    property _NewEnum: IUnknown readonly dispid -4;
    procedure PrintOut(From: OleVariant; To_: OleVariant; Copies: OleVariant; Preview: OleVariant; 
                       ActivePrinter: OleVariant; PrintToFile: OleVariant; Collate: OleVariant); dispid 905;
    procedure PrintPreview(EnableChanges: OleVariant); dispid 281;
    procedure Select(Replace: OleVariant); dispid 235;
    property HPageBreaks: HPageBreaks readonly dispid 1418;
    property VPageBreaks: VPageBreaks readonly dispid 1419;
    property Visible: OleVariant dispid 558;
    property _Default[Index: OleVariant]: IDispatch readonly dispid 0; default;
  end;

// *********************************************************************//
// DispIntf:  DrawingObjects
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002086F-0000-0000-C000-000000000046}
// *********************************************************************//
  DrawingObjects = dispinterface
    ['{0002086F-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT;
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure _Dummy3; dispid 65539;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    procedure _Dummy12; dispid 65548;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    procedure _Dummy15; dispid 65551;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    procedure _Dummy22; dispid 65558;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Accelerator: OleVariant dispid 846;
    procedure _Dummy28; dispid 65564;
    property AddIndent: WordBool dispid 1063;
    procedure AddItem(Text: OleVariant; Index: OleVariant); dispid 851;
    property ArrowHeadLength: OleVariant dispid 611;
    property ArrowHeadStyle: OleVariant dispid 612;
    property ArrowHeadWidth: OleVariant dispid 613;
    property AutoSize: WordBool dispid 614;
    property Border: Border readonly dispid 128;
    property CancelButton: WordBool dispid 858;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    property _Default: Integer dispid 0;
    property DefaultButton: WordBool dispid 857;
    property DismissButton: WordBool dispid 859;
    property Display3DShading: WordBool dispid 1122;
    property DisplayVerticalScrollBar: WordBool dispid 922;
    property DropDownLines: Integer dispid 848;
    property Font: Font readonly dispid 146;
    procedure _Dummy47; dispid 65583;
    property HelpButton: WordBool dispid 860;
    property HorizontalAlignment: OleVariant dispid 136;
    property InputType: Integer dispid 854;
    property Interior: Interior readonly dispid 129;
    property LargeChange: Integer dispid 845;
    property LinkedCell: WideString dispid 1058;
    procedure _Dummy54; dispid 65590;
    function List(Index: OleVariant): OleVariant; dispid 861;
    procedure _Dummy56; dispid 65592;
    property ListFillRange: WideString dispid 847;
    property ListIndex: Integer dispid 850;
    property LockedText: WordBool dispid 616;
    property Max: Integer dispid 842;
    property Min: Integer dispid 843;
    property MultiLine: WordBool dispid 855;
    property MultiSelect: WordBool dispid 32;
    property Orientation: OleVariant dispid 134;
    property PhoneticAccelerator: OleVariant dispid 1121;
    procedure RemoveAllItems; dispid 853;
    procedure RemoveItem(Index: Integer; Count: OleVariant); dispid 852;
    procedure Reshape(Vertex: Integer; Insert: OleVariant; Left: OleVariant; Top: OleVariant); dispid 604;
    property RoundedCorners: WordBool dispid 619;
    function Selected(Index: OleVariant): OleVariant; dispid 1123;
    property Shadow: WordBool dispid 103;
    property SmallChange: Integer dispid 844;
    property Text: WideString dispid 138;
    function Ungroup: IDispatch; dispid 244;
    property Value: Integer dispid 6;
    property VerticalAlignment: OleVariant dispid 137;
    function Vertices(Index1: OleVariant; Index2: OleVariant): OleVariant; dispid 621;
    property ReadingOrder: Integer dispid 975;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function Group: GroupObject; dispid 46;
    procedure LinkCombo(Link: OleVariant); dispid 856;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  PivotCache
// Flags:     (4096) Dispatchable
// GUID:      {0002441C-0000-0000-C000-000000000046}
// *********************************************************************//
  PivotCache = dispinterface
    ['{0002441C-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BackgroundQuery: WordBool dispid 1427;
    property Connection: OleVariant dispid 1432;
    property EnableRefresh: WordBool dispid 1477;
    property Index: Integer readonly dispid 486;
    property MemoryUsed: Integer readonly dispid 372;
    property OptimizeCache: WordBool dispid 1428;
    property RecordCount: Integer readonly dispid 1478;
    procedure Refresh; dispid 1417;
    property RefreshDate: TDateTime readonly dispid 696;
    property RefreshName: WideString readonly dispid 697;
    property RefreshOnFileOpen: WordBool dispid 1479;
    property Sql: OleVariant dispid 1480;
    property SavePassword: WordBool dispid 1481;
    property SourceData: OleVariant dispid 686;
  end;

// *********************************************************************//
// DispIntf:  PivotCaches
// Flags:     (4096) Dispatchable
// GUID:      {0002441D-0000-0000-C000-000000000046}
// *********************************************************************//
  PivotCaches = dispinterface
    ['{0002441D-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): PivotCache; dispid 170;
    property _Default[Index: OleVariant]: PivotCache readonly dispid 0; default;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  PivotFormula
// Flags:     (4096) Dispatchable
// GUID:      {0002441E-0000-0000-C000-000000000046}
// *********************************************************************//
  PivotFormula = dispinterface
    ['{0002441E-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant;
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Delete; dispid 117;
    property _Default: WideString dispid 0;
    property Formula: WideString dispid 261;
    property Value: WideString dispid 6;
    property Index: Integer dispid 486;
  end;

// *********************************************************************//
// DispIntf:  PivotFormulas
// Flags:     (4096) Dispatchable
// GUID:      {0002441F-0000-0000-C000-000000000046}
// *********************************************************************//
  PivotFormulas = dispinterface
    ['{0002441F-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Add(const Formula: WideString): PivotFormula; dispid 181;
    function Item(Index: OleVariant): PivotFormula; dispid 170;
    property _Default[Index: OleVariant]: PivotFormula readonly dispid 0; default;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  PivotTable
// Flags:     (4096) Dispatchable
// GUID:      {00020872-0000-0000-C000-000000000046}
// *********************************************************************//
  PivotTable = dispinterface
    ['{00020872-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure AddFields(RowFields: OleVariant; ColumnFields: OleVariant; PageFields: OleVariant; 
                        AddToTable: OleVariant); dispid 708;
    property ColumnFields[Index: OleVariant]: IDispatch readonly dispid 713;
    property ColumnGrand: WordBool dispid 694;
    property ColumnRange: Range readonly dispid 702;
    procedure ShowPages(PageField: OleVariant); dispid 706;
    property DataBodyRange: Range readonly dispid 705;
    property DataFields[Index: OleVariant]: IDispatch readonly dispid 715;
    property DataLabelRange: Range readonly dispid 704;
    property _Default: WideString dispid 0;
    property HasAutoFormat: WordBool dispid 695;
    property HiddenFields[Index: OleVariant]: IDispatch readonly dispid 711;
    property InnerDetail: WideString dispid 698;
    property Name: WideString dispid 110;
    property PageFields[Index: OleVariant]: IDispatch readonly dispid 714;
    property PageRange: Range readonly dispid 703;
    property PageRangeCells: Range readonly dispid 1482;
    function PivotFields(Index: OleVariant): IDispatch; dispid 718;
    property RefreshDate: TDateTime readonly dispid 696;
    property RefreshName: WideString readonly dispid 697;
    function RefreshTable: WordBool; dispid 717;
    property RowFields[Index: OleVariant]: IDispatch readonly dispid 712;
    property RowGrand: WordBool dispid 693;
    property RowRange: Range readonly dispid 701;
    property SaveData: WordBool dispid 692;
    property SourceData: OleVariant dispid 686;
    property TableRange1: Range readonly dispid 699;
    property TableRange2: Range readonly dispid 700;
    property Value: WideString dispid 6;
    property VisibleFields[Index: OleVariant]: IDispatch readonly dispid 710;
    property CacheIndex: Integer dispid 1483;
    function CalculatedFields: CalculatedFields; dispid 1484;
    property DisplayErrorString: WordBool dispid 1485;
    property DisplayNullString: WordBool dispid 1486;
    property EnableDrilldown: WordBool dispid 1487;
    property EnableFieldDialog: WordBool dispid 1488;
    property EnableWizard: WordBool dispid 1489;
    property ErrorString: WideString dispid 1490;
    function GetData(const Name: WideString): Double; dispid 1491;
    procedure ListFormulas; dispid 1492;
    property ManualUpdate: WordBool dispid 1493;
    property MergeLabels: WordBool dispid 1494;
    property NullString: WideString dispid 1495;
    function PivotCache: PivotCache; dispid 1496;
    function PivotFormulas: PivotFormulas; dispid 1497;
    procedure PivotTableWizard(SourceType: OleVariant; SourceData: OleVariant; 
                               TableDestination: OleVariant; TableName: OleVariant; 
                               RowGrand: OleVariant; ColumnGrand: OleVariant; SaveData: OleVariant; 
                               HasAutoFormat: OleVariant; AutoPage: OleVariant; 
                               Reserved: OleVariant; BackgroundQuery: OleVariant; 
                               OptimizeCache: OleVariant; PageFieldOrder: OleVariant; 
                               PageFieldWrapCount: OleVariant; ReadData: OleVariant; 
                               Connection: OleVariant); dispid 684;
    property SubtotalHiddenPageItems: WordBool dispid 1498;
    property PageFieldOrder: Integer dispid 1429;
    property PageFieldStyle: WideString dispid 1499;
    property PageFieldWrapCount: Integer dispid 1430;
    property PreserveFormatting: WordBool dispid 1500;
    procedure PivotSelect(const Name: WideString; Mode: XlPTSelectionMode); dispid 1501;
    property PivotSelection: WideString dispid 1502;
    property SelectionMode: XlPTSelectionMode dispid 1503;
    property TableStyle: WideString dispid 1504;
    property Tag: WideString dispid 1505;
    procedure Update; dispid 680;
    property VacatedStyle: WideString dispid 1506;
  end;

// *********************************************************************//
// DispIntf:  PivotTables
// Flags:     (4096) Dispatchable
// GUID:      {00020873-0000-0000-C000-000000000046}
// *********************************************************************//
  PivotTables = dispinterface
    ['{00020873-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): PivotTable; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  PivotField
// Flags:     (4096) Dispatchable
// GUID:      {00020874-0000-0000-C000-000000000046}
// *********************************************************************//
  PivotField = dispinterface
    ['{00020874-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: PivotTable readonly dispid 150;
    property Calculation: XlPivotFieldCalculation dispid 316;
    property ChildField: PivotField readonly dispid 736;
    property ChildItems[Index: OleVariant]: OleVariant readonly dispid 730;
    property CurrentPage: WideString dispid 738;
    property DataRange: Range readonly dispid 720;
    property DataType: XlPivotFieldDataType readonly dispid 722;
    property _Default: WideString dispid 0;
    property Function_: XlConsolidationFunction dispid 899;
    property GroupLevel: OleVariant readonly dispid 723;
    property HiddenItems[Index: OleVariant]: OleVariant readonly dispid 728;
    property LabelRange: Range readonly dispid 719;
    property Name: WideString dispid 110;
    property NumberFormat: WideString dispid 193;
    property Orientation: XlPivotFieldOrientation dispid 134;
    property ShowAllItems: WordBool dispid 452;
    property ParentField: PivotField readonly dispid 732;
    property ParentItems[Index: OleVariant]: OleVariant readonly dispid 729;
    function PivotItems(Index: OleVariant): OleVariant; dispid 737;
    property Position: OleVariant dispid 133;
    property SourceName: WideString readonly dispid 721;
    function Subtotals(Index: OleVariant): OleVariant; dispid 733;
    property BaseField: OleVariant dispid 734;
    property BaseItem: OleVariant dispid 735;
    property TotalLevels: OleVariant readonly dispid 724;
    property Value: WideString dispid 6;
    property VisibleItems[Index: OleVariant]: OleVariant readonly dispid 727;
    function CalculatedItems: CalculatedItems; dispid 1507;
    procedure Delete; dispid 117;
    property DragToColumn: WordBool dispid 1508;
    property DragToHide: WordBool dispid 1509;
    property DragToPage: WordBool dispid 1510;
    property DragToRow: WordBool dispid 1511;
    property Formula: WideString dispid 261;
    property IsCalculated: WordBool readonly dispid 1512;
    property MemoryUsed: Integer readonly dispid 372;
    property ServerBased: WordBool dispid 1513;
    procedure AutoSort(Order: Integer; const Field: WideString); dispid 1514;
    procedure AutoShow(Type_: Integer; Range: Integer; Count: Integer; const Field: WideString); dispid 1515;
    property AutoSortOrder: Integer readonly dispid 1516;
    property AutoSortField: WideString readonly dispid 1517;
    property AutoShowType: Integer readonly dispid 1518;
    property AutoShowRange: Integer readonly dispid 1519;
    property AutoShowCount: Integer readonly dispid 1520;
    property AutoShowField: WideString readonly dispid 1521;
  end;

// *********************************************************************//
// DispIntf:  PivotFields
// Flags:     (4096) Dispatchable
// GUID:      {00020875-0000-0000-C000-000000000046}
// *********************************************************************//
  PivotFields = dispinterface
    ['{00020875-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: PivotTable readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  CalculatedFields
// Flags:     (4096) Dispatchable
// GUID:      {00024420-0000-0000-C000-000000000046}
// *********************************************************************//
  CalculatedFields = dispinterface
    ['{00024420-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Add(const Name: WideString; const Formula: WideString): PivotField; dispid 181;
    function Item(Index: OleVariant): PivotField; dispid 170;
    property _Default[Field: OleVariant]: PivotField readonly dispid 0; default;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  PivotItem
// Flags:     (4096) Dispatchable
// GUID:      {00020876-0000-0000-C000-000000000046}
// *********************************************************************//
  PivotItem = dispinterface
    ['{00020876-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant;
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: PivotField readonly dispid 150;
    property ChildItems[Index: OleVariant]: OleVariant readonly dispid 730;
    property DataRange: Range readonly dispid 720;
    property _Default: WideString dispid 0;
    property LabelRange: Range readonly dispid 719;
    property Name: WideString dispid 110;
    property ParentItem: PivotItem readonly dispid 741;
    property ParentShowDetail: WordBool readonly dispid 739;
    property Position: Integer dispid 133;
    property ShowDetail: WordBool dispid 585;
    property SourceName: OleVariant readonly dispid 721;
    property Value: WideString dispid 6;
    property Visible: WordBool dispid 558;
    procedure Delete; dispid 117;
    property IsCalculated: WordBool readonly dispid 1512;
    property RecordCount: Integer readonly dispid 1478;
    property Formula: WideString dispid 261;
  end;

// *********************************************************************//
// DispIntf:  PivotItems
// Flags:     (4096) Dispatchable
// GUID:      {00020877-0000-0000-C000-000000000046}
// *********************************************************************//
  PivotItems = dispinterface
    ['{00020877-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: PivotField readonly dispid 150;
    procedure Add(const Name: WideString); dispid 181;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  CalculatedItems
// Flags:     (4096) Dispatchable
// GUID:      {00024421-0000-0000-C000-000000000046}
// *********************************************************************//
  CalculatedItems = dispinterface
    ['{00024421-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Add(const Name: WideString; const Formula: WideString): PivotItem; dispid 181;
    function Item(Index: OleVariant): PivotItem; dispid 170;
    property _Default[Field: OleVariant]: PivotItem readonly dispid 0; default;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  Characters
// Flags:     (4096) Dispatchable
// GUID:      {00020878-0000-0000-C000-000000000046}
// *********************************************************************//
  Characters = dispinterface
    ['{00020878-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Caption: WideString dispid 139;
    property Count: Integer readonly dispid 118;
    procedure Delete; dispid 117;
    property Font: Font readonly dispid 146;
    procedure Insert(const String_: WideString); dispid 252;
    property Text: WideString dispid 138;
    property PhoneticCharacters: WideString dispid 1522;
  end;

// *********************************************************************//
// DispIntf:  Dialogs
// Flags:     (4096) Dispatchable
// GUID:      {00020879-0000-0000-C000-000000000046}
// *********************************************************************//
  Dialogs = dispinterface
    ['{00020879-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    property Item[Index: XlBuiltInDialog]: Dialog readonly dispid 170;
    property _Default[Index: XlBuiltInDialog]: Dialog readonly dispid 0; default;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

// *********************************************************************//
// DispIntf:  Dialog
// Flags:     (4096) Dispatchable
// GUID:      {0002087A-0000-0000-C000-000000000046}
// *********************************************************************//
  Dialog = dispinterface
    ['{0002087A-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Show(Arg1: OleVariant; Arg2: OleVariant; Arg3: OleVariant; Arg4: OleVariant; 
                  Arg5: OleVariant; Arg6: OleVariant; Arg7: OleVariant; Arg8: OleVariant; 
                  Arg9: OleVariant; Arg10: OleVariant; Arg11: OleVariant; Arg12: OleVariant; 
                  Arg13: OleVariant; Arg14: OleVariant; Arg15: OleVariant; Arg16: OleVariant; 
                  Arg17: OleVariant; Arg18: OleVariant; Arg19: OleVariant; Arg20: OleVariant; 
                  Arg21: OleVariant; Arg22: OleVariant; Arg23: OleVariant; Arg24: OleVariant; 
                  Arg25: OleVariant; Arg26: OleVariant; Arg27: OleVariant; Arg28: OleVariant; 
                  Arg29: OleVariant; Arg30: OleVariant): WordBool; dispid 496;
  end;

// *********************************************************************//
// DispIntf:  SoundNote
// Flags:     (4096) Dispatchable
// GUID:      {0002087B-0000-0000-C000-000000000046}
// *********************************************************************//
  SoundNote = dispinterface
    ['{0002087B-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Delete; dispid 117;
    procedure Import(const Filename: WideString); dispid 917;
    procedure Play; dispid 918;
    procedure Record_; dispid 919;
  end;

// *********************************************************************//
// DispIntf:  Button
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002087D-0000-0000-C000-000000000046}
// *********************************************************************//
  Button = dispinterface
    ['{0002087D-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant;
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property AddIndent: WordBool dispid 1063;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoSize: WordBool dispid 614;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    property Font: Font readonly dispid 146;
    property Formula: WideString dispid 261;
    property HorizontalAlignment: OleVariant dispid 136;
    property LockedText: WordBool dispid 616;
    property Orientation: OleVariant dispid 134;
    property Text: WideString dispid 138;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property Accelerator: OleVariant dispid 846;
    property CancelButton: WordBool dispid 858;
    property DefaultButton: WordBool dispid 857;
    property DismissButton: WordBool dispid 859;
    property HelpButton: WordBool dispid 860;
    property PhoneticAccelerator: OleVariant dispid 1121;
  end;

// *********************************************************************//
// DispIntf:  Buttons
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002087E-0000-0000-C000-000000000046}
// *********************************************************************//
  ButtonsDisp = dispinterface
    ['{0002087E-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure _Dummy3; dispid 65539;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    procedure _Dummy12; dispid 65548;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    procedure _Dummy15; dispid 65551;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    procedure _Dummy22; dispid 65558;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property AddIndent: WordBool dispid 1063;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoSize: WordBool dispid 614;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    property Font: Font readonly dispid 146;
    property Formula: WideString dispid 261;
    property HorizontalAlignment: OleVariant dispid 136;
    property LockedText: WordBool dispid 616;
    property Orientation: OleVariant dispid 134;
    property Text: WideString dispid 138;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property Accelerator: OleVariant dispid 846;
    property CancelButton: WordBool dispid 858;
    property DefaultButton: WordBool dispid 857;
    property DismissButton: WordBool dispid 859;
    property HelpButton: WordBool dispid 860;
    property PhoneticAccelerator: OleVariant dispid 1121;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): Button; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  CheckBox
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002087F-0000-0000-C000-000000000046}
// *********************************************************************//
  CheckBox = dispinterface
    ['{0002087F-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    property LockedText: WordBool dispid 616;
    property Text: WideString dispid 138;
    property Accelerator: OleVariant dispid 846;
    property Border: Border readonly dispid 128;
    property _Default: Integer dispid 0;
    property Display3DShading: WordBool dispid 1122;
    property Interior: Interior readonly dispid 129;
    property LinkedCell: WideString dispid 1058;
    property PhoneticAccelerator: OleVariant dispid 1121;
    property Value: OleVariant dispid 6;
  end;

// *********************************************************************//
// DispIntf:  CheckBoxes
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020880-0000-0000-C000-000000000046}
// *********************************************************************//
  CheckBoxes = dispinterface
    ['{00020880-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure _Dummy3; dispid 65539;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    procedure _Dummy12; dispid 65548;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    procedure _Dummy15; dispid 65551;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    procedure _Dummy22; dispid 65558;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    property LockedText: WordBool dispid 616;
    property Text: WideString dispid 138;
    property Accelerator: OleVariant dispid 846;
    property Border: Border readonly dispid 128;
    property _Default: Integer dispid 0;
    property Display3DShading: WordBool dispid 1122;
    property Interior: Interior readonly dispid 129;
    property LinkedCell: WideString dispid 1058;
    property PhoneticAccelerator: OleVariant dispid 1121;
    property Value: OleVariant dispid 6;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): CheckBox; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  OptionButton
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020881-0000-0000-C000-000000000046}
// *********************************************************************//
  OptionButton = dispinterface
    ['{00020881-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    property LockedText: WordBool dispid 616;
    property Text: WideString dispid 138;
    property Accelerator: OleVariant dispid 846;
    property Border: Border readonly dispid 128;
    property _Default: Integer dispid 0;
    property Display3DShading: WordBool dispid 1122;
    property Interior: Interior readonly dispid 129;
    property LinkedCell: WideString dispid 1058;
    property PhoneticAccelerator: OleVariant dispid 1121;
    property Value: OleVariant dispid 6;
    property GroupBox: GroupBox readonly dispid 833;
  end;

// *********************************************************************//
// DispIntf:  OptionButtons
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020882-0000-0000-C000-000000000046}
// *********************************************************************//
  OptionButtons = dispinterface
    ['{00020882-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure _Dummy3; dispid 65539;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    procedure _Dummy12; dispid 65548;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    procedure _Dummy15; dispid 65551;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    procedure _Dummy22; dispid 65558;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    property LockedText: WordBool dispid 616;
    property Text: WideString dispid 138;
    property Accelerator: OleVariant dispid 846;
    property Border: Border readonly dispid 128;
    property _Default: Integer dispid 0;
    property Display3DShading: WordBool dispid 1122;
    property Interior: Interior readonly dispid 129;
    property LinkedCell: WideString dispid 1058;
    property PhoneticAccelerator: OleVariant dispid 1121;
    property Value: OleVariant dispid 6;
    property GroupBox: GroupBox readonly dispid 833;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): OptionButton; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  EditBox
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020883-0000-0000-C000-000000000046}
// *********************************************************************//
  EditBox = dispinterface
    ['{00020883-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    property LockedText: WordBool dispid 616;
    property Text: WideString dispid 138;
    property DisplayVerticalScrollBar: WordBool dispid 922;
    property InputType: Integer dispid 854;
    property LinkedObject: WideString readonly dispid 862;
    property MultiLine: WordBool dispid 855;
    property PasswordEdit: WordBool dispid 1162;
  end;

// *********************************************************************//
// DispIntf:  EditBoxes
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020884-0000-0000-C000-000000000046}
// *********************************************************************//
  EditBoxes = dispinterface
    ['{00020884-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant;
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure _Dummy3; dispid 65539;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    procedure _Dummy12; dispid 65548;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    procedure _Dummy15; dispid 65551;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    procedure _Dummy22; dispid 65558;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    property LockedText: WordBool dispid 616;
    property Text: WideString dispid 138;
    property DisplayVerticalScrollBar: WordBool dispid 922;
    property InputType: Integer dispid 854;
    procedure _Dummy34; dispid 65570;
    property MultiLine: WordBool dispid 855;
    property PasswordEdit: WordBool dispid 1162;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): EditBox; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): OleVariant; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  ScrollBar
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020885-0000-0000-C000-000000000046}
// *********************************************************************//
  ScrollBar = dispinterface
    ['{00020885-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property _Default: Integer dispid 0;
    property Display3DShading: WordBool dispid 1122;
    property LinkedCell: WideString dispid 1058;
    property Max: Integer dispid 842;
    property Min: Integer dispid 843;
    property SmallChange: Integer dispid 844;
    property Value: Integer dispid 6;
    property LargeChange: Integer dispid 845;
  end;

// *********************************************************************//
// DispIntf:  ScrollBars
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020886-0000-0000-C000-000000000046}
// *********************************************************************//
  ScrollBars = dispinterface
    ['{00020886-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure _Dummy3; dispid 65539;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    procedure _Dummy12; dispid 65548;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    procedure _Dummy15; dispid 65551;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    procedure _Dummy22; dispid 65558;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property _Default: Integer dispid 0;
    property Display3DShading: WordBool dispid 1122;
    property LinkedCell: WideString dispid 1058;
    property Max: Integer dispid 842;
    property Min: Integer dispid 843;
    property SmallChange: Integer dispid 844;
    property Value: Integer dispid 6;
    property LargeChange: Integer dispid 845;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): ScrollBar; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  ListBox
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020887-0000-0000-C000-000000000046}
// *********************************************************************//
  ListBox = dispinterface
    ['{00020887-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    procedure AddItem(Text: OleVariant; Index: OleVariant); dispid 851;
    property Display3DShading: WordBool dispid 1122;
    property _Default: Integer dispid 0;
    property LinkedCell: WideString dispid 1058;
    property LinkedObject: OleVariant readonly dispid 862;
    function List(Index: OleVariant): OleVariant; dispid 861;
    property ListCount: Integer readonly dispid 849;
    property ListFillRange: WideString dispid 847;
    property ListIndex: Integer dispid 850;
    property MultiSelect: Integer dispid 32;
    procedure RemoveAllItems; dispid 853;
    procedure RemoveItem(Index: Integer; Count: OleVariant); dispid 852;
    function Selected(Index: OleVariant): OleVariant; dispid 1123;
    property Value: Integer dispid 6;
  end;

// *********************************************************************//
// DispIntf:  ListBoxes
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020888-0000-0000-C000-000000000046}
// *********************************************************************//
  ListBoxes = dispinterface
    ['{00020888-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure _Dummy3; dispid 65539;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    procedure _Dummy12; dispid 65548;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    procedure _Dummy15; dispid 65551;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    procedure _Dummy22; dispid 65558;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    procedure AddItem(Text: OleVariant; Index: OleVariant); dispid 851;
    property Display3DShading: WordBool dispid 1122;
    property _Default: Integer dispid 0;
    property LinkedCell: WideString dispid 1058;
    procedure _Dummy31; dispid 65567;
    function List(Index: OleVariant): OleVariant; dispid 861;
    procedure _Dummy33; dispid 65569;
    property ListFillRange: WideString dispid 847;
    property ListIndex: Integer dispid 850;
    property MultiSelect: Integer dispid 32;
    procedure RemoveAllItems; dispid 853;
    procedure RemoveItem(Index: Integer; Count: OleVariant); dispid 852;
    function Selected(Index: OleVariant): OleVariant; dispid 1123;
    property Value: Integer dispid 6;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): ListBox; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  GroupBox
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020889-0000-0000-C000-000000000046}
// *********************************************************************//
  GroupBox = dispinterface
    ['{00020889-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    property LockedText: WordBool dispid 616;
    property Text: WideString dispid 138;
    property Accelerator: OleVariant dispid 846;
    property Display3DShading: WordBool dispid 1122;
    property PhoneticAccelerator: OleVariant dispid 1121;
  end;

// *********************************************************************//
// DispIntf:  GroupBoxes
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002088A-0000-0000-C000-000000000046}
// *********************************************************************//
  GroupBoxes = dispinterface
    ['{0002088A-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure _Dummy3; dispid 65539;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    procedure _Dummy12; dispid 65548;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    procedure _Dummy15; dispid 65551;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    procedure _Dummy22; dispid 65558;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    property LockedText: WordBool dispid 616;
    property Text: WideString dispid 138;
    property Accelerator: OleVariant dispid 846;
    property Display3DShading: WordBool dispid 1122;
    property PhoneticAccelerator: OleVariant dispid 1121;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): GroupBox; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  DropDown
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002088B-0000-0000-C000-000000000046}
// *********************************************************************//
  DropDown = dispinterface
    ['{0002088B-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    procedure AddItem(Text: OleVariant; Index: OleVariant); dispid 851;
    property Display3DShading: WordBool dispid 1122;
    property _Default: Integer dispid 0;
    property LinkedCell: WideString dispid 1058;
    property LinkedObject: OleVariant readonly dispid 862;
    function List(Index: OleVariant): OleVariant; dispid 861;
    property ListCount: Integer readonly dispid 849;
    property ListFillRange: WideString dispid 847;
    property ListIndex: Integer dispid 850;
    procedure _Dummy36; dispid 65572;
    procedure RemoveAllItems; dispid 853;
    procedure RemoveItem(Index: Integer; Count: OleVariant); dispid 852;
    function Selected(Index: OleVariant): OleVariant; dispid 1123;
    property Value: Integer dispid 6;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    property DropDownLines: Integer dispid 848;
    property Text: WideString dispid 138;
  end;

// *********************************************************************//
// DispIntf:  DropDowns
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002088C-0000-0000-C000-000000000046}
// *********************************************************************//
  DropDowns = dispinterface
    ['{0002088C-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure _Dummy3; dispid 65539;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    procedure _Dummy12; dispid 65548;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    procedure _Dummy15; dispid 65551;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    procedure _Dummy22; dispid 65558;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    procedure AddItem(Text: OleVariant; Index: OleVariant); dispid 851;
    property Display3DShading: WordBool dispid 1122;
    property _Default: Integer dispid 0;
    property LinkedCell: WideString dispid 1058;
    procedure _Dummy31; dispid 65567;
    function List(Index: OleVariant): OleVariant; dispid 861;
    procedure _Dummy33; dispid 65569;
    property ListFillRange: WideString dispid 847;
    property ListIndex: Integer dispid 850;
    procedure _Dummy36; dispid 65572;
    procedure RemoveAllItems; dispid 853;
    procedure RemoveItem(Index: Integer; Count: OleVariant); dispid 852;
    function Selected(Index: OleVariant): OleVariant; dispid 1123;
    property Value: Integer dispid 6;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    property DropDownLines: Integer dispid 848;
    property Text: WideString dispid 138;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double; Editable: OleVariant): DropDown; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  Spinner
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002088D-0000-0000-C000-000000000046}
// *********************************************************************//
  Spinner = dispinterface
    ['{0002088D-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property _Default: Integer dispid 0;
    property Display3DShading: WordBool dispid 1122;
    property LinkedCell: WideString dispid 1058;
    property Max: Integer dispid 842;
    property Min: Integer dispid 843;
    property SmallChange: Integer dispid 844;
    property Value: Integer dispid 6;
  end;

// *********************************************************************//
// DispIntf:  Spinners
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002088E-0000-0000-C000-000000000046}
// *********************************************************************//
  Spinners = dispinterface
    ['{0002088E-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure _Dummy3; dispid 65539;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    procedure _Dummy12; dispid 65548;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    procedure _Dummy15; dispid 65551;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    procedure _Dummy22; dispid 65558;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property _Default: Integer dispid 0;
    property Display3DShading: WordBool dispid 1122;
    property LinkedCell: WideString dispid 1058;
    property Max: Integer dispid 842;
    property Min: Integer dispid 843;
    property SmallChange: Integer dispid 844;
    property Value: Integer dispid 6;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): Spinner; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  DialogFrame
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002088F-0000-0000-C000-000000000046}
// *********************************************************************//
  DialogFrame = dispinterface
    ['{0002088F-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant;
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure _Dummy3; dispid 65539;
    procedure _Dummy4; dispid 65540;
    procedure _Dummy5; dispid 65541;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure _Dummy7; dispid 65543;
    procedure _Dummy8; dispid 65544;
    procedure _Dummy9; dispid 65545;
    procedure _Dummy10; dispid 65546;
    property Height: Double dispid 123;
    procedure _Dummy12; dispid 65548;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    procedure _Dummy17; dispid 65553;
    procedure _Dummy18; dispid 65554;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure _Dummy20; dispid 65556;
    property Top: Double dispid 126;
    procedure _Dummy22; dispid 65558;
    procedure _Dummy23; dispid 65559;
    property Width: Double dispid 122;
    procedure _Dummy25; dispid 65561;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    property LockedText: WordBool dispid 616;
    property Text: WideString dispid 138;
  end;

// *********************************************************************//
// DispIntf:  Label_
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020890-0000-0000-C000-000000000046}
// *********************************************************************//
  Label_ = dispinterface
    ['{00020890-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    property LockedText: WordBool dispid 616;
    property Text: WideString dispid 138;
    property Accelerator: OleVariant dispid 846;
    procedure _Dummy33; dispid 65569;
    property PhoneticAccelerator: OleVariant dispid 1121;
  end;

// *********************************************************************//
// DispIntf:  Labels
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020891-0000-0000-C000-000000000046}
// *********************************************************************//
  Labels = dispinterface
    ['{00020891-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure _Dummy3; dispid 65539;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    procedure _Dummy12; dispid 65548;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    procedure _Dummy15; dispid 65551;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    procedure _Dummy22; dispid 65558;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    property LockedText: WordBool dispid 616;
    property Text: WideString dispid 138;
    property Accelerator: OleVariant dispid 846;
    procedure _Dummy33; dispid 65569;
    property PhoneticAccelerator: OleVariant dispid 1121;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): Label_; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  Panes
// Flags:     (4096) Dispatchable
// GUID:      {00020894-0000-0000-C000-000000000046}
// *********************************************************************//
  Panes = dispinterface
    ['{00020894-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    property Item[Index: Integer]: Pane readonly dispid 170;
    property _Default[Index: Integer]: Pane readonly dispid 0; default;
  end;

// *********************************************************************//
// DispIntf:  Pane
// Flags:     (4096) Dispatchable
// GUID:      {00020895-0000-0000-C000-000000000046}
// *********************************************************************//
  Pane = dispinterface
    ['{00020895-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Activate; dispid 304;
    property Index: Integer readonly dispid 486;
    procedure LargeScroll(Down: OleVariant; Up: OleVariant; ToRight: OleVariant; ToLeft: OleVariant); dispid 547;
    property ScrollColumn: Integer dispid 654;
    property ScrollRow: Integer dispid 655;
    procedure SmallScroll(Down: OleVariant; Up: OleVariant; ToRight: OleVariant; ToLeft: OleVariant); dispid 548;
    property VisibleRange: Range readonly dispid 1118;
  end;

// *********************************************************************//
// DispIntf:  Scenarios
// Flags:     (4096) Dispatchable
// GUID:      {00020896-0000-0000-C000-000000000046}
// *********************************************************************//
  Scenarios = dispinterface
    ['{00020896-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(const Name: WideString; ChangingCells: OleVariant; Values: OleVariant; 
                 Comment: OleVariant; Locked: OleVariant; Hidden: OleVariant): Scenario; dispid 181;
    property Count: Integer readonly dispid 118;
    procedure CreateSummary(ReportType: XlSummaryReportType; ResultCells: OleVariant); dispid 913;
    function Item(Index: OleVariant): Scenario; dispid 170;
    procedure Merge(Source: OleVariant); dispid 564;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  Scenario
// Flags:     (4096) Dispatchable
// GUID:      {00020897-0000-0000-C000-000000000046}
// *********************************************************************//
  Scenario = dispinterface
    ['{00020897-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure ChangeScenario(ChangingCells: OleVariant; Values: OleVariant); dispid 912;
    property ChangingCells: Range readonly dispid 911;
    property Comment: WideString dispid 910;
    procedure Delete; dispid 117;
    property Hidden: WordBool dispid 268;
    property Index: Integer readonly dispid 486;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    procedure Show; dispid 496;
    property Values[Index: OleVariant]: OleVariant readonly dispid 164;
  end;

// *********************************************************************//
// DispIntf:  GroupObject
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020898-0000-0000-C000-000000000046}
// *********************************************************************//
  GroupObject = dispinterface
    ['{00020898-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    procedure _Dummy27; dispid 65563;
    procedure _Dummy28; dispid 65564;
    property AddIndent: WordBool dispid 1063;
    procedure _Dummy30; dispid 65566;
    property ArrowHeadLength: OleVariant dispid 611;
    property ArrowHeadStyle: OleVariant dispid 612;
    property ArrowHeadWidth: OleVariant dispid 613;
    property AutoSize: WordBool dispid 614;
    property Border: Border readonly dispid 128;
    procedure _Dummy36; dispid 65572;
    procedure _Dummy37; dispid 65573;
    procedure _Dummy38; dispid 65574;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    property _Default: Integer dispid 0;
    procedure _Dummy41; dispid 65577;
    procedure _Dummy42; dispid 65578;
    procedure _Dummy43; dispid 65579;
    procedure _Dummy44; dispid 65580;
    procedure _Dummy45; dispid 65581;
    property Font: Font readonly dispid 146;
    procedure _Dummy47; dispid 65583;
    procedure _Dummy48; dispid 65584;
    property HorizontalAlignment: OleVariant dispid 136;
    procedure _Dummy50; dispid 65586;
    property Interior: Interior readonly dispid 129;
    procedure _Dummy52; dispid 65588;
    procedure _Dummy53; dispid 65589;
    procedure _Dummy54; dispid 65590;
    procedure _Dummy55; dispid 65591;
    procedure _Dummy56; dispid 65592;
    procedure _Dummy57; dispid 65593;
    procedure _Dummy58; dispid 65594;
    procedure _Dummy59; dispid 65595;
    procedure _Dummy60; dispid 65596;
    procedure _Dummy61; dispid 65597;
    procedure _Dummy62; dispid 65598;
    procedure _Dummy63; dispid 65599;
    property Orientation: OleVariant dispid 134;
    procedure _Dummy65; dispid 65601;
    procedure _Dummy66; dispid 65602;
    procedure _Dummy67; dispid 65603;
    procedure _Dummy68; dispid 65604;
    property RoundedCorners: WordBool dispid 619;
    procedure _Dummy70; dispid 65606;
    property Shadow: WordBool dispid 103;
    procedure _Dummy72; dispid 65608;
    procedure _Dummy73; dispid 65609;
    function Ungroup: IDispatch; dispid 244;
    procedure _Dummy75; dispid 65611;
    property VerticalAlignment: OleVariant dispid 137;
    procedure _Dummy77; dispid 65613;
    property ReadingOrder: Integer dispid 975;
  end;

// *********************************************************************//
// DispIntf:  GroupObjects
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00020899-0000-0000-C000-000000000046}
// *********************************************************************//
  GroupObjects = dispinterface
    ['{00020899-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure _Dummy3; dispid 65539;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    procedure _Dummy12; dispid 65548;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    procedure _Dummy15; dispid 65551;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    procedure _Dummy22; dispid 65558;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    procedure _Dummy27; dispid 65563;
    procedure _Dummy28; dispid 65564;
    property AddIndent: WordBool dispid 1063;
    procedure _Dummy30; dispid 65566;
    property ArrowHeadLength: OleVariant dispid 611;
    property ArrowHeadStyle: OleVariant dispid 612;
    property ArrowHeadWidth: OleVariant dispid 613;
    property AutoSize: WordBool dispid 614;
    property Border: Border readonly dispid 128;
    procedure _Dummy36; dispid 65572;
    procedure _Dummy37; dispid 65573;
    procedure _Dummy38; dispid 65574;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    property _Default: Integer dispid 0;
    procedure _Dummy41; dispid 65577;
    procedure _Dummy42; dispid 65578;
    procedure _Dummy43; dispid 65579;
    procedure _Dummy44; dispid 65580;
    procedure _Dummy45; dispid 65581;
    property Font: Font readonly dispid 146;
    procedure _Dummy47; dispid 65583;
    procedure _Dummy48; dispid 65584;
    property HorizontalAlignment: OleVariant dispid 136;
    procedure _Dummy50; dispid 65586;
    property Interior: Interior readonly dispid 129;
    procedure _Dummy52; dispid 65588;
    procedure _Dummy53; dispid 65589;
    procedure _Dummy54; dispid 65590;
    procedure _Dummy55; dispid 65591;
    procedure _Dummy56; dispid 65592;
    procedure _Dummy57; dispid 65593;
    procedure _Dummy58; dispid 65594;
    procedure _Dummy59; dispid 65595;
    procedure _Dummy60; dispid 65596;
    procedure _Dummy61; dispid 65597;
    procedure _Dummy62; dispid 65598;
    procedure _Dummy63; dispid 65599;
    property Orientation: OleVariant dispid 134;
    procedure _Dummy65; dispid 65601;
    procedure _Dummy66; dispid 65602;
    procedure _Dummy67; dispid 65603;
    procedure _Dummy68; dispid 65604;
    property RoundedCorners: WordBool dispid 619;
    procedure _Dummy70; dispid 65606;
    property Shadow: WordBool dispid 103;
    procedure _Dummy72; dispid 65608;
    procedure _Dummy73; dispid 65609;
    function Ungroup: IDispatch; dispid 244;
    procedure _Dummy75; dispid 65611;
    property VerticalAlignment: OleVariant dispid 137;
    procedure _Dummy77; dispid 65613;
    property ReadingOrder: Integer dispid 975;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  Line
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002089A-0000-0000-C000-000000000046}
// *********************************************************************//
  Line = dispinterface
    ['{0002089A-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property ArrowHeadLength: OleVariant dispid 611;
    property ArrowHeadStyle: OleVariant dispid 612;
    property ArrowHeadWidth: OleVariant dispid 613;
    property Border: Border readonly dispid 128;
  end;

// *********************************************************************//
// DispIntf:  Lines
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002089B-0000-0000-C000-000000000046}
// *********************************************************************//
  Lines = dispinterface
    ['{0002089B-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant;
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure _Dummy3; dispid 65539;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    procedure _Dummy12; dispid 65548;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    procedure _Dummy15; dispid 65551;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    procedure _Dummy22; dispid 65558;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property ArrowHeadLength: OleVariant dispid 611;
    property ArrowHeadStyle: OleVariant dispid 612;
    property ArrowHeadWidth: OleVariant dispid 613;
    property Border: Border readonly dispid 128;
    function Add(X1: Double; Y1: Double; X2: Double; Y2: Double): Line; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  Rectangle
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002089C-0000-0000-C000-000000000046}
// *********************************************************************//
  Rectangle = dispinterface
    ['{0002089C-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property AddIndent: WordBool dispid 1063;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoSize: WordBool dispid 614;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    property Font: Font readonly dispid 146;
    property Formula: WideString dispid 261;
    property HorizontalAlignment: OleVariant dispid 136;
    property LockedText: WordBool dispid 616;
    property Orientation: OleVariant dispid 134;
    property Text: WideString dispid 138;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    property Shadow: WordBool dispid 103;
    property RoundedCorners: WordBool dispid 619;
  end;

// *********************************************************************//
// DispIntf:  Rectangles
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002089D-0000-0000-C000-000000000046}
// *********************************************************************//
  Rectangles = dispinterface
    ['{0002089D-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant;
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure _Dummy3; dispid 65539;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    procedure _Dummy12; dispid 65548;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    procedure _Dummy15; dispid 65551;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    procedure _Dummy22; dispid 65558;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property AddIndent: WordBool dispid 1063;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoSize: WordBool dispid 614;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    property Font: Font readonly dispid 146;
    property Formula: WideString dispid 261;
    property HorizontalAlignment: OleVariant dispid 136;
    property LockedText: WordBool dispid 616;
    property Orientation: OleVariant dispid 134;
    property Text: WideString dispid 138;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    property Shadow: WordBool dispid 103;
    property RoundedCorners: WordBool dispid 619;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): Rectangle; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  Oval
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002089E-0000-0000-C000-000000000046}
// *********************************************************************//
  Oval = dispinterface
    ['{0002089E-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property AddIndent: WordBool dispid 1063;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoSize: WordBool dispid 614;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    property Font: Font readonly dispid 146;
    property Formula: WideString dispid 261;
    property HorizontalAlignment: OleVariant dispid 136;
    property LockedText: WordBool dispid 616;
    property Orientation: OleVariant dispid 134;
    property Text: WideString dispid 138;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    property Shadow: WordBool dispid 103;
  end;

// *********************************************************************//
// DispIntf:  Ovals
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002089F-0000-0000-C000-000000000046}
// *********************************************************************//
  Ovals = dispinterface
    ['{0002089F-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure _Dummy3; dispid 65539;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    procedure _Dummy12; dispid 65548;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    procedure _Dummy15; dispid 65551;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    procedure _Dummy22; dispid 65558;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property AddIndent: WordBool dispid 1063;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoSize: WordBool dispid 614;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    property Font: Font readonly dispid 146;
    property Formula: WideString dispid 261;
    property HorizontalAlignment: OleVariant dispid 136;
    property LockedText: WordBool dispid 616;
    property Orientation: OleVariant dispid 134;
    property Text: WideString dispid 138;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    property Shadow: WordBool dispid 103;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): Oval; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  Arc
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208A0-0000-0000-C000-000000000046}
// *********************************************************************//
  Arc = dispinterface
    ['{000208A0-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant;
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property AddIndent: WordBool dispid 1063;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoSize: WordBool dispid 614;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    property Font: Font readonly dispid 146;
    property Formula: WideString dispid 261;
    property HorizontalAlignment: OleVariant dispid 136;
    property LockedText: WordBool dispid 616;
    property Orientation: OleVariant dispid 134;
    property Text: WideString dispid 138;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    procedure _Dummy43; dispid 65579;
  end;

// *********************************************************************//
// DispIntf:  Arcs
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208A1-0000-0000-C000-000000000046}
// *********************************************************************//
  Arcs = dispinterface
    ['{000208A1-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure _Dummy3; dispid 65539;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    procedure _Dummy12; dispid 65548;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    procedure _Dummy15; dispid 65551;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    procedure _Dummy22; dispid 65558;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property AddIndent: WordBool dispid 1063;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoSize: WordBool dispid 614;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    property Font: Font readonly dispid 146;
    property Formula: WideString dispid 261;
    property HorizontalAlignment: OleVariant dispid 136;
    property LockedText: WordBool dispid 616;
    property Orientation: OleVariant dispid 134;
    property Text: WideString dispid 138;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    procedure _Dummy43; dispid 65579;
    function Add(X1: Double; Y1: Double; X2: Double; Y2: Double): Arc; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  OLEObjectEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {00024410-0000-0000-C000-000000000046}
// *********************************************************************//
  OLEObjectEvents = dispinterface
    ['{00024410-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    procedure GotFocus; dispid 1541;
    procedure LostFocus; dispid 1542;
  end;

// *********************************************************************//
// DispIntf:  _OLEObject
// Flags:     (4096) Dispatchable
// GUID:      {000208A2-0000-0000-C000-000000000046}
// *********************************************************************//
  _OLEObject = dispinterface
    ['{000208A2-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid -2147417964;
    property Creator: XlCreator readonly dispid -2147417963;
    property Parent: IDispatch readonly dispid -2147417962;
    property BottomRightCell: Range readonly dispid -2147417497;
    procedure BringToFront; dispid -2147417510;
    procedure Copy; dispid -2147417561;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid -2147417899;
    procedure Cut; dispid -2147417547;
    procedure Delete; dispid -2147417995;
    function Duplicate: IDispatch; dispid -2147417073;
    property Enabled: WordBool dispid -2147417512;
    property Height: Double dispid -2147417989;
    property Index: Integer readonly dispid -2147417626;
    property Left: Double dispid -2147417985;
    property Locked: WordBool dispid -2147417843;
    property Name: WideString dispid -2147418002;
    property OnAction: WideString dispid -2147417516;
    property Placement: OleVariant dispid -2147417495;
    property PrintObject: WordBool dispid -2147417494;
    procedure Select(Replace: OleVariant); dispid -2147417877;
    procedure SendToBack; dispid -2147417507;
    property Top: Double dispid -2147417986;
    property TopLeftCell: Range readonly dispid -2147417492;
    property Visible: WordBool dispid -2147417554;
    property Width: Double dispid -2147417990;
    property ZOrder: Integer readonly dispid -2147417490;
    property ShapeRange: ShapeRange readonly dispid -2147416584;
    property Border: Border readonly dispid -2147417984;
    property Interior: Interior readonly dispid -2147417983;
    property Shadow: WordBool dispid -2147418009;
    procedure Activate; dispid -2147417808;
    property AutoLoad: WordBool dispid -2147416926;
    property AutoUpdate: WordBool dispid -2147417064;
    property Object_: IDispatch readonly dispid -2147417063;
    property OLEType: OleVariant readonly dispid -2147417058;
    property SourceName: WideString dispid -2147417391;
    procedure Update; dispid -2147417432;
    procedure Verb(Verb: XlOLEVerb); dispid -2147417506;
    property LinkedCell: WideString dispid -2147417054;
    property ListFillRange: WideString dispid -2147417265;
    property ProgId: WideString readonly dispid -2147416589;
  end;

// *********************************************************************//
// DispIntf:  OLEObjects
// Flags:     (4096) Dispatchable
// GUID:      {000208A3-0000-0000-C000-000000000046}
// *********************************************************************//
  OLEObjects = dispinterface
    ['{000208A3-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure _Dummy3; dispid 65539;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    procedure _Dummy12; dispid 65548;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    procedure _Dummy15; dispid 65551;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    procedure _Dummy22; dispid 65558;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    property Shadow: WordBool dispid 103;
    procedure _Dummy30; dispid 65566;
    property AutoLoad: WordBool dispid 1186;
    procedure _Dummy32; dispid 65568;
    procedure _Dummy33; dispid 65569;
    procedure _Dummy34; dispid 65570;
    property SourceName: WideString dispid 721;
    procedure _Dummy36; dispid 65572;
    procedure _Dummy37; dispid 65573;
    procedure _Dummy38; dispid 65574;
    procedure _Dummy39; dispid 65575;
    procedure _Dummy40; dispid 65576;
    function Add(ClassType: OleVariant; Filename: OleVariant; Link: OleVariant;
                 DisplayAsIcon: OleVariant; IconFileName: OleVariant; IconIndex: OleVariant;
                 IconLabel: OleVariant; Left: OleVariant; Top: OleVariant; Width: OleVariant;
                 Height: OleVariant): OLEObject; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  TextBox
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208A4-0000-0000-C000-000000000046}
// *********************************************************************//
  TextBox = dispinterface
    ['{000208A4-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property AddIndent: WordBool dispid 1063;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoSize: WordBool dispid 614;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    property Font: Font readonly dispid 146;
    property Formula: WideString dispid 261;
    property HorizontalAlignment: OleVariant dispid 136;
    property LockedText: WordBool dispid 616;
    property Orientation: OleVariant dispid 134;
    property Text: WideString dispid 138;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    property RoundedCorners: WordBool dispid 619;
    property Shadow: WordBool dispid 103;
  end;

// *********************************************************************//
// DispIntf:  TextBoxes
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208A5-0000-0000-C000-000000000046}
// *********************************************************************//
  TextBoxes = dispinterface
    ['{000208A5-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure _Dummy3; dispid 65539;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    procedure _Dummy12; dispid 65548;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    procedure _Dummy15; dispid 65551;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    procedure _Dummy22; dispid 65558;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property AddIndent: WordBool dispid 1063;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoSize: WordBool dispid 614;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    property Font: Font readonly dispid 146;
    property Formula: WideString dispid 261;
    property HorizontalAlignment: OleVariant dispid 136;
    property LockedText: WordBool dispid 616;
    property Orientation: OleVariant dispid 134;
    property Text: WideString dispid 138;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    property RoundedCorners: WordBool dispid 619;
    property Shadow: WordBool dispid 103;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): TextBox; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  Picture
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208A6-0000-0000-C000-000000000046}
// *********************************************************************//
  Picture = dispinterface
    ['{000208A6-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    property Shadow: WordBool dispid 103;
    property Formula: WideString dispid 261;
  end;

// *********************************************************************//
// DispIntf:  Pictures
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208A7-0000-0000-C000-000000000046}
// *********************************************************************//
  Pictures = dispinterface
    ['{000208A7-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure _Dummy3; dispid 65539;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    procedure _Dummy12; dispid 65548;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    procedure _Dummy15; dispid 65551;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    procedure _Dummy22; dispid 65558;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    property Shadow: WordBool dispid 103;
    property Formula: WideString dispid 261;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): Picture; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Insert(const Filename: WideString; Converter: OleVariant): Picture; dispid 252;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
    function Paste(Link: OleVariant): Picture; dispid 211;
  end;

// *********************************************************************//
// DispIntf:  Drawing
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208A8-0000-0000-C000-000000000046}
// *********************************************************************//
  Drawing = dispinterface
    ['{000208A8-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property AddIndent: WordBool dispid 1063;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoSize: WordBool dispid 614;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    property Font: Font readonly dispid 146;
    property Formula: WideString dispid 261;
    property HorizontalAlignment: OleVariant dispid 136;
    property LockedText: WordBool dispid 616;
    property Orientation: OleVariant dispid 134;
    property Text: WideString dispid 138;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    property Shadow: WordBool dispid 103;
    procedure AddVertex(Left: Double; Top: Double); dispid 601;
    procedure Reshape(Vertex: Integer; Insert: WordBool; Left: OleVariant; Top: OleVariant); dispid 604;
    property Vertices[Index1: OleVariant; Index2: OleVariant]: OleVariant readonly dispid 621;
  end;

// *********************************************************************//
// DispIntf:  Drawings
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208A9-0000-0000-C000-000000000046}
// *********************************************************************//
  Drawings = dispinterface
    ['{000208A9-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure _Dummy3; dispid 65539;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    procedure _Dummy12; dispid 65548;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    procedure _Dummy15; dispid 65551;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    procedure _Dummy22; dispid 65558;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    property AddIndent: WordBool dispid 1063;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoSize: WordBool dispid 614;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    property Font: Font readonly dispid 146;
    property Formula: WideString dispid 261;
    property HorizontalAlignment: OleVariant dispid 136;
    property LockedText: WordBool dispid 616;
    property Orientation: OleVariant dispid 134;
    property Text: WideString dispid 138;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    property Shadow: WordBool dispid 103;
    procedure _Dummy44; dispid 65580;
    procedure Reshape(Vertex: Integer; Insert: WordBool; Left: OleVariant; Top: OleVariant); dispid 604;
    procedure _Dummy46; dispid 65582;
    function Add(X1: Double; Y1: Double; X2: Double; Y2: Double; Closed: WordBool): Drawing; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  RoutingSlip
// Flags:     (4096) Dispatchable
// GUID:      {000208AA-0000-0000-C000-000000000046}
// *********************************************************************//
  RoutingSlip = dispinterface
    ['{000208AA-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Delivery: XlRoutingSlipDelivery dispid 955;
    property Message: OleVariant dispid 954;
    function Recipients(Index: OleVariant): OleVariant; dispid 952;
    procedure Reset; dispid 555;
    property ReturnWhenDone: WordBool dispid 956;
    property Status: XlRoutingSlipStatus readonly dispid 958;
    property Subject: OleVariant dispid 953;
    property TrackStatus: WordBool dispid 957;
  end;

// *********************************************************************//
// DispIntf:  Outline
// Flags:     (4096) Dispatchable
// GUID:      {000208AB-0000-0000-C000-000000000046}
// *********************************************************************//
  Outline = dispinterface
    ['{000208AB-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property AutomaticStyles: WordBool dispid 959;
    procedure ShowLevels(RowLevels: OleVariant; ColumnLevels: OleVariant); dispid 960;
    property SummaryColumn: XlSummaryColumn dispid 961;
    property SummaryRow: XlSummaryRow dispid 902;
  end;

// *********************************************************************//
// DispIntf:  Module
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208AD-0000-0000-C000-000000000046}
// *********************************************************************//
  Module = dispinterface
    ['{000208AD-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT;
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Activate; dispid 304;
    procedure Copy(Before: OleVariant; After: OleVariant); dispid 551;
    procedure Delete; dispid 117;
    property CodeName: WideString readonly dispid 1373;
    property _CodeName: WideString dispid -2147418112;
    property Index: Integer readonly dispid 486;
    procedure Move(Before: OleVariant; After: OleVariant); dispid 637;
    property Name: WideString dispid 110;
    property Next: IDispatch readonly dispid 502;
    property OnDoubleClick: WideString dispid 628;
    property OnSheetActivate: WideString dispid 1031;
    property OnSheetDeactivate: WideString dispid 1081;
    property PageSetup: PageSetup readonly dispid 998;
    property Previous: IDispatch readonly dispid 503;
    procedure PrintOut(From: OleVariant; To_: OleVariant; Copies: OleVariant; Preview: OleVariant; 
                       ActivePrinter: OleVariant; PrintToFile: OleVariant; Collate: OleVariant); dispid 905;
    procedure _Dummy18; dispid 65554;
    procedure Protect(Password: OleVariant; DrawingObjects: OleVariant; Contents: OleVariant; 
                      Scenarios: OleVariant; UserInterfaceOnly: OleVariant); dispid 282;
    property ProtectContents: WordBool readonly dispid 292;
    procedure _Dummy21; dispid 65557;
    property ProtectionMode: WordBool readonly dispid 1159;
    procedure _Dummy23; dispid 65559;
    procedure SaveAs(const Filename: WideString; FileFormat: OleVariant; Password: OleVariant; 
                     WriteResPassword: OleVariant; ReadOnlyRecommended: OleVariant; 
                     CreateBackup: OleVariant; AddToMru: OleVariant; TextCodepage: OleVariant; 
                     TextVisualLayout: OleVariant); dispid 284;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure Unprotect(Password: OleVariant); dispid 285;
    property Visible: XlSheetVisibility dispid 558;
    property Shapes: Shapes readonly dispid 1377;
    procedure InsertFile(Filename: OleVariant; Merge: OleVariant); dispid 584;
  end;

// *********************************************************************//
// DispIntf:  Modules
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208AE-0000-0000-C000-000000000046}
// *********************************************************************//
  Modules = dispinterface
    ['{000208AE-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(Before: OleVariant; After: OleVariant; Count: OleVariant): Module; dispid 181;
    procedure Copy(Before: OleVariant; After: OleVariant); dispid 551;
    property Count: Integer readonly dispid 118;
    procedure Delete; dispid 117;
    procedure _Dummy7; dispid 65543;
    property Item[Index: OleVariant]: IDispatch readonly dispid 170;
    procedure Move(Before: OleVariant; After: OleVariant); dispid 637;
    property _NewEnum: IUnknown readonly dispid -4;
    procedure PrintOut(From: OleVariant; To_: OleVariant; Copies: OleVariant; Preview: OleVariant; 
                       ActivePrinter: OleVariant; PrintToFile: OleVariant; Collate: OleVariant); dispid 905;
    procedure _Dummy12; dispid 65548;
    procedure Select(Replace: OleVariant); dispid 235;
    property HPageBreaks: HPageBreaks readonly dispid 1418;
    property VPageBreaks: VPageBreaks readonly dispid 1419;
    property Visible: OleVariant dispid 558;
    property _Default[Index: OleVariant]: IDispatch readonly dispid 0; default;
  end;

// *********************************************************************//
// DispIntf:  DialogSheet
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208AF-0000-0000-C000-000000000046}
// *********************************************************************//
  DialogSheet = dispinterface
    ['{000208AF-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Activate; dispid 304;
    procedure Copy(Before: OleVariant; After: OleVariant); dispid 551;
    procedure Delete; dispid 117;
    property CodeName: WideString readonly dispid 1373;
    property _CodeName: WideString dispid -2147418112;
    property Index: Integer readonly dispid 486;
    procedure Move(Before: OleVariant; After: OleVariant); dispid 637;
    property Name: WideString dispid 110;
    property Next: IDispatch readonly dispid 502;
    property OnDoubleClick: WideString dispid 628;
    property OnSheetActivate: WideString dispid 1031;
    property OnSheetDeactivate: WideString dispid 1081;
    property PageSetup: PageSetup readonly dispid 998;
    property Previous: IDispatch readonly dispid 503;
    procedure PrintOut(From: OleVariant; To_: OleVariant; Copies: OleVariant; Preview: OleVariant; 
                       ActivePrinter: OleVariant; PrintToFile: OleVariant; Collate: OleVariant); dispid 905;
    procedure PrintPreview(EnableChanges: OleVariant); dispid 281;
    procedure Protect(Password: OleVariant; DrawingObjects: OleVariant; Contents: OleVariant; 
                      Scenarios: OleVariant; UserInterfaceOnly: OleVariant); dispid 282;
    property ProtectContents: WordBool readonly dispid 292;
    property ProtectDrawingObjects: WordBool readonly dispid 293;
    property ProtectionMode: WordBool readonly dispid 1159;
    property ProtectScenarios: WordBool readonly dispid 294;
    procedure SaveAs(const Filename: WideString; FileFormat: OleVariant; Password: OleVariant; 
                     WriteResPassword: OleVariant; ReadOnlyRecommended: OleVariant; 
                     CreateBackup: OleVariant; AddToMru: OleVariant; TextCodepage: OleVariant;
                     TextVisualLayout: OleVariant); dispid 284;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure Unprotect(Password: OleVariant); dispid 285;
    property Visible: XlSheetVisibility dispid 558;
    property Shapes: Shapes readonly dispid 1377;
    procedure _Dummy29; dispid 65565;
    function Arcs(Index: OleVariant): IDispatch; dispid 760;
    procedure _Dummy31; dispid 65567;
    procedure _Dummy32; dispid 65568;
    function Buttons(Index: OleVariant): IDispatch; dispid 557;
    procedure _Dummy34; dispid 65570;
    property EnableCalculation: WordBool dispid 1424;
    procedure _Dummy36; dispid 65572;
    function ChartObjects(Index: OleVariant): IDispatch; dispid 1060;
    function CheckBoxes(Index: OleVariant): IDispatch; dispid 824;
    procedure CheckSpelling(CustomDictionary: OleVariant; IgnoreUppercase: OleVariant; 
                            AlwaysSuggest: OleVariant; IgnoreInitialAlefHamza: OleVariant; 
                            IgnoreFinalYaa: OleVariant; SpellScript: OleVariant); dispid 505;
    procedure _Dummy40; dispid 65576;
    procedure _Dummy41; dispid 65577;
    procedure _Dummy42; dispid 65578;
    procedure _Dummy43; dispid 65579;
    procedure _Dummy44; dispid 65580;
    procedure _Dummy45; dispid 65581;
    property DisplayAutomaticPageBreaks: WordBool dispid 643;
    function Drawings(Index: OleVariant): IDispatch; dispid 772;
    function DrawingObjects(Index: OleVariant): IDispatch; dispid 88;
    function DropDowns(Index: OleVariant): IDispatch; dispid 836;
    property EnableAutoFilter: WordBool dispid 1156;
    property EnableSelection: XlEnableSelection dispid 1425;
    property EnableOutlining: WordBool dispid 1157;
    property EnablePivotTable: WordBool dispid 1158;
    function Evaluate(Name: OleVariant): OleVariant; dispid 1;
    function _Evaluate(Name: OleVariant): OleVariant; dispid -5;
    procedure _Dummy56; dispid 65592;
    procedure ResetAllPageBreaks; dispid 1426;
    function GroupBoxes(Index: OleVariant): IDispatch; dispid 834;
    function GroupObjects(Index: OleVariant): IDispatch; dispid 1113;
    function Labels(Index: OleVariant): IDispatch; dispid 841;
    function Lines(Index: OleVariant): IDispatch; dispid 767;
    function ListBoxes(Index: OleVariant): IDispatch; dispid 832;
    property Names: Names readonly dispid 442;
    function OLEObjects(Index: OleVariant): IDispatch; dispid 799;
    procedure _Dummy65; dispid 65601;
    procedure _Dummy66; dispid 65602;
    procedure _Dummy67; dispid 65603;
    function OptionButtons(Index: OleVariant): IDispatch; dispid 826;
    procedure _Dummy69; dispid 65605;
    function Ovals(Index: OleVariant): IDispatch; dispid 801;
    procedure Paste(Destination: OleVariant; Link: OleVariant); dispid 211;
    procedure PasteSpecial(Format: OleVariant; Link: OleVariant; DisplayAsIcon: OleVariant; 
                           IconFileName: OleVariant; IconIndex: OleVariant; IconLabel: OleVariant); dispid 1027;
    function Pictures(Index: OleVariant): IDispatch; dispid 771;
    procedure _Dummy74; dispid 65610;
    procedure _Dummy75; dispid 65611;
    procedure _Dummy76; dispid 65612;
    function Rectangles(Index: OleVariant): IDispatch; dispid 774;
    procedure _Dummy78; dispid 65614;
    procedure _Dummy79; dispid 65615;
    property ScrollArea: WideString dispid 1433;
    function ScrollBars(Index: OleVariant): IDispatch; dispid 830;
    procedure _Dummy82; dispid 65618;
    procedure _Dummy83; dispid 65619;
    function Spinners(Index: OleVariant): IDispatch; dispid 838;
    procedure _Dummy85; dispid 65621;
    procedure _Dummy86; dispid 65622;
    function TextBoxes(Index: OleVariant): IDispatch; dispid 777;
    procedure _Dummy88; dispid 65624;
    procedure _Dummy89; dispid 65625;
    procedure _Dummy90; dispid 65626;
    property HPageBreaks: HPageBreaks readonly dispid 1418;
    property VPageBreaks: VPageBreaks readonly dispid 1419;
    property QueryTables: QueryTables readonly dispid 1434;
    property DisplayPageBreaks: WordBool dispid 1435;
    property Comments: Comments readonly dispid 575;
    property Hyperlinks: Hyperlinks readonly dispid 1393;
    procedure ClearCircles; dispid 1436;
    procedure CircleInvalid; dispid 1437;
    property DisplayRightToLeft: Integer dispid 648;
    property AutoFilter: AutoFilter readonly dispid 793;
    property DefaultButton: OleVariant dispid 857;
    property DialogFrame: DialogFrame readonly dispid 839;
    function EditBoxes(Index: OleVariant): IDispatch; dispid 828;
    property Focus: OleVariant dispid 814;
    function Hide(Cancel: OleVariant): WordBool; dispid 813;
    function Show: WordBool; dispid 496;
  end;

// *********************************************************************//
// DispIntf:  DialogSheets
// Flags:     (4112) Hidden Dispatchable
// GUID:      {000208B0-0000-0000-C000-000000000046}
// *********************************************************************//
  DialogSheets = dispinterface
    ['{000208B0-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(Before: OleVariant; After: OleVariant; Count: OleVariant): DialogSheet; dispid 181;
    procedure Copy(Before: OleVariant; After: OleVariant); dispid 551;
    property Count: Integer readonly dispid 118;
    procedure Delete; dispid 117;
    procedure _Dummy7; dispid 65543;
    property Item[Index: OleVariant]: IDispatch readonly dispid 170;
    procedure Move(Before: OleVariant; After: OleVariant); dispid 637;
    property _NewEnum: IUnknown readonly dispid -4;
    procedure PrintOut(From: OleVariant; To_: OleVariant; Copies: OleVariant; Preview: OleVariant; 
                       ActivePrinter: OleVariant; PrintToFile: OleVariant; Collate: OleVariant); dispid 905;
    procedure PrintPreview(EnableChanges: OleVariant); dispid 281;
    procedure Select(Replace: OleVariant); dispid 235;
    property HPageBreaks: HPageBreaks readonly dispid 1418;
    property VPageBreaks: VPageBreaks readonly dispid 1419;
    property Visible: OleVariant dispid 558;
    property _Default[Index: OleVariant]: IDispatch readonly dispid 0; default;
  end;

// *********************************************************************//
// DispIntf:  Worksheets
// Flags:     (4096) Dispatchable
// GUID:      {000208B1-0000-0000-C000-000000000046}
// *********************************************************************//
  Worksheets = dispinterface
    ['{000208B1-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(Before: OleVariant; After: OleVariant; Count: OleVariant; Type_: OleVariant): IDispatch; dispid 181;
    procedure Copy(Before: OleVariant; After: OleVariant); dispid 551;
    property Count: Integer readonly dispid 118;
    procedure Delete; dispid 117;
    procedure FillAcrossSheets(const Range: Range; Type_: XlFillWith); dispid 469;
    property Item[Index: OleVariant]: IDispatch readonly dispid 170;
    procedure Move(Before: OleVariant; After: OleVariant); dispid 637;
    property _NewEnum: IUnknown readonly dispid -4;
    procedure PrintOut(From: OleVariant; To_: OleVariant; Copies: OleVariant; Preview: OleVariant; 
                       ActivePrinter: OleVariant; PrintToFile: OleVariant; Collate: OleVariant); dispid 905;
    procedure PrintPreview(EnableChanges: OleVariant); dispid 281;
    procedure Select(Replace: OleVariant); dispid 235;
    property HPageBreaks: HPageBreaks readonly dispid 1418;
    property VPageBreaks: VPageBreaks readonly dispid 1419;
    property Visible: OleVariant dispid 558;
    property _Default[Index: OleVariant]: IDispatch readonly dispid 0; default;
  end;

// *********************************************************************//
// DispIntf:  PageSetup
// Flags:     (4096) Dispatchable
// GUID:      {000208B4-0000-0000-C000-000000000046}
// *********************************************************************//
  PageSetup = dispinterface
    ['{000208B4-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BlackAndWhite: WordBool dispid 1009;
    property BottomMargin: Double dispid 1002;
    property CenterFooter: WideString dispid 1010;
    property CenterHeader: WideString dispid 1011;
    property CenterHorizontally: WordBool dispid 1005;
    property CenterVertically: WordBool dispid 1006;
    property ChartSize: XlObjectSize dispid 1012;
    property Draft: WordBool dispid 1020;
    property FirstPageNumber: Integer dispid 1008;
    property FitToPagesTall: OleVariant dispid 1013;
    property FitToPagesWide: OleVariant dispid 1014;
    property FooterMargin: Double dispid 1015;
    property HeaderMargin: Double dispid 1016;
    property LeftFooter: WideString dispid 1017;
    property LeftHeader: WideString dispid 1018;
    property LeftMargin: Double dispid 999;
    property Order: XlOrder dispid 192;
    property Orientation: XlPageOrientation dispid 134;
    property PaperSize: XlPaperSize dispid 1007;
    property PrintArea: WideString dispid 1019;
    property PrintGridlines: WordBool dispid 1004;
    property PrintHeadings: WordBool dispid 1003;
    property PrintNotes: WordBool dispid 1021;
    function PrintQuality(Index: OleVariant): OleVariant; dispid 1022;
    property PrintTitleColumns: WideString dispid 1023;
    property PrintTitleRows: WideString dispid 1024;
    property RightFooter: WideString dispid 1025;
    property RightHeader: WideString dispid 1026;
    property RightMargin: Double dispid 1000;
    property TopMargin: Double dispid 1001;
    property Zoom: OleVariant dispid 663;
    property PrintComments: XlPrintLocation dispid 1524;
  end;

// *********************************************************************//
// DispIntf:  Names
// Flags:     (4096) Dispatchable
// GUID:      {000208B8-0000-0000-C000-000000000046}
// *********************************************************************//
  Names = dispinterface
    ['{000208B8-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant;
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT;
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant;
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant;
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(Name: OleVariant; RefersTo: OleVariant; Visible: OleVariant;
                 MacroType: OleVariant; ShortcutKey: OleVariant; Category: OleVariant;
                 NameLocal: OleVariant; RefersToLocal: OleVariant; CategoryLocal: OleVariant;
                 RefersToR1C1: OleVariant; RefersToR1C1Local: OleVariant): Name; dispid 181;
    function Item(Index: OleVariant; IndexLocal: OleVariant; RefersTo: OleVariant): Name; dispid 170;
    function _Default(Index: OleVariant; IndexLocal: OleVariant; RefersTo: OleVariant): Name; dispid 0;
    property Count: Integer readonly dispid 118;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

// *********************************************************************//
// DispIntf:  Name
// Flags:     (4096) Dispatchable
// GUID:      {000208B9-0000-0000-C000-000000000046}
// *********************************************************************//
  Name = dispinterface
    ['{000208B9-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property _Default: WideString readonly dispid 0;
    property Index: Integer readonly dispid 486;
    property Category: WideString dispid 934;
    property CategoryLocal: WideString dispid 935;
    procedure Delete; dispid 117;
    property MacroType: XlXLMMacroType dispid 936;
    property Name: WideString dispid 110;
    property RefersTo: OleVariant dispid 938;
    property ShortcutKey: WideString dispid 597;
    property Value: WideString dispid 6;
    property Visible: WordBool dispid 558;
    property NameLocal: WideString dispid 937;
    property RefersToLocal: OleVariant dispid 939;
    property RefersToR1C1: OleVariant dispid 940;
    property RefersToR1C1Local: OleVariant dispid 941;
    property RefersToRange: Range readonly dispid 1160;
  end;

// *********************************************************************//
// DispIntf:  ChartObject
// Flags:     (4096) Dispatchable
// GUID:      {000208CF-0000-0000-C000-000000000046}
// *********************************************************************//
  ChartObject = dispinterface
    ['{000208CF-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BottomRightCell: Range readonly dispid 615;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    property Index: Integer readonly dispid 486;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    property Name: WideString dispid 110;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    property TopLeftCell: Range readonly dispid 620;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    property ZOrder: Integer readonly dispid 622;
    property ShapeRange: ShapeRange readonly dispid 1528;
    procedure Activate; dispid 304;
    property Chart: Chart readonly dispid 7;
    property ProtectChartObject: WordBool dispid 1529;
    property RoundedCorners: WordBool dispid 619;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    property Shadow: WordBool dispid 103;
  end;

// *********************************************************************//
// DispIntf:  ChartObjects
// Flags:     (4096) Dispatchable
// GUID:      {000208D0-0000-0000-C000-000000000046}
// *********************************************************************//
  ChartObjects = dispinterface
    ['{000208D0-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure _Dummy3; dispid 65539;
    procedure BringToFront; dispid 602;
    procedure Copy; dispid 551;
    procedure CopyPicture(Appearance: XlPictureAppearance; Format: XlCopyPictureFormat); dispid 213;
    procedure Cut; dispid 565;
    procedure Delete; dispid 117;
    function Duplicate: IDispatch; dispid 1039;
    property Enabled: WordBool dispid 600;
    property Height: Double dispid 123;
    procedure _Dummy12; dispid 65548;
    property Left: Double dispid 127;
    property Locked: WordBool dispid 269;
    procedure _Dummy15; dispid 65551;
    property OnAction: WideString dispid 596;
    property Placement: OleVariant dispid 617;
    property PrintObject: WordBool dispid 618;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SendToBack; dispid 605;
    property Top: Double dispid 126;
    procedure _Dummy22; dispid 65558;
    property Visible: WordBool dispid 558;
    property Width: Double dispid 122;
    procedure _Dummy25; dispid 65561;
    property ShapeRange: ShapeRange readonly dispid 1528;
    procedure _Dummy27; dispid 65563;
    procedure _Dummy28; dispid 65564;
    procedure _Dummy29; dispid 65565;
    property RoundedCorners: WordBool dispid 619;
    property Border: Border readonly dispid 128;
    property Interior: Interior readonly dispid 129;
    property Shadow: WordBool dispid 103;
    function Add(Left: Double; Top: Double; Width: Double; Height: Double): ChartObject; dispid 181;
    property Count: Integer readonly dispid 118;
    function Group: GroupObject; dispid 46;
    function Item(Index: OleVariant): IDispatch; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  Mailer
// Flags:     (4096) Dispatchable
// GUID:      {000208D1-0000-0000-C000-000000000046}
// *********************************************************************//
  Mailer = dispinterface
    ['{000208D1-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant;
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property BCCRecipients: OleVariant dispid 983;
    property CCRecipients: OleVariant dispid 982;
    property Enclosures: OleVariant dispid 984;
    property Received: WordBool readonly dispid 986;
    property SendDateTime: TDateTime readonly dispid 987;
    property Sender: WideString readonly dispid 988;
    property Subject: WideString dispid 953;
    property ToRecipients: OleVariant dispid 981;
    property WhichAddress: OleVariant dispid 974;
  end;

// *********************************************************************//
// DispIntf:  CustomViews
// Flags:     (4096) Dispatchable
// GUID:      {00024422-0000-0000-C000-000000000046}
// *********************************************************************//
  CustomViews = dispinterface
    ['{00024422-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(ViewName: OleVariant): CustomView; dispid 170;
    function Add(const ViewName: WideString; PrintSettings: OleVariant; RowColSettings: OleVariant): CustomView; dispid 181;
    property _Default[ViewName: OleVariant]: CustomView readonly dispid 0; default;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

// *********************************************************************//
// DispIntf:  CustomView
// Flags:     (4096) Dispatchable
// GUID:      {00024423-0000-0000-C000-000000000046}
// *********************************************************************//
  CustomView = dispinterface
    ['{00024423-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    property PrintSettings: WordBool readonly dispid 1577;
    property RowColSettings: WordBool readonly dispid 1578;
    procedure Show; dispid 496;
    procedure Delete; dispid 117;
  end;

// *********************************************************************//
// DispIntf:  FormatConditions
// Flags:     (4096) Dispatchable
// GUID:      {00024424-0000-0000-C000-000000000046}
// *********************************************************************//
  FormatConditions = dispinterface
    ['{00024424-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): FormatCondition; dispid 170;
    function Add(Type_: XlFormatConditionType; Operator: OleVariant; Formula1: OleVariant; 
                 Formula2: OleVariant): FormatCondition; dispid 181;
    property _Default[Index: OleVariant]: FormatCondition readonly dispid 0; default;
    property _NewEnum: IUnknown readonly dispid -4;
    procedure Delete; dispid 117;
  end;

// *********************************************************************//
// DispIntf:  FormatCondition
// Flags:     (4096) Dispatchable
// GUID:      {00024425-0000-0000-C000-000000000046}
// *********************************************************************//
  FormatCondition = dispinterface
    ['{00024425-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Modify(Type_: XlFormatConditionType; Operator: OleVariant; Formula1: OleVariant; 
                     Formula2: OleVariant); dispid 1581;
    property Type_: Integer readonly dispid 108;
    property Operator: Integer readonly dispid 797;
    property Formula1: WideString readonly dispid 1579;
    property Formula2: WideString readonly dispid 1580;
    property Interior: Interior readonly dispid 129;
    property Borders: Borders readonly dispid 435;
    property Font: Font readonly dispid 146;
    procedure Delete; dispid 117;
  end;

// *********************************************************************//
// DispIntf:  Comments
// Flags:     (4096) Dispatchable
// GUID:      {00024426-0000-0000-C000-000000000046}
// *********************************************************************//
  Comments = dispinterface
    ['{00024426-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(Index: Integer): Comment; dispid 170;
    property _Default[Index: Integer]: Comment readonly dispid 0; default;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

// *********************************************************************//
// DispIntf:  Comment
// Flags:     (4096) Dispatchable
// GUID:      {00024427-0000-0000-C000-000000000046}
// *********************************************************************//
  Comment = dispinterface
    ['{00024427-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Author: WideString readonly dispid 574;
    property Shape: Shape readonly dispid 1582;
    property Visible: WordBool dispid 558;
    function Text(Text: OleVariant; Start: OleVariant; Overwrite: OleVariant): WideString; dispid 138;
    procedure Delete; dispid 117;
    function Next: Comment; dispid 502;
    function Previous: Comment; dispid 503;
  end;

// *********************************************************************//
// DispIntf:  RefreshEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0002441B-0000-0000-C000-000000000046}
// *********************************************************************//
  RefreshEvents = dispinterface
    ['{0002441B-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    procedure BeforeRefresh(var Cancel: WordBool); dispid 1596;
    procedure AfterRefresh(Success: WordBool); dispid 1597;
  end;

// *********************************************************************//
// DispIntf:  _QueryTable
// Flags:     (4096) Dispatchable
// GUID:      {00024428-0000-0000-C000-000000000046}
// *********************************************************************//
  _QueryTable = dispinterface
    ['{00024428-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString dispid 110;
    property FieldNames: WordBool dispid 1584;
    property RowNumbers: WordBool dispid 1585;
    property FillAdjacentFormulas: WordBool dispid 1586;
    property HasAutoFormat: WordBool dispid 695;
    property RefreshOnFileOpen: WordBool dispid 1479;
    property Refreshing: WordBool readonly dispid 1587;
    property FetchedRowOverflow: WordBool readonly dispid 1588;
    property BackgroundQuery: WordBool dispid 1427;
    procedure CancelRefresh; dispid 1589;
    property RefreshStyle: XlCellInsertionMode dispid 1590;
    property EnableRefresh: WordBool dispid 1477;
    property SavePassword: WordBool dispid 1481;
    property Destination: Range readonly dispid 681;
    property Connection: OleVariant dispid 1432;
    property Sql: OleVariant dispid 1480;
    property PostText: WideString dispid 1591;
    property ResultRange: Range readonly dispid 1592;
    procedure Delete; dispid 117;
    function Refresh(BackgroundQuery: OleVariant): WordBool; dispid 1417;
    property Parameters: Parameters readonly dispid 1593;
    property Recordset: IDispatch dispid 1165;
    property SaveData: WordBool dispid 692;
    property TablesOnlyFromHTML: WordBool dispid 1594;
    property EnableEditing: WordBool dispid 1595;
  end;

// *********************************************************************//
// DispIntf:  QueryTables
// Flags:     (4096) Dispatchable
// GUID:      {00024429-0000-0000-C000-000000000046}
// *********************************************************************//
  QueryTables = dispinterface
    ['{00024429-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Add(Connection: OleVariant; const Destination: Range; Sql: OleVariant): QueryTable; dispid 181;
    function Item(Index: OleVariant): QueryTable; dispid 170;
    property _Default[Index: OleVariant]: QueryTable readonly dispid 0; default;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  Parameter
// Flags:     (4096) Dispatchable
// GUID:      {0002442A-0000-0000-C000-000000000046}
// *********************************************************************//
  Parameter = dispinterface
    ['{0002442A-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property DataType: XlParameterDataType dispid 722;
    property Type_: XlParameterType readonly dispid 108;
    property PromptString: WideString readonly dispid 1599;
    property Value: OleVariant readonly dispid 6;
    property SourceRange: Range readonly dispid 1600;
    property Name: WideString dispid 110;
    procedure SetParam(Type_: XlParameterType; Value: OleVariant); dispid 1601;
  end;

// *********************************************************************//
// DispIntf:  Parameters
// Flags:     (4096) Dispatchable
// GUID:      {0002442B-0000-0000-C000-000000000046}
// *********************************************************************//
  Parameters = dispinterface
    ['{0002442B-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant;
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(const Name: WideString; iDataType: OleVariant): Parameter; dispid 181;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): Parameter; dispid 170;
    property _Default[Index: OleVariant]: Parameter readonly dispid 0; default;
    procedure Delete; dispid 117;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  ODBCError
// Flags:     (4096) Dispatchable
// GUID:      {0002442C-0000-0000-C000-000000000046}
// *********************************************************************//
  ODBCError = dispinterface
    ['{0002442C-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property SqlState: WideString readonly dispid 1603;
    property ErrorString: WideString readonly dispid 1490;
  end;

// *********************************************************************//
// DispIntf:  ODBCErrors
// Flags:     (4096) Dispatchable
// GUID:      {0002442D-0000-0000-C000-000000000046}
// *********************************************************************//
  ODBCErrors = dispinterface
    ['{0002442D-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(Index: Integer): ODBCError; dispid 170;
    property _Default[Index: Integer]: ODBCError readonly dispid 0; default;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  Validation
// Flags:     (4096) Dispatchable
// GUID:      {0002442F-0000-0000-C000-000000000046}
// *********************************************************************//
  Validation = dispinterface
    ['{0002442F-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Add(Type_: XlDVType; AlertStyle: OleVariant; Operator: OleVariant; 
                  Formula1: OleVariant; Formula2: OleVariant); dispid 181;
    property AlertStyle: Integer readonly dispid 1605;
    property IgnoreBlank: WordBool dispid 1606;
    property IMEMode: Integer dispid 1607;
    property InCellDropdown: WordBool dispid 1608;
    procedure Delete; dispid 117;
    property ErrorMessage: WideString dispid 1609;
    property ErrorTitle: WideString dispid 1610;
    property InputMessage: WideString dispid 1611;
    property InputTitle: WideString dispid 1612;
    property Formula1: WideString readonly dispid 1579;
    property Formula2: WideString readonly dispid 1580;
    procedure Modify(Type_: OleVariant; AlertStyle: OleVariant; Operator: OleVariant; 
                     Formula1: OleVariant; Formula2: OleVariant); dispid 1581;
    property Operator: Integer readonly dispid 797;
    property ShowError: WordBool dispid 1613;
    property ShowInput: WordBool dispid 1614;
    property Type_: Integer readonly dispid 108;
    property Value: WordBool readonly dispid 6;
  end;

// *********************************************************************//
// DispIntf:  Hyperlinks
// Flags:     (4096) Dispatchable
// GUID:      {00024430-0000-0000-C000-000000000046}
// *********************************************************************//
  Hyperlinks = dispinterface
    ['{00024430-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(const Anchor: IDispatch; const Address: WideString; SubAddress: OleVariant): IDispatch; dispid 181;
    property Count: Integer readonly dispid 118;
    property Item[Index: OleVariant]: Hyperlink readonly dispid 170;
    property _Default[Index: OleVariant]: Hyperlink readonly dispid 0; default;
    property _NewEnum: IUnknown readonly dispid -4;
    procedure Delete; dispid 117;
  end;

// *********************************************************************//
// DispIntf:  Hyperlink
// Flags:     (4096) Dispatchable
// GUID:      {00024431-0000-0000-C000-000000000046}
// *********************************************************************//
  Hyperlink = dispinterface
    ['{00024431-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    property Range: Range readonly dispid 197;
    property Shape: Shape readonly dispid 1582;
    property SubAddress: WideString dispid 1471;
    property Address: WideString dispid 236;
    property Type_: Integer readonly dispid 108;
    procedure AddToFavorites; dispid 1476;
    procedure Delete; dispid 117;
    procedure Follow(NewWindow: OleVariant; AddHistory: OleVariant; ExtraInfo: OleVariant; 
                     Method: OleVariant; HeaderInfo: OleVariant); dispid 1616;
  end;

// *********************************************************************//
// DispIntf:  AutoFilter
// Flags:     (4096) Dispatchable
// GUID:      {00024432-0000-0000-C000-000000000046}
// *********************************************************************//
  AutoFilter = dispinterface
    ['{00024432-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Range: Range readonly dispid 197;
    property Filters: Filters readonly dispid 1617;
  end;

// *********************************************************************//
// DispIntf:  Filters
// Flags:     (4096) Dispatchable
// GUID:      {00024433-0000-0000-C000-000000000046}
// *********************************************************************//
  Filters = dispinterface
    ['{00024433-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    property _Default[Index: Integer]: Filter readonly dispid 0; default;
    property Item[Index: Integer]: Filter readonly dispid 170;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

// *********************************************************************//
// DispIntf:  Filter
// Flags:     (4096) Dispatchable
// GUID:      {00024434-0000-0000-C000-000000000046}
// *********************************************************************//
  Filter = dispinterface
    ['{00024434-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property On_: WordBool readonly dispid 1618;
    property Criteria1: OleVariant readonly dispid 796;
    property Operator: XlAutoFilterOperator readonly dispid 797;
    property Criteria2: OleVariant readonly dispid 798;
  end;

// *********************************************************************//
// DispIntf:  AutoCorrect
// Flags:     (4096) Dispatchable
// GUID:      {000208D4-0000-0000-C000-000000000046}
// *********************************************************************//
  AutoCorrect = dispinterface
    ['{000208D4-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure AddReplacement(const What: WideString; const Replacement: WideString); dispid 1146;
    property CapitalizeNamesOfDays: WordBool dispid 1150;
    procedure DeleteReplacement(const What: WideString); dispid 1147;
    function ReplacementList(Index: OleVariant): OleVariant; dispid 1151;
    property ReplaceText: WordBool dispid 1148;
    property TwoInitialCapitals: WordBool dispid 1149;
    property CorrectSentenceCap: WordBool dispid 1619;
    property CorrectCapsLock: WordBool dispid 1620;
  end;

// *********************************************************************//
// DispIntf:  Border
// Flags:     (4096) Dispatchable
// GUID:      {00020854-0000-0000-C000-000000000046}
// *********************************************************************//
  Border = dispinterface
    ['{00020854-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Color: OleVariant dispid 99;
    property ColorIndex: OleVariant dispid 97;
    property LineStyle: OleVariant dispid 119;
    property Weight: OleVariant dispid 120;
  end;

// *********************************************************************//
// DispIntf:  Interior
// Flags:     (4096) Dispatchable
// GUID:      {00020870-0000-0000-C000-000000000046}
// *********************************************************************//
  Interior = dispinterface
    ['{00020870-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Color: OleVariant dispid 99;
    property ColorIndex: OleVariant dispid 97;
    property InvertIfNegative: OleVariant dispid 132;
    property Pattern: OleVariant dispid 95;
    property PatternColor: OleVariant dispid 100;
    property PatternColorIndex: OleVariant dispid 98;
  end;

// *********************************************************************//
// DispIntf:  ChartFillFormat
// Flags:     (4096) Dispatchable
// GUID:      {00024435-0000-0000-C000-000000000046}
// *********************************************************************//
  ChartFillFormat = dispinterface
    ['{00024435-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure OneColorGradient(Style: MsoGradientStyle; Variant: Integer; Degree: Single); dispid 1621;
    procedure TwoColorGradient(Style: MsoGradientStyle; Variant: Integer); dispid 1624;
    procedure PresetTextured(PresetTexture: MsoPresetTexture); dispid 1625;
    procedure Solid; dispid 1627;
    procedure Patterned(Pattern: MsoPatternType); dispid 1628;
    procedure UserPicture(PictureFile: OleVariant; PictureFormat: OleVariant; 
                          PictureStackUnit: OleVariant; PicturePlacement: OleVariant); dispid 1629;
    procedure UserTextured(const TextureFile: WideString); dispid 1634;
    procedure PresetGradient(Style: MsoGradientStyle; Variant: Integer; 
                             PresetGradientType: MsoPresetGradientType); dispid 1636;
    property BackColor: ChartColorFormat readonly dispid 1638;
    property ForeColor: ChartColorFormat readonly dispid 1639;
    property GradientColorType: MsoGradientColorType readonly dispid 1640;
    property GradientDegree: Single readonly dispid 1641;
    property GradientStyle: MsoGradientStyle readonly dispid 1642;
    property GradientVariant: Integer readonly dispid 1643;
    property Pattern: MsoPatternType readonly dispid 95;
    property PresetGradientType: MsoPresetGradientType readonly dispid 1637;
    property PresetTexture: MsoPresetTexture readonly dispid 1626;
    property TextureName: WideString readonly dispid 1644;
    property TextureType: MsoTextureType readonly dispid 1645;
    property Type_: MsoFillType readonly dispid 108;
    property Visible: MsoTriState dispid 558;
  end;

// *********************************************************************//
// DispIntf:  ChartColorFormat
// Flags:     (4096) Dispatchable
// GUID:      {00024436-0000-0000-C000-000000000046}
// *********************************************************************//
  ChartColorFormat = dispinterface
    ['{00024436-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property SchemeColor: Integer dispid 1646;
    property RGB_: Integer readonly dispid 1055;
    property _Default: Integer readonly dispid 0;
    property Type_: Integer readonly dispid 108;
  end;

// *********************************************************************//
// DispIntf:  Axis
// Flags:     (4096) Dispatchable
// GUID:      {00020848-0000-0000-C000-000000000046}
// *********************************************************************//
  Axis = dispinterface
    ['{00020848-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT;
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property AxisBetweenCategories: WordBool dispid 45;
    property AxisGroup: XlAxisGroup readonly dispid 47;
    property AxisTitle: AxisTitle readonly dispid 82;
    property Border: Border readonly dispid 128;
    property CategoryNames: OleVariant dispid 156;
    property Crosses: XlAxisCrosses dispid 42;
    property CrossesAt: Double dispid 43;
    procedure Delete; dispid 117;
    property HasMajorGridlines: WordBool dispid 24;
    property HasMinorGridlines: WordBool dispid 25;
    property HasTitle: WordBool dispid 54;
    property MajorGridlines: Gridlines readonly dispid 89;
    property MajorTickMark: XlTickMark dispid 26;
    property MajorUnit: Double dispid 37;
    property MajorUnitIsAuto: WordBool dispid 38;
    property MaximumScale: Double dispid 35;
    property MaximumScaleIsAuto: WordBool dispid 36;
    property MinimumScale: Double dispid 33;
    property MinimumScaleIsAuto: WordBool dispid 34;
    property MinorGridlines: Gridlines readonly dispid 90;
    property MinorTickMark: XlTickMark dispid 27;
    property MinorUnit: Double dispid 39;
    property MinorUnitIsAuto: WordBool dispid 40;
    property ReversePlotOrder: WordBool dispid 44;
    property ScaleType: XlScaleType dispid 41;
    procedure Select; dispid 235;
    property TickLabelPosition: XlTickLabelPosition dispid 28;
    property TickLabels: TickLabels readonly dispid 91;
    property TickLabelSpacing: Integer dispid 29;
    property TickMarkSpacing: Integer dispid 31;
    property Type_: XlAxisType dispid 108;
    property BaseUnit: XlTimeUnit dispid 1647;
    property BaseUnitIsAuto: WordBool dispid 1648;
    property MajorUnitScale: XlTimeUnit dispid 1649;
    property MinorUnitScale: XlTimeUnit dispid 1650;
    property CategoryType: XlCategoryType dispid 1651;
    property Left: Double readonly dispid 127;
    property Top: Double readonly dispid 126;
    property Width: Double readonly dispid 122;
    property Height: Double readonly dispid 123;
  end;

// *********************************************************************//
// DispIntf:  ChartTitle
// Flags:     (4096) Dispatchable
// GUID:      {00020849-0000-0000-C000-000000000046}
// *********************************************************************//
  ChartTitle = dispinterface
    ['{00020849-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure Delete; dispid 117;
    property Interior: Interior readonly dispid 129;
    property Fill: ChartFillFormat readonly dispid 1663;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    property Font: Font readonly dispid 146;
    property HorizontalAlignment: OleVariant dispid 136;
    property Left: Double dispid 127;
    property Orientation: OleVariant dispid 134;
    property Shadow: WordBool dispid 103;
    property Text: WideString dispid 138;
    property Top: Double dispid 126;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property AutoScaleFont: OleVariant dispid 1525;
  end;

// *********************************************************************//
// DispIntf:  AxisTitle
// Flags:     (4096) Dispatchable
// GUID:      {0002084A-0000-0000-C000-000000000046}
// *********************************************************************//
  AxisTitle = dispinterface
    ['{0002084A-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure Delete; dispid 117;
    property Interior: Interior readonly dispid 129;
    property Fill: ChartFillFormat readonly dispid 1663;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    property Font: Font readonly dispid 146;
    property HorizontalAlignment: OleVariant dispid 136;
    property Left: Double dispid 127;
    property Orientation: OleVariant dispid 134;
    property Shadow: WordBool dispid 103;
    property Text: WideString dispid 138;
    property Top: Double dispid 126;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property AutoScaleFont: OleVariant dispid 1525;
  end;

// *********************************************************************//
// DispIntf:  ChartGroup
// Flags:     (4096) Dispatchable
// GUID:      {00020859-0000-0000-C000-000000000046}
// *********************************************************************//
  ChartGroup = dispinterface
    ['{00020859-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property AxisGroup: XlAxisGroup dispid 47;
    property DoughnutHoleSize: Integer dispid 1126;
    property DownBars: DownBars readonly dispid 141;
    property DropLines: DropLines readonly dispid 142;
    property FirstSliceAngle: Integer dispid 63;
    property GapWidth: Integer dispid 51;
    property HasDropLines: WordBool dispid 61;
    property HasHiLoLines: WordBool dispid 62;
    property HasRadarAxisLabels: WordBool dispid 64;
    property HasSeriesLines: WordBool dispid 65;
    property HasUpDownBars: WordBool dispid 66;
    property HiLoLines: HiLoLines readonly dispid 143;
    property Index: Integer readonly dispid 486;
    property Overlap: Integer dispid 56;
    property RadarAxisLabels: TickLabels readonly dispid 144;
    function SeriesCollection(Index: OleVariant): IDispatch; dispid 68;
    property SeriesLines: SeriesLines readonly dispid 145;
    property SubType: Integer dispid 109;
    property Type_: Integer dispid 108;
    property UpBars: UpBars readonly dispid 140;
    property VaryByCategories: WordBool dispid 60;
    property SizeRepresents: XlSizeRepresents dispid 1652;
    property BubbleScale: Integer dispid 1653;
    property ShowNegativeBubbles: WordBool dispid 1654;
    property SplitType: XlChartSplitType dispid 1655;
    property SplitValue: OleVariant dispid 1656;
    property SecondPlotSize: Integer dispid 1657;
    property Has3DShading: WordBool dispid 1658;
  end;

// *********************************************************************//
// DispIntf:  ChartGroups
// Flags:     (4096) Dispatchable
// GUID:      {0002085A-0000-0000-C000-000000000046}
// *********************************************************************//
  ChartGroups = dispinterface
    ['{0002085A-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): ChartGroup; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  Axes
// Flags:     (4096) Dispatchable
// GUID:      {0002085B-0000-0000-C000-000000000046}
// *********************************************************************//
  Axes = dispinterface
    ['{0002085B-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(Type_: XlAxisType; AxisGroup: XlAxisGroup): Axis; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  Points
// Flags:     (4096) Dispatchable
// GUID:      {00020869-0000-0000-C000-000000000046}
// *********************************************************************//
  Points = dispinterface
    ['{00020869-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(Index: Integer): Point; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  Point
// Flags:     (4096) Dispatchable
// GUID:      {0002086A-0000-0000-C000-000000000046}
// *********************************************************************//
  Point = dispinterface
    ['{0002086A-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure ApplyDataLabels(Type_: XlDataLabelsType; LegendKey: OleVariant; AutoText: OleVariant); dispid 151;
    property Border: Border readonly dispid 128;
    procedure ClearFormats; dispid 112;
    procedure Copy; dispid 551;
    property DataLabel: DataLabel readonly dispid 158;
    procedure Delete; dispid 117;
    property Explosion: Integer dispid 182;
    property HasDataLabel: WordBool dispid 77;
    property Interior: Interior readonly dispid 129;
    property InvertIfNegative: WordBool dispid 132;
    property MarkerBackgroundColor: Integer dispid 73;
    property MarkerBackgroundColorIndex: XlColorIndex dispid 74;
    property MarkerForegroundColor: Integer dispid 75;
    property MarkerForegroundColorIndex: XlColorIndex dispid 76;
    property MarkerSize: Integer dispid 231;
    property MarkerStyle: XlMarkerStyle dispid 72;
    procedure Paste; dispid 211;
    property PictureType: XlChartPictureType dispid 161;
    property PictureUnit: Integer dispid 162;
    procedure Select; dispid 235;
    property ApplyPictToSides: WordBool dispid 1659;
    property ApplyPictToFront: WordBool dispid 1660;
    property ApplyPictToEnd: WordBool dispid 1661;
    property Shadow: WordBool dispid 103;
    property SecondaryPlot: WordBool dispid 1662;
    property Fill: ChartFillFormat readonly dispid 1663;
  end;

// *********************************************************************//
// DispIntf:  Series
// Flags:     (4096) Dispatchable
// GUID:      {0002086B-0000-0000-C000-000000000046}
// *********************************************************************//
  Series = dispinterface
    ['{0002086B-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure ApplyDataLabels(Type_: XlDataLabelsType; LegendKey: OleVariant; AutoText: OleVariant; 
                              HasLeaderLines: OleVariant); dispid 151;
    property AxisGroup: XlAxisGroup dispid 47;
    property Border: Border readonly dispid 128;
    procedure ClearFormats; dispid 112;
    procedure Copy; dispid 551;
    function DataLabels(Index: OleVariant): IDispatch; dispid 157;
    procedure Delete; dispid 117;
    procedure ErrorBar(Direction: XlErrorBarDirection; Include: XlErrorBarInclude; 
                       Type_: XlErrorBarType; Amount: OleVariant; MinusValues: OleVariant); dispid 152;
    property ErrorBars: ErrorBars readonly dispid 159;
    property Explosion: Integer dispid 182;
    property Formula: WideString dispid 261;
    property FormulaLocal: WideString dispid 263;
    property FormulaR1C1: WideString dispid 264;
    property FormulaR1C1Local: WideString dispid 265;
    property HasDataLabels: WordBool dispid 78;
    property HasErrorBars: WordBool dispid 160;
    property Interior: Interior readonly dispid 129;
    property Fill: ChartFillFormat readonly dispid 1663;
    property InvertIfNegative: WordBool dispid 132;
    property MarkerBackgroundColor: Integer dispid 73;
    property MarkerBackgroundColorIndex: XlColorIndex dispid 74;
    property MarkerForegroundColor: Integer dispid 75;
    property MarkerForegroundColorIndex: XlColorIndex dispid 76;
    property MarkerSize: Integer dispid 231;
    property MarkerStyle: XlMarkerStyle dispid 72;
    property Name: WideString dispid 110;
    procedure Paste; dispid 211;
    property PictureType: XlChartPictureType dispid 161;
    property PictureUnit: Integer dispid 162;
    property PlotOrder: Integer dispid 228;
    function Points(Index: OleVariant): IDispatch; dispid 70;
    procedure Select; dispid 235;
    property Smooth: WordBool dispid 163;
    function Trendlines(Index: OleVariant): IDispatch; dispid 154;
    property Type_: Integer dispid 108;
    property ChartType: XlChartType dispid 1400;
    procedure ApplyCustomType(ChartType: XlChartType); dispid 1401;
    property Values: OleVariant dispid 164;
    property XValues: OleVariant dispid 1111;
    property BubbleSizes: OleVariant dispid 1664;
    property BarShape: XlBarShape dispid 1403;
    property ApplyPictToSides: WordBool dispid 1659;
    property ApplyPictToFront: WordBool dispid 1660;
    property ApplyPictToEnd: WordBool dispid 1661;
    property Has3DEffect: WordBool dispid 1665;
    property Shadow: WordBool dispid 103;
    property HasLeaderLines: WordBool dispid 1394;
    property LeaderLines: LeaderLines readonly dispid 1666;
  end;

// *********************************************************************//
// DispIntf:  SeriesCollection
// Flags:     (4096) Dispatchable
// GUID:      {0002086C-0000-0000-C000-000000000046}
// *********************************************************************//
  SeriesCollection = dispinterface
    ['{0002086C-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(Source: OleVariant; Rowcol: XlRowCol; SeriesLabels: OleVariant; 
                 CategoryLabels: OleVariant; Replace: OleVariant): Series; dispid 181;
    property Count: Integer readonly dispid 118;
    procedure Extend(Source: OleVariant; Rowcol: OleVariant; CategoryLabels: OleVariant); dispid 227;
    function Item(Index: OleVariant): Series; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
    procedure Paste(Rowcol: XlRowCol; SeriesLabels: OleVariant; CategoryLabels: OleVariant; 
                    Replace: OleVariant; NewSeries: OleVariant); dispid 211;
    function NewSeries: Series; dispid 1117;
  end;

// *********************************************************************//
// DispIntf:  DataLabel
// Flags:     (4096) Dispatchable
// GUID:      {000208B2-0000-0000-C000-000000000046}
// *********************************************************************//
  DataLabel = dispinterface
    ['{000208B2-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure Delete; dispid 117;
    property Interior: Interior readonly dispid 129;
    property Fill: ChartFillFormat readonly dispid 1663;
    property Caption: WideString dispid 139;
    property Characters[Start: OleVariant; Length: OleVariant]: Characters readonly dispid 603;
    property Font: Font readonly dispid 146;
    property HorizontalAlignment: OleVariant dispid 136;
    property Left: Double dispid 127;
    property Orientation: OleVariant dispid 134;
    property Shadow: WordBool dispid 103;
    property Text: WideString dispid 138;
    property Top: Double dispid 126;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoText: WordBool dispid 135;
    property NumberFormat: WideString dispid 193;
    property NumberFormatLinked: WordBool dispid 194;
    property ShowLegendKey: WordBool dispid 171;
    property Type_: OleVariant dispid 108;
    property Position: XlDataLabelPosition dispid 133;
  end;

// *********************************************************************//
// DispIntf:  DataLabels
// Flags:     (4096) Dispatchable
// GUID:      {000208B3-0000-0000-C000-000000000046}
// *********************************************************************//
  DataLabels = dispinterface
    ['{000208B3-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure Delete; dispid 117;
    property Interior: Interior readonly dispid 129;
    property Fill: ChartFillFormat readonly dispid 1663;
    procedure _Dummy9; dispid 65545;
    procedure _Dummy10; dispid 65546;
    property Font: Font readonly dispid 146;
    property HorizontalAlignment: OleVariant dispid 136;
    procedure _Dummy13; dispid 65549;
    property Orientation: OleVariant dispid 134;
    property Shadow: WordBool dispid 103;
    procedure _Dummy16; dispid 65552;
    procedure _Dummy17; dispid 65553;
    property VerticalAlignment: OleVariant dispid 137;
    property ReadingOrder: Integer dispid 975;
    property AutoScaleFont: OleVariant dispid 1525;
    property AutoText: WordBool dispid 135;
    property NumberFormat: WideString dispid 193;
    property NumberFormatLinked: WordBool dispid 194;
    property ShowLegendKey: WordBool dispid 171;
    property Type_: OleVariant dispid 108;
    property Position: XlDataLabelPosition dispid 133;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): DataLabel; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  LegendEntry
// Flags:     (4096) Dispatchable
// GUID:      {000208BA-0000-0000-C000-000000000046}
// *********************************************************************//
  LegendEntry = dispinterface
    ['{000208BA-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Delete; dispid 117;
    property Font: Font readonly dispid 146;
    property Index: Integer readonly dispid 486;
    property LegendKey: LegendKey readonly dispid 174;
    procedure Select; dispid 235;
    property AutoScaleFont: OleVariant dispid 1525;
    property Left: Double readonly dispid 127;
    property Top: Double readonly dispid 126;
    property Width: Double readonly dispid 122;
    property Height: Double readonly dispid 123;
  end;

// *********************************************************************//
// DispIntf:  LegendEntries
// Flags:     (4096) Dispatchable
// GUID:      {000208BB-0000-0000-C000-000000000046}
// *********************************************************************//
  LegendEntries = dispinterface
    ['{000208BB-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): LegendEntry; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  LegendKey
// Flags:     (4096) Dispatchable
// GUID:      {000208BC-0000-0000-C000-000000000046}
// *********************************************************************//
  LegendKey = dispinterface
    ['{000208BC-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Border: Border readonly dispid 128;
    procedure ClearFormats; dispid 112;
    procedure Delete; dispid 117;
    property Interior: Interior readonly dispid 129;
    property Fill: ChartFillFormat readonly dispid 1663;
    property InvertIfNegative: WordBool dispid 132;
    property MarkerBackgroundColor: Integer dispid 73;
    property MarkerBackgroundColorIndex: XlColorIndex dispid 74;
    property MarkerForegroundColor: Integer dispid 75;
    property MarkerForegroundColorIndex: XlColorIndex dispid 76;
    property MarkerSize: Integer dispid 231;
    property MarkerStyle: XlMarkerStyle dispid 72;
    property PictureType: Integer dispid 161;
    property PictureUnit: Integer dispid 162;
    procedure Select; dispid 235;
    property Smooth: WordBool dispid 163;
    property Left: Double readonly dispid 127;
    property Top: Double readonly dispid 126;
    property Width: Double readonly dispid 122;
    property Height: Double readonly dispid 123;
    property Shadow: WordBool dispid 103;
  end;

// *********************************************************************//
// DispIntf:  Trendlines
// Flags:     (4096) Dispatchable
// GUID:      {000208BD-0000-0000-C000-000000000046}
// *********************************************************************//
  Trendlines = dispinterface
    ['{000208BD-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant;
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    function Add(Type_: XlTrendlineType; Order: OleVariant; Period: OleVariant; 
                 Forward: OleVariant; Backward: OleVariant; Intercept: OleVariant; 
                 DisplayEquation: OleVariant; DisplayRSquared: OleVariant; Name: OleVariant): Trendline; dispid 181;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): Trendline; dispid 170;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// DispIntf:  Trendline
// Flags:     (4096) Dispatchable
// GUID:      {000208BE-0000-0000-C000-000000000046}
// *********************************************************************//
  Trendline = dispinterface
    ['{000208BE-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Backward: Integer dispid 185;
    property Border: Border readonly dispid 128;
    procedure ClearFormats; dispid 112;
    property DataLabel: DataLabel readonly dispid 158;
    procedure Delete; dispid 117;
    property DisplayEquation: WordBool dispid 190;
    property DisplayRSquared: WordBool dispid 189;
    property Forward: Integer dispid 191;
    property Index: Integer readonly dispid 486;
    property Intercept: Double dispid 186;
    property InterceptIsAuto: WordBool dispid 187;
    property Name: WideString dispid 110;
    property NameIsAuto: WordBool dispid 188;
    property Order: Integer dispid 192;
    property Period: Integer dispid 184;
    procedure Select; dispid 235;
    property Type_: XlTrendlineType dispid 108;
  end;

// *********************************************************************//
// DispIntf:  Corners
// Flags:     (4096) Dispatchable
// GUID:      {000208C0-0000-0000-C000-000000000046}
// *********************************************************************//
  Corners = dispinterface
    ['{000208C0-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
  end;

// *********************************************************************//
// DispIntf:  SeriesLines
// Flags:     (4096) Dispatchable
// GUID:      {000208C1-0000-0000-C000-000000000046}
// *********************************************************************//
  SeriesLines = dispinterface
    ['{000208C1-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure Delete; dispid 117;
  end;

// *********************************************************************//
// DispIntf:  HiLoLines
// Flags:     (4096) Dispatchable
// GUID:      {000208C2-0000-0000-C000-000000000046}
// *********************************************************************//
  HiLoLines = dispinterface
    ['{000208C2-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure Delete; dispid 117;
  end;

// *********************************************************************//
// DispIntf:  Gridlines
// Flags:     (4096) Dispatchable
// GUID:      {000208C3-0000-0000-C000-000000000046}
// *********************************************************************//
  Gridlines = dispinterface
    ['{000208C3-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure Delete; dispid 117;
  end;

// *********************************************************************//
// DispIntf:  DropLines
// Flags:     (4096) Dispatchable
// GUID:      {000208C4-0000-0000-C000-000000000046}
// *********************************************************************//
  DropLines = dispinterface
    ['{000208C4-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure Delete; dispid 117;
  end;

// *********************************************************************//
// DispIntf:  LeaderLines
// Flags:     (4096) Dispatchable
// GUID:      {00024437-0000-0000-C000-000000000046}
// *********************************************************************//
  LeaderLines = dispinterface
    ['{00024437-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Border: Border readonly dispid 128;
    procedure Delete; dispid 117;
    procedure Select; dispid 235;
  end;

// *********************************************************************//
// DispIntf:  UpBars
// Flags:     (4096) Dispatchable
// GUID:      {000208C5-0000-0000-C000-000000000046}
// *********************************************************************//
  UpBars = dispinterface
    ['{000208C5-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure Delete; dispid 117;
    property Interior: Interior readonly dispid 129;
    property Fill: ChartFillFormat readonly dispid 1663;
  end;

// *********************************************************************//
// DispIntf:  DownBars
// Flags:     (4096) Dispatchable
// GUID:      {000208C6-0000-0000-C000-000000000046}
// *********************************************************************//
  DownBars = dispinterface
    ['{000208C6-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure Delete; dispid 117;
    property Interior: Interior readonly dispid 129;
    property Fill: ChartFillFormat readonly dispid 1663;
  end;

// *********************************************************************//
// DispIntf:  Floor
// Flags:     (4096) Dispatchable
// GUID:      {000208C7-0000-0000-C000-000000000046}
// *********************************************************************//
  Floor = dispinterface
    ['{000208C7-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure ClearFormats; dispid 112;
    property Interior: Interior readonly dispid 129;
    property Fill: ChartFillFormat readonly dispid 1663;
    property PictureType: OleVariant dispid 161;
    procedure Paste; dispid 211;
  end;

// *********************************************************************//
// DispIntf:  Walls
// Flags:     (4096) Dispatchable
// GUID:      {000208C8-0000-0000-C000-000000000046}
// *********************************************************************//
  Walls = dispinterface
    ['{000208C8-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure ClearFormats; dispid 112;
    property Interior: Interior readonly dispid 129;
    property Fill: ChartFillFormat readonly dispid 1663;
    property PictureType: OleVariant dispid 161;
    procedure Paste; dispid 211;
    property PictureUnit: OleVariant dispid 162;
  end;

// *********************************************************************//
// DispIntf:  TickLabels
// Flags:     (4096) Dispatchable
// GUID:      {000208C9-0000-0000-C000-000000000046}
// *********************************************************************//
  TickLabels = dispinterface
    ['{000208C9-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Delete; dispid 117;
    property Font: Font readonly dispid 146;
    property Name: WideString readonly dispid 110;
    property NumberFormat: WideString dispid 193;
    property NumberFormatLinked: WordBool dispid 194;
    property Orientation: XlTickLabelOrientation dispid 134;
    procedure Select; dispid 235;
    property ReadingOrder: Integer dispid 975;
    property AutoScaleFont: OleVariant dispid 1525;
  end;

// *********************************************************************//
// DispIntf:  PlotArea
// Flags:     (4096) Dispatchable
// GUID:      {000208CB-0000-0000-C000-000000000046}
// *********************************************************************//
  PlotArea = dispinterface
    ['{000208CB-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure ClearFormats; dispid 112;
    property Height: Double dispid 123;
    property Interior: Interior readonly dispid 129;
    property Fill: ChartFillFormat readonly dispid 1663;
    property Left: Double dispid 127;
    property Top: Double dispid 126;
    property Width: Double dispid 122;
    property InsideLeft: Double readonly dispid 1667;
    property InsideTop: Double readonly dispid 1668;
    property InsideWidth: Double readonly dispid 1669;
    property InsideHeight: Double readonly dispid 1670;
  end;

// *********************************************************************//
// DispIntf:  ChartArea
// Flags:     (4096) Dispatchable
// GUID:      {000208CC-0000-0000-C000-000000000046}
// *********************************************************************//
  ChartArea = dispinterface
    ['{000208CC-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure Clear; dispid 111;
    procedure ClearContents; dispid 113;
    procedure Copy; dispid 551;
    property Font: Font readonly dispid 146;
    property Shadow: WordBool dispid 103;
    procedure ClearFormats; dispid 112;
    property Height: Double dispid 123;
    property Interior: Interior readonly dispid 129;
    property Fill: ChartFillFormat readonly dispid 1663;
    property Left: Double dispid 127;
    property Top: Double dispid 126;
    property Width: Double dispid 122;
    property AutoScaleFont: OleVariant dispid 1525;
  end;

// *********************************************************************//
// DispIntf:  Legend
// Flags:     (4096) Dispatchable
// GUID:      {000208CD-0000-0000-C000-000000000046}
// *********************************************************************//
  Legend = dispinterface
    ['{000208CD-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure Delete; dispid 117;
    property Font: Font readonly dispid 146;
    function LegendEntries(Index: OleVariant): IDispatch; dispid 173;
    property Position: XlLegendPosition dispid 133;
    property Shadow: WordBool dispid 103;
    procedure Clear; dispid 111;
    property Height: Double dispid 123;
    property Interior: Interior readonly dispid 129;
    property Fill: ChartFillFormat readonly dispid 1663;
    property Left: Double dispid 127;
    property Top: Double dispid 126;
    property Width: Double dispid 122;
    property AutoScaleFont: OleVariant dispid 1525;
  end;

// *********************************************************************//
// DispIntf:  ErrorBars
// Flags:     (4096) Dispatchable
// GUID:      {000208CE-0000-0000-C000-000000000046}
// *********************************************************************//
  ErrorBars = dispinterface
    ['{000208CE-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Name: WideString readonly dispid 110;
    procedure Select; dispid 235;
    property Border: Border readonly dispid 128;
    procedure Delete; dispid 117;
    procedure ClearFormats; dispid 112;
    property EndStyle: XlEndStyleCap dispid 1124;
  end;

// *********************************************************************//
// DispIntf:  DataTable
// Flags:     (4096) Dispatchable
// GUID:      {00020843-0000-0000-C000-000000000046}
// *********************************************************************//
  DataTable = dispinterface
    ['{00020843-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property ShowLegendKey: WordBool dispid 171;
    property HasBorderHorizontal: WordBool dispid 1671;
    property HasBorderVertical: WordBool dispid 1672;
    property HasBorderOutline: WordBool dispid 1673;
    property Border: Border readonly dispid 128;
    property Font: Font readonly dispid 146;
    procedure Select; dispid 235;
    procedure Delete; dispid 117;
    property AutoScaleFont: OleVariant dispid 1525;
  end;

// *********************************************************************//
// DispIntf:  Phonetic
// Flags:     (4096) Dispatchable
// GUID:      {00024438-0000-0000-C000-000000000046}
// *********************************************************************//
  Phonetic = dispinterface
    ['{00024438-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Visible: WordBool dispid 558;
    property CharacterType: Integer dispid 1674;
    property Alignment: Integer dispid 453;
    property Font: Font readonly dispid 146;
    property Text: WideString dispid 138;
  end;

// *********************************************************************//
// DispIntf:  Shape
// Flags:     (4096) Dispatchable
// GUID:      {00024439-0000-0000-C000-000000000046}
// *********************************************************************//
  Shape = dispinterface
    ['{00024439-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Apply; dispid 1675;
    procedure Delete; dispid 117;
    function Duplicate: Shape; dispid 1039;
    procedure Flip(FlipCmd: MsoFlipCmd); dispid 1676;
    procedure IncrementLeft(Increment: Single); dispid 1678;
    procedure IncrementRotation(Increment: Single); dispid 1680;
    procedure IncrementTop(Increment: Single); dispid 1681;
    procedure PickUp; dispid 1682;
    procedure RerouteConnections; dispid 1683;
    procedure ScaleHeight(Factor: Single; RelativeToOriginalSize: MsoTriState; Scale: OleVariant); dispid 1684;
    procedure ScaleWidth(Factor: Single; RelativeToOriginalSize: MsoTriState; Scale: OleVariant); dispid 1688;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SetShapesDefaultProperties; dispid 1689;
    function Ungroup: ShapeRange; dispid 244;
    procedure ZOrder(ZOrderCmd: MsoZOrderCmd); dispid 622;
    property Adjustments: Adjustments readonly dispid 1691;
    property TextFrame: TextFrame readonly dispid 1692;
    property AutoShapeType: MsoAutoShapeType dispid 1693;
    property Callout: CalloutFormat readonly dispid 1694;
    property ConnectionSiteCount: Integer readonly dispid 1695;
    property Connector: MsoTriState readonly dispid 1696;
    property ConnectorFormat: ConnectorFormat readonly dispid 1697;
    property Fill: FillFormat readonly dispid 1663;
    property GroupItems: GroupShapes readonly dispid 1698;
    property Height: Single dispid 123;
    property HorizontalFlip: MsoTriState readonly dispid 1699;
    property Left: Single dispid 127;
    property Line: LineFormat readonly dispid 817;
    property LockAspectRatio: MsoTriState dispid 1700;
    property Name: WideString dispid 110;
    property Nodes: ShapeNodes readonly dispid 1701;
    property Rotation: Single dispid 59;
    property PictureFormat: PictureFormat readonly dispid 1631;
    property Shadow: ShadowFormat readonly dispid 103;
    property TextEffect: TextEffectFormat readonly dispid 1702;
    property ThreeD: ThreeDFormat readonly dispid 1703;
    property Top: Single dispid 126;
    property Type_: MsoShapeType readonly dispid 108;
    property VerticalFlip: MsoTriState readonly dispid 1704;
    property Vertices: OleVariant readonly dispid 621;
    property Visible: MsoTriState dispid 558;
    property Width: Single dispid 122;
    property ZOrderPosition: Integer readonly dispid 1705;
    property Hyperlink: Hyperlink readonly dispid 1706;
    property BlackWhiteMode: MsoBlackWhiteMode dispid 1707;
    property DrawingObject: IDispatch readonly dispid 1708;
    property OnAction: WideString dispid 596;
    property Locked: WordBool dispid 269;
    property TopLeftCell: Range readonly dispid 620;
    property BottomRightCell: Range readonly dispid 615;
    property Placement: XlPlacement dispid 617;
    procedure Copy; dispid 551;
    procedure Cut; dispid 565;
    procedure CopyPicture(Appearance: OleVariant; Format: OleVariant); dispid 213;
    property ControlFormat: ControlFormat readonly dispid 1709;
    property LinkFormat: LinkFormat readonly dispid 1710;
    property OLEFormat: OLEFormat readonly dispid 1711;
    property FormControlType: XlFormControl readonly dispid 1712;
  end;

// *********************************************************************//
// DispIntf:  Shapes
// Flags:     (4096) Dispatchable
// GUID:      {0002443A-0000-0000-C000-000000000046}
// *********************************************************************//
  Shapes = dispinterface
    ['{0002443A-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): Shape; dispid 170;
    function _Default(Index: OleVariant): Shape; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    function AddCallout(Type_: MsoCalloutType; Left: Single; Top: Single; Width: Single; 
                        Height: Single): Shape; dispid 1713;
    function AddConnector(Type_: MsoConnectorType; BeginX: Single; BeginY: Single; EndX: Single; 
                          EndY: Single): Shape; dispid 1714;
    function AddCurve(SafeArrayOfPoints: OleVariant): Shape; dispid 1719;
    function AddLabel(Orientation: MsoTextOrientation; Left: Single; Top: Single; Width: Single; 
                      Height: Single): Shape; dispid 1721;
    function AddLine(BeginX: Single; BeginY: Single; EndX: Single; EndY: Single): Shape; dispid 1722;
    function AddPicture(const Filename: WideString; LinkToFile: MsoTriState; 
                        SaveWithDocument: MsoTriState; Left: Single; Top: Single; Width: Single; 
                        Height: Single): Shape; dispid 1723;
    function AddPolyline(SafeArrayOfPoints: OleVariant): Shape; dispid 1726;
    function AddShape(Type_: MsoAutoShapeType; Left: Single; Top: Single; Width: Single; 
                      Height: Single): Shape; dispid 1727;
    function AddTextEffect(PresetTextEffect: MsoPresetTextEffect; const Text: WideString; 
                           const FontName: WideString; FontSize: Single; FontBold: MsoTriState; 
                           FontItalic: MsoTriState; Left: Single; Top: Single): Shape; dispid 1728;
    function AddTextbox(Orientation: MsoTextOrientation; Left: Single; Top: Single; Width: Single; 
                        Height: Single): Shape; dispid 1734;
    function BuildFreeform(EditingType: MsoEditingType; X1: Single; Y1: Single): FreeformBuilder; dispid 1735;
    property Range[Index: OleVariant]: ShapeRange readonly dispid 197;
    procedure SelectAll; dispid 1737;
    function AddFormControl(Type_: XlFormControl; Left: Integer; Top: Integer; Width: Integer; 
                            Height: Integer): Shape; dispid 1738;
    function AddOLEObject(ClassType: OleVariant; Filename: OleVariant; Link: OleVariant; 
                          DisplayAsIcon: OleVariant; IconFileName: OleVariant; 
                          IconIndex: OleVariant; IconLabel: OleVariant; Left: OleVariant; 
                          Top: OleVariant; Width: OleVariant; Height: OleVariant): Shape; dispid 1739;
  end;

// *********************************************************************//
// DispIntf:  ShapeRange
// Flags:     (4096) Dispatchable
// GUID:      {0002443B-0000-0000-C000-000000000046}
// *********************************************************************//
  ShapeRange = dispinterface
    ['{0002443B-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): Shape; dispid 170;
    function _Default(Index: OleVariant): Shape; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
    procedure Align(AlignCmd: MsoAlignCmd; RelativeTo: MsoTriState); dispid 1740;
    procedure Apply; dispid 1675;
    procedure Delete; dispid 117;
    procedure Distribute(DistributeCmd: MsoDistributeCmd; RelativeTo: MsoTriState); dispid 1742;
    function Duplicate: ShapeRange; dispid 1039;
    procedure Flip(FlipCmd: MsoFlipCmd); dispid 1676;
    procedure IncrementLeft(Increment: Single); dispid 1678;
    procedure IncrementRotation(Increment: Single); dispid 1680;
    procedure IncrementTop(Increment: Single); dispid 1681;
    function Group: Shape; dispid 46;
    procedure PickUp; dispid 1682;
    procedure RerouteConnections; dispid 1683;
    function Regroup: Shape; dispid 1744;
    procedure ScaleHeight(Factor: Single; RelativeToOriginalSize: MsoTriState; Scale: OleVariant); dispid 1684;
    procedure ScaleWidth(Factor: Single; RelativeToOriginalSize: MsoTriState; Scale: OleVariant); dispid 1688;
    procedure Select(Replace: OleVariant); dispid 235;
    procedure SetShapesDefaultProperties; dispid 1689;
    function Ungroup: ShapeRange; dispid 244;
    procedure ZOrder(ZOrderCmd: MsoZOrderCmd); dispid 622;
    property Adjustments: Adjustments readonly dispid 1691;
    property TextFrame: TextFrame readonly dispid 1692;
    property AutoShapeType: MsoAutoShapeType dispid 1693;
    property Callout: CalloutFormat readonly dispid 1694;
    property ConnectionSiteCount: Integer readonly dispid 1695;
    property Connector: MsoTriState readonly dispid 1696;
    property ConnectorFormat: ConnectorFormat readonly dispid 1697;
    property Fill: FillFormat readonly dispid 1663;
    property GroupItems: GroupShapes readonly dispid 1698;
    property Height: Single dispid 123;
    property HorizontalFlip: MsoTriState readonly dispid 1699;
    property Left: Single dispid 127;
    property Line: LineFormat readonly dispid 817;
    property LockAspectRatio: MsoTriState dispid 1700;
    property Name: WideString dispid 110;
    property Nodes: ShapeNodes readonly dispid 1701;
    property Rotation: Single dispid 59;
    property PictureFormat: PictureFormat readonly dispid 1631;
    property Shadow: ShadowFormat readonly dispid 103;
    property TextEffect: TextEffectFormat readonly dispid 1702;
    property ThreeD: ThreeDFormat readonly dispid 1703;
    property Top: Single dispid 126;
    property Type_: MsoShapeType readonly dispid 108;
    property VerticalFlip: MsoTriState readonly dispid 1704;
    property Vertices: OleVariant readonly dispid 621;
    property Visible: MsoTriState dispid 558;
    property Width: Single dispid 122;
    property ZOrderPosition: Integer readonly dispid 1705;
    property BlackWhiteMode: MsoBlackWhiteMode dispid 1707;
  end;

// *********************************************************************//
// DispIntf:  GroupShapes
// Flags:     (4096) Dispatchable
// GUID:      {0002443C-0000-0000-C000-000000000046}
// *********************************************************************//
  GroupShapes = dispinterface
    ['{0002443C-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property Count: Integer readonly dispid 118;
    function Item(Index: OleVariant): Shape; dispid 170;
    function _Default(Index: OleVariant): Shape; dispid 0;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

// *********************************************************************//
// DispIntf:  TextFrame
// Flags:     (4096) Dispatchable
// GUID:      {0002443D-0000-0000-C000-000000000046}
// *********************************************************************//
  TextFrame = dispinterface
    ['{0002443D-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property MarginBottom: Single dispid 1745;
    property MarginLeft: Single dispid 1746;
    property MarginRight: Single dispid 1747;
    property MarginTop: Single dispid 1748;
    property Orientation: MsoTextOrientation dispid 134;
    function Characters(Start: OleVariant; Length: OleVariant): Characters; dispid 603;
    property HorizontalAlignment: XlHAlign dispid 136;
    property VerticalAlignment: XlVAlign dispid 137;
    property AutoSize: WordBool dispid 614;
    property ReadingOrder: Integer dispid 975;
    property AutoMargins: WordBool dispid 1749;
  end;

// *********************************************************************//
// DispIntf:  ConnectorFormat
// Flags:     (4096) Dispatchable
// GUID:      {0002443E-0000-0000-C000-000000000046}
// *********************************************************************//
  ConnectorFormat = dispinterface
    ['{0002443E-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure BeginConnect(const ConnectedShape: Shape; ConnectionSite: Integer); dispid 1750;
    procedure BeginDisconnect; dispid 1753;
    procedure EndConnect(const ConnectedShape: Shape; ConnectionSite: Integer); dispid 1754;
    procedure EndDisconnect; dispid 1755;
    property BeginConnected: MsoTriState readonly dispid 1756;
    property BeginConnectedShape: Shape readonly dispid 1757;
    property BeginConnectionSite: Integer readonly dispid 1758;
    property EndConnected: MsoTriState readonly dispid 1759;
    property EndConnectedShape: Shape readonly dispid 1760;
    property EndConnectionSite: Integer readonly dispid 1761;
    property Type_: MsoConnectorType dispid 108;
  end;

// *********************************************************************//
// DispIntf:  FreeformBuilder
// Flags:     (4096) Dispatchable
// GUID:      {0002443F-0000-0000-C000-000000000046}
// *********************************************************************//
  FreeformBuilder = dispinterface
    ['{0002443F-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure AddNodes(SegmentType: MsoSegmentType; EditingType: MsoEditingType; X1: Single; 
                       Y1: Single; X2: OleVariant; Y2: OleVariant; X3: OleVariant; Y3: OleVariant); dispid 1762;
    function ConvertToShape: Shape; dispid 1766;
  end;

// *********************************************************************//
// DispIntf:  ControlFormat
// Flags:     (4096) Dispatchable
// GUID:      {00024440-0000-0000-C000-000000000046}
// *********************************************************************//
  ControlFormat = dispinterface
    ['{00024440-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure AddItem(const Text: WideString; Index: OleVariant); dispid 851;
    procedure RemoveAllItems; dispid 853;
    procedure RemoveItem(Index: Integer; Count: OleVariant); dispid 852;
    property DropDownLines: Integer dispid 848;
    property Enabled: WordBool dispid 600;
    property LargeChange: Integer dispid 845;
    property LinkedCell: WideString dispid 1058;
    function List(Index: OleVariant): OleVariant; dispid 861;
    property ListCount: Integer dispid 849;
    property ListFillRange: WideString dispid 847;
    property ListIndex: Integer dispid 850;
    property LockedText: WordBool dispid 616;
    property Max: Integer dispid 842;
    property Min: Integer dispid 843;
    property MultiSelect: Integer dispid 32;
    property PrintObject: WordBool dispid 618;
    property SmallChange: Integer dispid 844;
    property _Default: Integer dispid 0;
    property Value: Integer dispid 6;
  end;

// *********************************************************************//
// DispIntf:  OLEFormat
// Flags:     (4096) Dispatchable
// GUID:      {00024441-0000-0000-C000-000000000046}
// *********************************************************************//
  OLEFormat = dispinterface
    ['{00024441-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    procedure Activate; dispid 304;
    property Object_: IDispatch readonly dispid 1049;
    property ProgId: WideString readonly dispid 1523;
    procedure Verb(Verb: OleVariant); dispid 606;
  end;

// *********************************************************************//
// DispIntf:  LinkFormat
// Flags:     (4096) Dispatchable
// GUID:      {00024442-0000-0000-C000-000000000046}
// *********************************************************************//
  LinkFormat = dispinterface
    ['{00024442-0000-0000-C000-000000000046}']
    procedure QueryInterface_(var riid: {??TGUID} OleVariant; out ppvObj: {??Pointer} OleVariant); dispid 1610612736;
    function AddRef_: UINT; dispid 1610612737;
    function Release_: UINT; dispid 1610612738;
    procedure GetTypeInfoCount_(out pctinfo: SYSUINT); dispid 1610678272;
    procedure GetTypeInfo_(itinfo: SYSUINT; lcid: UINT; out pptinfo: {??Pointer} OleVariant); dispid 1610678273;
    procedure GetIDsOfNames_(var riid: {??TGUID} OleVariant; rgszNames: {??PPShortint1} OleVariant; 
                             cNames: SYSUINT; lcid: UINT; out rgdispid: Integer); dispid 1610678274;
    procedure Invoke_(dispidMember: Integer; var riid: {??TGUID} OleVariant; lcid: UINT; 
                      wFlags: {??Word} OleVariant; var pdispparams: {??DISPPARAMS} OleVariant; 
                      out pvarResult: OleVariant; out pexcepinfo: {??EXCEPINFO} OleVariant; 
                      out puArgErr: SYSUINT); dispid 1610678275;
    property Application_: Application_ readonly dispid 148;
    property Creator: XlCreator readonly dispid 149;
    property Parent: IDispatch readonly dispid 150;
    property AutoUpdate: WordBool dispid 1048;
    property Locked: WordBool dispid 269;
    procedure Update; dispid 680;
  end;
{$ENDIF}

implementation

uses ComObj;

end.

